{
  final MemberInteractionMementoDto mim=new MemberInteractionMementoDto();
  mim.setMajorVersion("1");
  mim.setMinorVersion("0");
  mim.setTransactionId(transactionId.toString());
  final MemberInteractionDto memberInteraction;
  if (type == Type.ACTION_INVOCATION) {
    final ActionInvocationDto invocation=actionInvocationFor(mim);
    final ActionInvocationDto.Parameters parameters=invocation.getParameters();
    parameters.getParameter().addAll(parameterDtos);
    invocation.setReturned(returnDto);
    memberInteraction=invocation;
  }
 else {
    final PropertyModificationDto modification=propertyModificationFor(mim);
    memberInteraction=modification;
  }
  memberInteraction.setSequence(sequence);
  memberInteraction.setId(mim.getTransactionId() + "." + sequence);
  final OidDto target=new OidDto();
  target.setObjectType(targetBookmark.getObjectType());
  target.setObjectIdentifier(target.getObjectIdentifier());
  memberInteraction.setTarget(target);
  memberInteraction.setTitle(targetTitle);
  memberInteraction.setUser(user);
  memberInteraction.setMemberIdentifier(memberIdentifier);
  final PeriodDto timings=timingsFor(memberInteraction);
  timings.setStart(JavaSqlTimestampXmlGregorianCalendarAdapter.print(startedAt));
  timings.setComplete(JavaSqlTimestampXmlGregorianCalendarAdapter.print(completedAt));
  return mim;
}
