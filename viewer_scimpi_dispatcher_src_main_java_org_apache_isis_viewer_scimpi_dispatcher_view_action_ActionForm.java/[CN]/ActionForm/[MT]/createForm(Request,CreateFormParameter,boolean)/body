{
  RequestContext context=request.getContext();
  ObjectAdapter object=MethodsUtils.findObject(context,parameterObject.objectId);
  String version=request.getContext().mapVersion(object);
  final ObjectAction action=MethodsUtils.findAction(object,parameterObject.methodName);
  if (action.getParameterCount() == 0) {
    throw new ScimpiException("Action form can only be used for actions with parameters");
  }
  if (parameterObject.showMessage && MethodsUtils.isVisible(object,action)) {
    String notUsable=MethodsUtils.isUsable(object,action);
    if (notUsable != null) {
      if (!withoutProcessing) {
        request.skipUntilClose();
      }
      request.appendHtml("<div class=\"" + parameterObject.className + "-message\" >"+ notUsable+ "</div>");
      return;
    }
  }
  if (!MethodsUtils.isVisibleAndUsable(object,action)) {
    if (!withoutProcessing) {
      request.skipUntilClose();
    }
    return;
  }
  String objectId=context.mapObject(object,Scope.INTERACTION);
  String errorView=context.fullFilePath(parameterObject.forwardErrorTo == null ? context.getResourceFile() : parameterObject.forwardErrorTo);
  String voidView=context.fullFilePath(parameterObject.forwardVoidTo == null ? context.getResourceFile() : parameterObject.forwardVoidTo);
  HiddenInputField[] hiddenFields=new HiddenInputField[]{new HiddenInputField(OBJECT,objectId),new HiddenInputField(VERSION,version),new HiddenInputField(METHOD,parameterObject.methodName),parameterObject.forwardResultTo == null ? null : new HiddenInputField(VIEW,context.fullFilePath(parameterObject.forwardResultTo)),new HiddenInputField(VOID,voidView),new HiddenInputField(ERRORS,errorView),parameterObject.completionMessage == null ? null : new HiddenInputField(MESSAGE,parameterObject.completionMessage),parameterObject.scope == null ? null : new HiddenInputField(SCOPE,parameterObject.scope),parameterObject.resultOverride == null ? null : new HiddenInputField(RESULT_OVERRIDE,parameterObject.resultOverride),parameterObject.resultName == null ? null : new HiddenInputField(RESULT_NAME,parameterObject.resultName),parameterObject.resultName == null ? null : new HiddenInputField(RequestContext.RESULT,(String)request.getContext().getVariable(RequestContext.RESULT))};
  FormFieldBlock containedBlock=new FormFieldBlock(){
    public boolean isNullable(    String name){
      int index=Integer.parseInt(name.substring(5)) - 1;
      ObjectActionParameter param=action.getParameters().get(index);
      return param.isOptional();
    }
  }
;
  request.setBlockContent(containedBlock);
  if (!withoutProcessing) {
    request.processUtilCloseTag();
  }
  FormState entryState=(FormState)context.getVariable(ENTRY_FIELDS);
  InputField[] formFields=createFields(action,object);
  containedBlock.hideExcludedParameters(formFields);
  containedBlock.setUpValues(formFields);
  initializeFields(context,object,action,formFields);
  setDefaults(context,object,action,formFields,entryState,parameterObject.showIcon);
  String errors=null;
  if (entryState != null && entryState.isForForm(objectId + ":" + parameterObject.methodName)) {
    copyEntryState(context,object,action,formFields,entryState);
    errors=entryState.getError();
  }
  overrideWithHtml(context,containedBlock,formFields);
  String formTitle;
  if (parameterObject.formTitle == null) {
    formTitle=action.getName();
  }
 else {
    formTitle=parameterObject.formTitle;
  }
  String buttonTitle=parameterObject.buttonTitle;
  if (buttonTitle == null) {
    buttonTitle=action.getName();
  }
 else   if (buttonTitle.equals("")) {
    buttonTitle="Ok";
  }
  HtmlFormBuilder.createForm(request,ActionAction.ACTION + ".app",hiddenFields,formFields,parameterObject.className,parameterObject.id,formTitle,action.getDescription(),action.getHelp(),buttonTitle,errors);
  request.popBlockContent();
}
