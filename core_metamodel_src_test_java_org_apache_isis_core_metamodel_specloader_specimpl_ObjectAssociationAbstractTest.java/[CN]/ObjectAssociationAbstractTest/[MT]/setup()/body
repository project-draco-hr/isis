{
  facetedMethod=FacetedMethod.createProperty(Customer.class,"firstName");
  objectAssociation=new ObjectAssociationAbstract(facetedMethod,FeatureType.PROPERTY,new TestProxySpecification("test"),new ObjectMemberContext(null,null,null,null)){
    @Override public ObjectAdapter get(    ObjectAdapter fromObject){
      return null;
    }
    @Override public boolean isEmpty(    ObjectAdapter adapter){
      return false;
    }
    @Override public ObjectAdapter[] getChoices(    ObjectAdapter object){
      return null;
    }
    @Override public ObjectAdapter getDefault(    ObjectAdapter adapter){
      return null;
    }
    @Override public void toDefault(    ObjectAdapter target){
    }
    @Override public UsabilityContext<?> createUsableInteractionContext(    AuthenticationSession session,    InteractionInvocationMethod invocationMethod,    ObjectAdapter target){
      return null;
    }
    @Override public VisibilityContext<?> createVisibleInteractionContext(    AuthenticationSession session,    InteractionInvocationMethod invocationMethod,    ObjectAdapter targetObjectAdapter){
      return null;
    }
    @Override public String debugData(){
      return null;
    }
    @Override public Instance getInstance(    ObjectAdapter adapter){
      return null;
    }
    @Override public boolean containsDoOpFacet(    Class<? extends Facet> facetType){
      return false;
    }
  }
;
}
