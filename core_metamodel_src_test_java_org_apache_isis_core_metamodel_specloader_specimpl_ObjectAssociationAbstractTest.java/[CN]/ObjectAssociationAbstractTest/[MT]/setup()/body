{
  facetedMethod=FacetedMethod.createForProperty(Customer.class,"firstName");
  objectAssociation=new ObjectAssociationAbstract(facetedMethod,FeatureType.PROPERTY,objectSpecification,new ObjectMemberDependencies(null,null,null,null,null)){
    @Override public ObjectAdapter get(    final ObjectAdapter fromObject,    final InteractionInitiatedBy interactionInitiatedBy){
      return null;
    }
    @Override public boolean isEmpty(    final ObjectAdapter adapter,    final InteractionInitiatedBy interactionInitiatedBy){
      return false;
    }
    @Override public ObjectAdapter[] getChoices(    final ObjectAdapter object,    final InteractionInitiatedBy interactionInitiatedBy){
      return null;
    }
    @Override public ObjectAdapter getDefault(    final ObjectAdapter adapter){
      return null;
    }
    @Override public void toDefault(    final ObjectAdapter target){
    }
    @Override public UsabilityContext<?> createUsableInteractionContext(    final ObjectAdapter target,    final InteractionInitiatedBy interactionInitiatedBy,    Where where){
      return null;
    }
    @Override public VisibilityContext<?> createVisibleInteractionContext(    final ObjectAdapter targetObjectAdapter,    final InteractionInitiatedBy interactionInitiatedBy,    Where where){
      return null;
    }
    @Override public String debugData(){
      return null;
    }
    @Override public Instance getInstance(    final ObjectAdapter adapter){
      return null;
    }
    @Override public boolean containsDoOpFacet(    final Class<? extends Facet> facetType){
      return false;
    }
    @Override public boolean hasAutoComplete(){
      return false;
    }
    @Override public ObjectAdapter[] getAutoComplete(    ObjectAdapter object,    String searchArg,    final InteractionInitiatedBy interactionInitiatedBy){
      return null;
    }
    @Override public int getAutoCompleteMinLength(){
      return 0;
    }
  }
;
}
