{
  final PersistentSpecifications classes=PersistentSpecifications.buildPersistentSpecifications(Boolean.TRUE);
  final Nof2HbmXml nof2HbmXml=new Nof2HbmXml();
  final Document biDirectionaldoc=nof2HbmXml.createDocument(classes.getPersistentClass(BiDirectional.class.getName()));
  assertEquals("-//Hibernate/Hibernate Mapping DTD 3.0//EN",biDirectionaldoc.getDocType().getPublicID());
  assertEquals("http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd",biDirectionaldoc.getDocType().getSystemID());
  final Element root=biDirectionaldoc.getRootElement();
  assertEquals("hibernate-mapping",root.getName());
  final List<?> rootElements=root.elements();
  assertEquals("root element count",1,rootElements.size());
  final Element classNode=(Element)rootElements.get(0);
  assertEquals("class",classNode.getName());
  assertEquals(BiDirectional.class.getName(),classNode.attribute("name").getData());
  assertEquals("BIDIRECTIONAL",classNode.attribute("table").getData());
  checkIdVersionInfo(classNode,"PKbidirectionalID","long",OidAccessor.class.getName());
  assertEquals("property element count",3,classNode.elements("property").size());
  assertEquals("one-to-one element count",1,classNode.elements("one-to-one").size());
  final Element oneToOne=classNode.element("one-to-one");
  assertEquals("oneToOne name","oneToOne",oneToOne.attribute("name").getData());
  assertEquals("oneToOne class",OneToOne.class.getName(),oneToOne.attribute("class").getData());
  assertEquals("oneToOne property-ref","one",oneToOne.attribute("property-ref").getData());
  assertEquals("bag element count",1,classNode.elements("bag").size());
  final Element bag=classNode.element("bag");
  assertEquals("bag name","manyToMany",bag.attribute("name").getData());
  assertEquals("bag table","BIDIRECTIONAL_MANYTOMANY",bag.attribute("table").getData());
  assertNull("bag inverse",bag.attribute("inverse"));
  assertEquals("key","FKbidirectional",bag.element("key").attribute("column").getData());
  final Element manyToMany=bag.element("many-to-many");
  assertEquals("many class",ManyToMany.class.getName(),manyToMany.attribute("class").getData());
  assertEquals("many column","FKmanytomany",manyToMany.attribute("column").getData());
  assertEquals("many-to-one element count",2,classNode.elements("many-to-one").size());
  final Element manyToOne=(Element)classNode.elements("many-to-one").get(0);
  assertEquals("manyToOne name","oneToMany",manyToOne.attribute("name").getData());
  assertEquals("manyToOne column","FKoneToMany",manyToOne.attribute("column").getData());
  assertEquals("manyToOne class",OneToMany.class.getName(),manyToOne.attribute("class").getData());
  final Element secondManyToOne=(Element)classNode.elements("many-to-one").get(1);
  assertEquals("secondManyToOne name","secondOneToMany",secondManyToOne.attribute("name").getData());
  assertEquals("secondManyToOne column","FKsecondOneToMany",secondManyToOne.attribute("column").getData());
  assertEquals("secondManyToOne class",OneToMany.class.getName(),secondManyToOne.attribute("class").getData());
}
