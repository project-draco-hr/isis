{
  sqlDataClass=factory.newDataClass();
  sqlDataClass.setString("Test String");
  sqlDataClass.setDate(Data.applibDate);
  sqlDataClass.setSqlDate(Data.sqlDate);
  sqlDataClass.setMoney(Data.money);
  sqlDataClass.setDateTime(Data.dateTime);
  sqlDataClass.setTimeStamp(Data.timeStamp);
  sqlDataClass.setTime(Data.time);
  sqlDataClass.setColor(Data.color);
  sqlDataClass.setImage(Data.image);
  sqlDataClass.setPassword(Data.password);
  sqlDataClass.setPercentage(Data.percentage);
  simpleClassTwoA=factory.newSimpleClassTwo();
  simpleClassTwoA.setText("A");
  simpleClassTwoA.setIntValue(999);
  simpleClassTwoA.setBooleanValue(true);
  simpleClassTwoB=factory.newSimpleClassTwo();
  simpleClassTwoB.setText("B");
  sqlDataClass.setSimpleClassTwo(simpleClassTwoA);
  pve2=factory.newPrimitiveValuedEntity();
  LOG.log(Level.INFO,"Bits to represent Double: " + Double.SIZE);
  pve2.setIntProperty(Data.intMinValue);
  pve2.setShortProperty(Data.shortMinValue);
  pve2.setLongProperty(Data.longMinValue);
  pve2.setDoubleProperty(Data.doubleMinValue);
  pve2.setFloatProperty(Data.floatMinValue);
  pve2.setCharProperty((char)(32));
  sqlDataClass.setPrimitiveValuedEntityMin(pve2);
  pve1=factory.newPrimitiveValuedEntity();
  pve1.setIntProperty(Data.intMaxValue);
  pve1.setShortProperty(Data.shortMaxValue);
  pve1.setLongProperty(Data.longMaxValue);
  pve1.setDoubleProperty(Data.doubleMaxValue);
  pve1.setFloatProperty(Data.floatMaxValue);
  pve1.setCharProperty((char)(255));
  sqlDataClass.setPrimitiveValuedEntityMax(pve1);
  boolean bMustAdd=false;
  if (simpleClassList1.size() == 0) {
    bMustAdd=true;
  }
  for (  final String string : Data.stringList1) {
    final SimpleClass simpleClass=factory.newSimpleClass();
    simpleClass.setString(string);
    simpleClass.setSimpleClassTwoA(simpleClassTwoA);
    sqlDataClass.addToSimpleClasses1(simpleClass);
    if (bMustAdd) {
      simpleClassList1.add(simpleClass);
    }
  }
  for (  final String string : Data.stringList2) {
    final SimpleClass simpleClass=factory.newSimpleClass();
    simpleClass.setString(string);
    simpleClass.setSimpleClassTwoA(simpleClassTwoB);
    sqlDataClass.addToSimpleClasses2(simpleClass);
    if (bMustAdd) {
      simpleClassList2.add(simpleClass);
    }
  }
  Image image=new Image(new int[][]{{1,2,3},{4,5,6},{7,8,9}});
  sqlDataClass.setImage(image);
  factory.save(sqlDataClass);
  setFixtureInitializationState(State.DONT_INITIALIZE,"in-memory");
}
