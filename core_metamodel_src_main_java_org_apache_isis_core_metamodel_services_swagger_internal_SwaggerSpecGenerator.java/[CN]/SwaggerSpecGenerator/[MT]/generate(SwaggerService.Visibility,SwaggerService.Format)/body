{
  final Swagger swagger=new Swagger();
  swagger.basePath("/restful");
  swagger.info(new Info().version("1.0.0").title("Restful Objects"));
  appendBoilerplate(swagger);
  appendLinkDefinitions(swagger);
  final Collection<ObjectSpecification> allSpecs=specificationLoader.allSpecifications();
  for (  final ObjectSpecification serviceSpec : allSpecs) {
    final DomainServiceFacet domainServiceFacet=serviceSpec.getFacet(DomainServiceFacet.class);
    if (domainServiceFacet == null) {
      continue;
    }
    if (visibility.isPublic() && domainServiceFacet.getNatureOfService() != NatureOfService.VIEW_REST_ONLY) {
      continue;
    }
    if (domainServiceFacet.getNatureOfService() != NatureOfService.VIEW_MENU_ONLY && domainServiceFacet.getNatureOfService() != NatureOfService.VIEW) {
      continue;
    }
    final List<ActionType> actionTypes=actionTypesFor(visibility);
    final List<ObjectAction> serviceActions=serviceSpec.getObjectActions(actionTypes,Contributed.EXCLUDED,Filters.<ObjectAction>any());
    if (serviceActions.isEmpty()) {
      continue;
    }
    final ObjectProperty serviceMembers=appendServicePath(swagger,serviceSpec);
    for (    final ObjectAction serviceAction : serviceActions) {
      if (visibility.isPublic() && !isVisibleForPublic(serviceAction)) {
        continue;
      }
      appendActionTo(serviceMembers,serviceAction);
      appendServiceActionInvokePath(swagger,serviceAction);
    }
  }
  for (  final ObjectSpecification objectSpec : allSpecs) {
    final DomainServiceFacet domainServiceFacet=objectSpec.getFacet(DomainServiceFacet.class);
    if (domainServiceFacet != null) {
      continue;
    }
    if (objectSpec.isAbstract()) {
      continue;
    }
    final List<ActionType> actionTypes=actionTypesFor(visibility);
    final List<ObjectAction> objectActions=objectSpec.getObjectActions(actionTypes,Contributed.INCLUDED,Filters.<ObjectAction>any());
    if (objectActions.isEmpty()) {
      continue;
    }
    final ObjectProperty objectMembers=appendObjectPath(swagger,objectSpec);
    for (    final ObjectAction objectAction : objectActions) {
      if (visibility.isPublic() && !isVisibleForPublic(objectAction)) {
        continue;
      }
      appendActionTo(objectMembers,objectAction);
      appendObjectActionInvokePath(swagger,objectAction);
    }
  }
switch (format) {
case JSON:
    return Json.pretty(swagger);
case YAML:
  try {
    return Yaml.pretty().writeValueAsString(swagger);
  }
 catch (  JsonProcessingException e) {
    throw new RuntimeException(e);
  }
default :
throw new IllegalArgumentException("Unrecognized format: " + format);
}
}
