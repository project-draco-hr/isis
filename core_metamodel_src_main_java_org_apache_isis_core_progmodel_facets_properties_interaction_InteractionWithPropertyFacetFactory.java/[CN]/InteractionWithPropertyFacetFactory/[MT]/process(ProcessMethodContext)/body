{
  final Method method=processMethodContext.getMethod();
  FacetedMethod holder=processMethodContext.getFacetHolder();
  final PropertyOrCollectionAccessorFacet getterFacet=holder.getFacet(PropertyOrCollectionAccessorFacet.class);
  if (getterFacet == null) {
    return;
  }
  final InteractionWithProperty interactionWithProperty=Annotations.getAnnotation(method,InteractionWithProperty.class);
  final PostsPropertyChangedEvent postsPropertyChangedEvent=Annotations.getAnnotation(method,PostsPropertyChangedEvent.class);
  final PropertySetterFacet setterFacet=holder.getFacet(PropertySetterFacet.class);
  if (setterFacet != null) {
    if (interactionWithProperty != null) {
      final Class<? extends PropertyInteractionEvent<?,?>> eventType=interactionWithProperty.value();
      FacetUtil.addFacet(new InteractionWithPropertyFacetSetterForAnnotation(eventType,getterFacet,setterFacet,servicesInjector,holder));
    }
 else     if (postsPropertyChangedEvent != null) {
      final Class<? extends PropertyChangedEvent<?,?>> eventType=postsPropertyChangedEvent.value();
      FacetUtil.addFacet(new InteractionWithPropertyFacetSetterForPostsPropertyChangedEventAnnotation(eventType,getterFacet,setterFacet,servicesInjector,holder));
    }
 else {
      final Class<? extends PropertyInteractionEvent<?,?>> eventType=PropertyInteractionEvent.Default.class;
      FacetUtil.addFacet(new InteractionWithPropertyFacetSetterDefault(eventType,getterFacet,setterFacet,servicesInjector,holder));
    }
  }
  final PropertyClearFacet clearFacet=holder.getFacet(PropertyClearFacet.class);
  if (clearFacet != null) {
    if (interactionWithProperty != null) {
      final Class<? extends PropertyInteractionEvent<?,?>> eventType=interactionWithProperty.value();
      FacetUtil.addFacet(new InteractionWithPropertyFacetClearForAnnotation(eventType,getterFacet,clearFacet,servicesInjector,holder));
    }
 else     if (postsPropertyChangedEvent != null) {
      final Class<? extends PropertyChangedEvent<?,?>> changedEventType=postsPropertyChangedEvent.value();
      FacetUtil.addFacet(new InteractionWithPropertyFacetClearForAnnotation(changedEventType,getterFacet,clearFacet,servicesInjector,holder));
    }
 else {
      final Class<? extends PropertyInteractionEvent<?,?>> eventType=PropertyInteractionEvent.Default.class;
      FacetUtil.addFacet(new InteractionWithPropertyFacetClearForAnnotation(eventType,getterFacet,clearFacet,servicesInjector,holder));
    }
  }
}
