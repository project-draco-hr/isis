{
  super(stream);
  PushbackInputStream pb;
  byte buf[];
  int len;
  pb=new PushbackInputStream(stream,MAXPUSHBACK);
  buf=new byte[4];
  len=pb.read(buf);
  if (len > 0)   pb.unread(buf,0,len);
  if (len == 4) switch (buf[0] & 0x0ff) {
case 0:
    if (buf[1] == 0x3c && buf[2] == 0x00 && buf[3] == 0x3f) {
      setEncoding(pb,"UnicodeBig");
      return;
    }
  break;
case '<':
switch (buf[1] & 0x0ff) {
default :
  break;
case 0x00:
if (buf[2] == 0x3f && buf[3] == 0x00) {
  setEncoding(pb,"UnicodeLittle");
  return;
}
break;
case '?':
if (buf[2] != 'x' || buf[3] != 'm') break;
useEncodingDecl(pb,"UTF8");
return;
}
break;
case 0x4c:
if (buf[1] == 0x6f && (0x0ff & buf[2]) == 0x0a7 && (0x0ff & buf[3]) == 0x094) {
useEncodingDecl(pb,"CP037");
return;
}
break;
case 0xfe:
if ((buf[1] & 0x0ff) != 0xff) break;
setEncoding(pb,"UTF-16");
return;
case 0xff:
if ((buf[1] & 0x0ff) != 0xfe) break;
setEncoding(pb,"UTF-16");
return;
default :
break;
}
setEncoding(pb,"UTF-8");
}
