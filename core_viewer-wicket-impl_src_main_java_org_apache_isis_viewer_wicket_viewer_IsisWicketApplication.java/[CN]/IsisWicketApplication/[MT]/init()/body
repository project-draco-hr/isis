{
  try {
    super.init();
    configureWebJars();
    configureWicketBootstrap();
    configureWicketSelect2();
    String isisConfigDir=getServletContext().getInitParameter("isis.config.dir");
    configureLogging(isisConfigDir);
    getRequestCycleSettings().setRenderStrategy(RenderStrategy.REDIRECT_TO_RENDER);
    getResourceSettings().setParentFolderPlaceholder("$up$");
    final IsisConfigurationBuilder isisConfigurationBuilder=obtainConfigBuilder();
    isisConfigurationBuilder.addDefaultConfigurationResources();
    final IsisConfigurationDefault configuration=isisConfigurationBuilder.getConfiguration();
    DeploymentTypeWicketAbstract deploymentType=determineDeploymentType(configuration.getString("isis.deploymentType"));
    RequestCycleListenerCollection requestCycleListeners=getRequestCycleListeners();
    IRequestCycleListener requestCycleListenerForIsis=newWebRequestCycleForIsis();
    requestCycleListeners.add(requestCycleListenerForIsis);
    requestCycleListeners.add(new PageRequestHandlerTracker());
    final DeploymentCategory deploymentCategory=deploymentType.getDeploymentCategory();
    final IsisInjectModule isisModule=newIsisModule(deploymentCategory,configuration);
    final Injector injector=Guice.createInjector(isisModule,newIsisWicketModule());
    initWicketComponentInjection(injector);
    injector.injectMembers(this);
    getServletContext().setAttribute(WebAppConstants.ISIS_SESSION_FACTORY,this.isisSessionFactory);
    if (requestCycleListenerForIsis instanceof WebRequestCycleForIsis) {
      WebRequestCycleForIsis webRequestCycleForIsis=(WebRequestCycleForIsis)requestCycleListenerForIsis;
      webRequestCycleForIsis.setPageClassRegistry(pageClassRegistry);
    }
    this.getMarkupSettings().setStripWicketTags(determineStripWicketTags(configuration));
    configureSecurity(configuration);
    getDebugSettings().setAjaxDebugModeEnabled(determineAjaxDebugModeEnabled(configuration));
    buildCssBundle();
    filterJavascriptContributions();
    configureWicketSourcePluginIfNecessary();
    int maxEntries=1000;
    setMetaData(AccountConfirmationMap.KEY,new AccountConfirmationMap(maxEntries,Duration.days(1)));
    mountPages();
    @SuppressWarnings("unused") SharedResources sharedResources=getSharedResources();
    final MetaModelInvalidException mmie=IsisContext.getMetaModelInvalidExceptionIfAny();
    if (mmie != null) {
      this.validationErrors.addAll(mmie.getValidationErrors());
      log(this.validationErrors);
    }
  }
 catch (  RuntimeException ex) {
    LOG.error("Failed to initialize",ex);
    throw ex;
  }
}
