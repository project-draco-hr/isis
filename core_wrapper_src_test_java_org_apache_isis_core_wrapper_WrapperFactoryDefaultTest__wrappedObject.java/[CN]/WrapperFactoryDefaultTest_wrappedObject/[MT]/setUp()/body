{
  employeeRepository=new EmployeeRepositoryImpl();
  employeeDO=new Employee();
  employeeDO.setName("Smith");
  employeeDO.setEmployeeRepository(employeeRepository);
  context.checking(new Expectations(){
{
      allowing(mockEmployeeAdapter).getOid();
      will(returnValue(RootOid.create(ObjectSpecId.of("EMP"),"1")));
      allowing(mockEmployeeSpec).getCorrespondingClass();
      will(returnValue(Employee.class));
      allowing(mockStringSpec).getCorrespondingClass();
      will(returnValue(String.class));
      allowing(mockServicesInjector).lookupService(CommandContext.class);
      will(returnValue(mockCommandContext));
      allowing(mockCommandContext).getCommand();
      will(returnValue(mockCommand));
      allowing(mockServicesInjector).lookupService(CommandDtoServiceInternal.class);
      will(returnValue(new CommandDtoServiceInternalDefault()));
      allowing(mockServicesInjector).lookupService(AuthenticationSessionProvider.class);
      will(returnValue(mockAuthenticationSessionProvider));
      allowing(mockDeploymentCategoryProvider).getDeploymentCategory();
      will(returnValue(DeploymentCategory.PRODUCTION));
      allowing(mockServicesInjector).getSpecificationLoader();
      will(returnValue(mockSpecificationLoader));
      allowing(mockSpecificationLoader).loadSpecification(String.class);
      will(returnValue(mockStringSpec));
      allowing(mockStringSpec).getShortIdentifier();
      will(returnValue(String.class.getName()));
      allowing(mockDeploymentCategoryProvider).getDeploymentCategory();
      will(returnValue(DeploymentCategory.PRODUCTION));
      allowing(mockAuthenticationSessionProvider).getAuthenticationSession();
      will(returnValue(session));
      allowing(mockAdapterManager).getAdapterFor(employeeDO);
      will(returnValue(mockEmployeeAdapter));
      allowing(mockAdapterManager).adapterFor(employeeDO);
      will(returnValue(mockEmployeeAdapter));
      allowing(mockEmployeeAdapter).getSpecification();
      will(returnValue(mockEmployeeSpec));
      allowing(mockSpecificationLoader).loadSpecification(Employee.class);
      will(returnValue(mockEmployeeSpec));
      allowing(mockEmployeeSpec).getMember(methodOf(Employee.class,"getEmployeeRepository"));
      will(returnValue(null));
    }
  }
);
  wrapperFactory=createWrapperFactory();
  wrapperFactory.persistenceSessionServiceInternal=mockPersistenceSessionServiceInternal;
  wrapperFactory.specificationLoader=mockSpecificationLoader;
  wrapperFactory.authenticationSessionProvider=mockAuthenticationSessionProvider;
  final Method employeeGetNameMethod=methodOf(Employee.class,"getName");
  final Method employeeSetNameMethod=methodOf(Employee.class,"setName",String.class);
  final Method employeeModifyNameMethod=methodOf(Employee.class,"modifyName",String.class);
  final Method employeeHideNameMethod=methodOf(Employee.class,"hideName");
  final Method employeeDisableNameMethod=methodOf(Employee.class,"disableName");
  final Method employeeValidateNameMethod=methodOf(Employee.class,"validateName",String.class);
  final Method employeeClearNameMethod=methodOf(Employee.class,"clearName");
  employeeNameMember=new OneToOneAssociationDefault(facetedMethodForProperty(employeeSetNameMethod,employeeGetNameMethod,employeeModifyNameMethod,employeeClearNameMethod,employeeHideNameMethod,employeeDisableNameMethod,employeeValidateNameMethod),mockServicesInjector);
  context.checking(new Expectations(){
{
      allowing(mockEmployeeSpec).getMember(employeeGetNameMethod);
      will(returnValue(employeeNameMember));
      allowing(mockEmployeeSpec).getMember(employeeSetNameMethod);
      will(returnValue(employeeNameMember));
      allowing(mockEmployeeSpec).getMember(employeeModifyNameMethod);
      will(returnValue(employeeNameMember));
      allowing(mockEmployeeSpec).getMember(employeeClearNameMethod);
      will(returnValue(employeeNameMember));
      allowing(mockEmployeeAdapter).getObject();
      will(returnValue(employeeDO));
      allowing(mockEmployeeAdapter).representsPersistent();
      will(returnValue(true));
    }
  }
);
  employeeWO=wrapperFactory.wrap(employeeDO);
}
