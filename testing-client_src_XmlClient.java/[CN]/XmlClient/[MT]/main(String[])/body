{
  BasicConfigurator.configure();
  NakedObjectsClient nakedObjects=new NakedObjectsClient();
  Configuration configuration=new Configuration(new ConfigurationPropertiesLoader(DEFAULT_CONFIG,true));
  if (configuration.getString(SHOW_EXPLORATION_OPTIONS) == null) {
    configuration.add(SHOW_EXPLORATION_OPTIONS,"yes");
  }
  PropertyConfigurator.configure(configuration.getProperties("log4j"));
  nakedObjects.setConfiguration(configuration);
  Logger log=Logger.getLogger("Naked Objects");
  log.info(AboutNakedObjects.getName());
  log.info(AboutNakedObjects.getVersion());
  log.info(AboutNakedObjects.getBuildId());
  SplashWindow splash=null;
  boolean noSplash=configuration.getBoolean("nosplash",false);
  if (!noSplash) {
    splash=new SplashWindow();
  }
  try {
    Date.setClock(new SystemClock());
    org.nakedobjects.distribution.xml.XmlClient conn=new org.nakedobjects.distribution.xml.XmlClient();
    DistributionLogger connection=new DistributionLogger(conn,"client.log");
    JavaBusinessObjectContainer container=new JavaBusinessObjectContainer();
    JavaObjectFactory objectFactory=new JavaObjectFactory();
    objectFactory.setContainer(container);
    JavaObjectDataFactory objectDataFactory=new JavaObjectDataFactory();
    ProxyObjectManager proxyObjectManager=new ProxyObjectManager();
    proxyObjectManager.setConnection(connection);
    proxyObjectManager.setObjectDataFactory(objectDataFactory);
    NakedObjectManager objectManager=new ObjectManagerLogger(proxyObjectManager,"manager.log");
    nakedObjects.setObjectManager(objectManager);
    ProxyReflectionFactory reflectionFactory=new ProxyReflectionFactory();
    reflectionFactory.setConnection(connection);
    reflectionFactory.setObjectDataFactory(objectDataFactory);
    ObjectLoaderImpl objectLoader=new ObjectLoaderImpl();
    objectLoader.setPojoAdapterMap(new PojoAdapterHashMap());
    objectLoader.setAdapterFactory(new JavaAdapterFactory());
    objectLoader.setObjectFactory(objectFactory);
    objectLoader.setIdentityAdapterMap(new IdentityAdapterHashMap());
    nakedObjects.setObjectLoader(objectLoader);
    nakedObjects.setReflectionFactory(reflectionFactory);
    nakedObjects.setSpecificationLoader(new JavaSpecificationLoader());
    ViewUpdateNotifier updateNotifier=new ViewUpdateNotifier();
    proxyObjectManager.setUpdateNotifier(updateNotifier);
    nakedObjects.init();
    SkylarkViewer skylark=new SkylarkViewer();
    skylark.setUpdateNotifier(updateNotifier);
    skylark.setShutdownListener(new ObjectViewingMechanismListener(){
      public void viewerClosing(){
        System.exit(0);
      }
    }
);
    skylark.setApplication(new Context());
    skylark.setExploration(true);
    skylark.init();
  }
  finally {
    if (splash != null) {
      splash.toFront();
      splash.removeAfterDelay(3);
    }
  }
}
