{
  final CollectionClearFacetFactory facetFactory=new CollectionClearFacetFactory();
  facetFactory.setSpecificationLookup(reflector);
@SuppressWarnings({"hiding","unused"}) class Order {
  }
class Customer {
    @SuppressWarnings({"rawtypes","unused"}) public Collection getOrders(){
      return null;
    }
    @SuppressWarnings("unused") public void clearOrders(){
    }
  }
  final Method collectionAccessorMethod=findMethod(Customer.class,"getOrders");
  final Method clearMethod=findMethod(Customer.class,"clearOrders");
  facetFactory.process(new ProcessMethodContext(Customer.class,collectionAccessorMethod,methodRemover,facetedMethod));
  final Facet facet=facetedMethod.getFacet(CollectionClearFacet.class);
  assertNotNull(facet);
  assertTrue(facet instanceof CollectionClearFacetViaMethod);
  final CollectionClearFacetViaMethod collectionClearFacetViaMethod=(CollectionClearFacetViaMethod)facet;
  assertEquals(clearMethod,collectionClearFacetViaMethod.getMethods().get(0));
  assertTrue(methodRemover.getRemovedMethodMethodCalls().contains(clearMethod));
}
