{
  final Vector<ObjectAdapter> instances=new Vector<ObjectAdapter>();
  final StringBuffer sql=createSelectStatement();
  int initialLength=0;
  int foundFields=0;
  final ObjectAdapter pattern=query.getPattern();
  final Object o=pattern.getObject();
  final ObjectSpecification patternSpec=pattern.getSpecification();
  final List<ObjectAssociation> patternAssociations=patternSpec.getAssociations();
  for (  ObjectAssociation patternAssoc : patternAssociations) {
    final Method method;
    final Identifier identifier=patternAssoc.getIdentifier();
    final String memberName=identifier.getMemberName();
    final String methodName=memberName.substring(0,1).toUpperCase() + memberName.substring(1);
    try {
      method=o.getClass().getMethod("get" + methodName,(Class<?>[])null);
      final Object res=InvokeUtils.invoke(method,o);
      if (res != null) {
        if (foundFields == 0) {
          sql.append(" WHERE ");
          initialLength=sql.length();
        }
        if (sql.length() > initialLength) {
          sql.append(" AND ");
        }
        final ObjectSpecification specification=patternAssoc.getSpecification();
        if (specification.isValue()) {
          final String fieldName=Sql.sqlFieldName(identifier.getMemberName());
          sql.append(fieldName + "=?");
          connector.addToQueryValues(res);
          foundFields++;
        }
 else {
          FieldMapping fieldMapping=fieldMappingLookup.get(patternAssoc);
          fieldMapping.appendColumnNames(sql);
          sql.append("=?");
          final ObjectAdapter restoredValue=adapterManager.adapterFor(res);
          Oid oid=restoredValue.getOid();
          Object oidObject=idMapping.primaryKeyAsObject(oid);
          connector.addToQueryValues(oidObject);
          foundFields++;
        }
      }
    }
 catch (    SecurityException e) {
      LOG.debug(e.getMessage());
    }
catch (    NoSuchMethodException e) {
      LOG.info("Unable to invode method: get" + methodName + " in getInstances");
      LOG.debug(e.getMessage());
    }
  }
  loadInstancesToVector(connector,spec,completeSelectStatement(sql),instances);
  return instances;
}
