{
  PropertyAccessorFacetFactory facetFactory=new PropertyAccessorFacetFactory();
  facetFactory.setSpecificationLookup(reflector);
  HiddenFacetViaHideMethodFacetFactory facetFactoryForHide=new HiddenFacetViaHideMethodFacetFactory();
  facetFactoryForHide.setSpecificationLookup(reflector);
  DisabledFacetViaDisableMethodFacetFactory facetFactoryForDisable=new DisabledFacetViaDisableMethodFacetFactory();
  facetFactoryForDisable.setSpecificationLookup(reflector);
@edu.umd.cs.findbugs.annotations.SuppressWarnings("UMAC_UNCALLABLE_METHOD_OF_ANONYMOUS_CLASS") class Customer {
    @SuppressWarnings("unused") public String getFirstName(){
      return null;
    }
  }
class CustomerEx extends Customer {
    @SuppressWarnings("unused") @edu.umd.cs.findbugs.annotations.SuppressWarnings("UMAC_UNCALLABLE_METHOD_OF_ANONYMOUS_CLASS") public boolean hideFirstName(){
      return true;
    }
    @SuppressWarnings("unused") @edu.umd.cs.findbugs.annotations.SuppressWarnings("UMAC_UNCALLABLE_METHOD_OF_ANONYMOUS_CLASS") public String disableFirstName(){
      return "disabled";
    }
  }
  final Method propertyAccessorMethod=findMethod(Customer.class,"getFirstName");
  final Method propertyHideMethod=findMethod(CustomerEx.class,"hideFirstName");
  final Method propertyDisableMethod=findMethod(CustomerEx.class,"disableFirstName");
  final ProcessMethodContext processMethodContext=new ProcessMethodContext(CustomerEx.class,propertyAccessorMethod,methodRemover,facetedMethod);
  facetFactory.process(processMethodContext);
  facetFactoryForHide.process(processMethodContext);
  facetFactoryForDisable.process(processMethodContext);
  final Facet facet=facetedMethod.getFacet(HideForContextFacet.class);
  assertNotNull(facet);
  assertTrue(facet instanceof HideForContextFacetViaMethod);
  final HideForContextFacetViaMethod hideForContextFacet=(HideForContextFacetViaMethod)facet;
  assertEquals(propertyHideMethod,hideForContextFacet.getMethods().get(0));
  final Facet facet2=facetedMethod.getFacet(DisableForContextFacet.class);
  assertNotNull(facet2);
  assertTrue(facet2 instanceof DisableForContextFacetViaMethod);
  final DisableForContextFacetViaMethod disableForContextFacet=(DisableForContextFacetViaMethod)facet2;
  assertEquals(propertyDisableMethod,disableForContextFacet.getMethods().get(0));
}
