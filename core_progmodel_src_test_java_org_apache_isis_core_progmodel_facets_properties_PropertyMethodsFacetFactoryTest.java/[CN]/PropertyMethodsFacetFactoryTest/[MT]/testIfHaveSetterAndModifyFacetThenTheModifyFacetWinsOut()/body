{
  PropertySetAndClearFacetFactory facetFactory=new PropertySetAndClearFacetFactory();
  facetFactory.setSpecificationLookup(reflector);
  PropertyModifyFacetFactory facetFactoryForModify=new PropertyModifyFacetFactory();
  facetFactoryForModify.setSpecificationLookup(reflector);
@edu.umd.cs.findbugs.annotations.SuppressWarnings("UMAC_UNCALLABLE_METHOD_OF_ANONYMOUS_CLASS") class Customer {
    @SuppressWarnings("unused") public String getFirstName(){
      return null;
    }
    @SuppressWarnings("unused") public void setFirstName(    final String firstName){
    }
    @SuppressWarnings("unused") public void modifyFirstName(    final String firstName){
    }
  }
  final Method propertyAccessorMethod=findMethod(Customer.class,"getFirstName");
  final Method propertySetterMethod=findMethod(Customer.class,"setFirstName",new Class[]{String.class});
  final Method propertyModifyMethod=findMethod(Customer.class,"modifyFirstName",new Class[]{String.class});
  final ProcessMethodContext processMethodContext=new ProcessMethodContext(Customer.class,propertyAccessorMethod,methodRemover,facetedMethod);
  facetFactory.process(processMethodContext);
  facetFactoryForModify.process(processMethodContext);
  final Facet facet=facetedMethod.getFacet(PropertySetterFacet.class);
  assertNotNull(facet);
  assertTrue(facet instanceof PropertySetterFacetViaModifyMethod);
  final PropertySetterFacetViaModifyMethod propertySetterFacet=(PropertySetterFacetViaModifyMethod)facet;
  assertEquals(propertyModifyMethod,propertySetterFacet.getMethods().get(0));
  assertTrue(methodRemover.getRemoveMethodMethodCalls().contains(propertySetterMethod));
  assertTrue(methodRemover.getRemoveMethodMethodCalls().contains(propertyModifyMethod));
}
