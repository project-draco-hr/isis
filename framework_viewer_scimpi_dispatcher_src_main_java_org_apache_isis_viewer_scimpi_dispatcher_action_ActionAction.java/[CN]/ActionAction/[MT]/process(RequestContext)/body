{
  final String objectId=context.getParameter("_" + OBJECT);
  final String version=context.getParameter("_" + VERSION);
  final String formId=context.getParameter("_" + FORM_ID);
  final String methodName=context.getParameter("_" + METHOD);
  final String override=context.getParameter("_" + RESULT_OVERRIDE);
  String resultName=context.getParameter("_" + RESULT_NAME);
  final String message=context.getParameter("_" + MESSAGE);
  resultName=resultName == null ? RequestContext.RESULT : resultName;
  FormState entryState=null;
  try {
    final ObjectAdapter object=MethodsUtils.findObject(context,objectId);
    final ObjectAction action=MethodsUtils.findAction(object,methodName);
    entryState=validateParameters(context,action,object);
    final AuthenticationSession session=context.getSession();
    if (session == null && action.isUsable(new AnonymousSession(),object).isVetoed()) {
      throw new NotLoggedInException();
    }
    object.checkLock(context.getVersion(version));
    if (entryState.isValid()) {
      final boolean hasResult=invokeMethod(context,resultName,object,action,entryState);
      String view=context.getParameter(hasResult ? "_" + VIEW : "_" + VOID);
      final int questionMark=view == null ? -1 : view.indexOf("?");
      if (questionMark > -1) {
        final String params[]=view.substring(questionMark + 1).split("&");
        for (        final String param : params) {
          final int equals=param.indexOf("=");
          context.addVariable(param.substring(0,equals),param.substring(equals + 1),Scope.REQUEST);
          view=view.substring(0,questionMark);
        }
      }
      context.setRequestPath(view);
      if (message != null) {
        final MessageBroker messageBroker=IsisContext.getMessageBroker();
        messageBroker.addMessage(message);
      }
      if (override != null) {
        context.addVariable(resultName,override,Scope.REQUEST);
      }
      if (context.getVariable(resultName) == null) {
        context.addVariable(resultName,objectId,Scope.REQUEST);
      }
    }
 else {
      entryState.setForm(formId);
      context.addVariable(ENTRY_FIELDS,entryState,Scope.REQUEST);
      context.addVariable(resultName,objectId,Scope.REQUEST);
      if (override != null) {
        context.addVariable(resultName,override,Scope.REQUEST);
      }
      final String error=entryState.getError();
      final String view=context.getParameter("_" + ERRORS);
      context.setRequestPath(view,Dispatcher.ACTION);
      final MessageBroker messageBroker=IsisContext.getMessageBroker();
      messageBroker.addWarning(error);
    }
  }
 catch (  final ConcurrencyException e) {
    IsisContext.getMessageBroker().addMessage(e.getMessage());
    entryState.setForm(formId);
    context.addVariable(ENTRY_FIELDS,entryState,Scope.REQUEST);
    context.addVariable(resultName,objectId,Scope.REQUEST);
    if (override != null) {
      context.addVariable(resultName,override,Scope.REQUEST);
    }
    final String error=entryState.getError();
    if (error != null) {
      context.addVariable(RequestContext.ERROR,error,Scope.REQUEST);
    }
    final String view=context.getParameter("_" + ERRORS);
    context.setRequestPath(view,Dispatcher.ACTION);
  }
catch (  final RuntimeException e) {
    IsisContext.getMessageBroker().getMessages();
    IsisContext.getMessageBroker().getWarnings();
    IsisContext.getUpdateNotifier().clear();
    IsisContext.getUpdateNotifier().clear();
    throw e;
  }
}
