{
  if (LOG.isDebugEnabled()) {
    LOG.debug("objectToElement(" + log("object",adapter) + ")");
  }
  final ObjectSpecification nos=adapter.getSpecification();
  if (LOG.isDebugEnabled()) {
    LOG.debug("objectToElement(NO): create element and isis:title");
  }
  final Element element=schema.createElement(getXmlDocument(),nos.getShortIdentifier(),nos.getFullIdentifier(),nos.getSingularName(),nos.getPluralName());
  isisMetaModel.appendIsisTitle(element,adapter.titleString());
  if (LOG.isDebugEnabled()) {
    LOG.debug("objectToElement(NO): create XS element for Isis class");
  }
  final Element xsElement=schema.createXsElementForNofClass(getXsdDocument(),element,topLevelElementWritten,FacetUtil.getFacetsByType(nos));
  topLevelElementWritten=true;
  final Place place=new Place(adapter,element);
  isisMetaModel.setAttributesForClass(element,oidAsString(adapter).toString());
  final List<ObjectAssociation> fields=nos.getAssociations(Contributed.EXCLUDED);
  if (LOG.isDebugEnabled()) {
    LOG.debug("objectToElement(NO): processing fields");
  }
  eachField:   for (int i=0; i < fields.size(); i++) {
    final ObjectAssociation field=fields.get(i);
    final String fieldName=field.getId();
    if (LOG.isDebugEnabled()) {
      LOG.debug("objectToElement(NO): " + log("field",fieldName));
    }
    for (int j=0; j < i; j++) {
      if (fieldName.equals(fields.get(i).getName())) {
        LOG.debug("objectToElement(NO): " + log("field",fieldName) + " SKIPPED");
        continue eachField;
      }
    }
    Element xmlFieldElement=getXmlDocument().createElementNS(schema.getUri(),schema.getPrefix() + ":" + fieldName);
    Element xsdFieldElement=null;
    if (field.getSpecification().containsFacet(ValueFacet.class)) {
      if (LOG.isDebugEnabled()) {
        LOG.debug("objectToElement(NO): " + log("field",fieldName) + " is value");
      }
      final ObjectSpecification fieldNos=field.getSpecification();
      if (fieldNos == null) {
        continue eachField;
      }
      if (fieldNos.getFullIdentifier() != null && fieldNos.getFullIdentifier().endsWith("XmlValue")) {
        continue eachField;
      }
      final OneToOneAssociation valueAssociation=((OneToOneAssociation)field);
      final Element xmlValueElement=xmlFieldElement;
      ObjectAdapter value;
      try {
        value=valueAssociation.get(adapter);
        final ObjectSpecification valueNos=value.getSpecification();
        isisMetaModel.setAttributesForValue(xmlValueElement,valueNos.getShortIdentifier());
        String valueStr;
        final ParseableFacet parseableFacet=fieldNos.getFacet(ParseableFacet.class);
        final EncodableFacet encodeableFacet=fieldNos.getFacet(EncodableFacet.class);
        if (parseableFacet != null) {
          valueStr=parseableFacet.parseableTitle(value);
        }
 else         if (encodeableFacet != null) {
          valueStr=encodeableFacet.toEncodedString(value);
        }
 else {
          valueStr=value.titleString();
        }
        final boolean notEmpty=(valueStr.length() > 0);
        if (notEmpty) {
          xmlValueElement.appendChild(getXmlDocument().createTextNode(valueStr));
        }
 else {
          isisMetaModel.setIsEmptyAttribute(xmlValueElement,true);
        }
      }
 catch (      final Exception ex) {
        LOG.warn("objectToElement(NO): " + log("field",fieldName) + ": getField() threw exception - skipping XML generation");
      }
      xsdFieldElement=schema.createXsElementForNofValue(xsElement,xmlValueElement,FacetUtil.getFacetsByType(valueAssociation));
    }
 else     if (field instanceof OneToOneAssociation) {
      if (LOG.isDebugEnabled()) {
        LOG.debug("objectToElement(NO): " + log("field",fieldName) + " is OneToOneAssociation");
      }
      final OneToOneAssociation oneToOneAssociation=((OneToOneAssociation)field);
      final String fullyQualifiedClassName=nos.getFullIdentifier();
      final Element xmlReferenceElement=xmlFieldElement;
      ObjectAdapter referencedObjectAdapter;
      try {
        referencedObjectAdapter=oneToOneAssociation.get(adapter);
        isisMetaModel.setAttributesForReference(xmlReferenceElement,schema.getPrefix(),fullyQualifiedClassName);
        if (referencedObjectAdapter != null) {
          isisMetaModel.appendIsisTitle(xmlReferenceElement,referencedObjectAdapter.titleString());
        }
 else {
          isisMetaModel.setIsEmptyAttribute(xmlReferenceElement,true);
        }
      }
 catch (      final Exception ex) {
        LOG.warn("objectToElement(NO): " + log("field",fieldName) + ": getAssociation() threw exception - skipping XML generation");
      }
      xsdFieldElement=schema.createXsElementForNofReference(xsElement,xmlReferenceElement,oneToOneAssociation.getSpecification().getFullIdentifier(),FacetUtil.getFacetsByType(oneToOneAssociation));
    }
 else     if (field instanceof OneToManyAssociation) {
      if (LOG.isDebugEnabled()) {
        LOG.debug("objectToElement(NO): " + log("field",fieldName) + " is OneToManyAssociation");
      }
      final OneToManyAssociation oneToManyAssociation=(OneToManyAssociation)field;
      final Element xmlCollectionElement=xmlFieldElement;
      ObjectAdapter collection;
      try {
        collection=oneToManyAssociation.get(adapter);
        final ObjectSpecification referencedTypeNos=oneToManyAssociation.getSpecification();
        final String fullyQualifiedClassName=referencedTypeNos.getFullIdentifier();
        isisMetaModel.setIsisCollection(xmlCollectionElement,schema.getPrefix(),fullyQualifiedClassName,collection);
      }
 catch (      final Exception ex) {
        LOG.warn("objectToElement(NO): " + log("field",fieldName) + ": get(obj) threw exception - skipping XML generation");
      }
      xsdFieldElement=schema.createXsElementForNofCollection(xsElement,xmlCollectionElement,oneToManyAssociation.getSpecification().getFullIdentifier(),FacetUtil.getFacetsByType(oneToManyAssociation));
    }
 else {
      if (LOG.isInfoEnabled()) {
        LOG.info("objectToElement(NO): " + log("field",fieldName) + " is unknown type; ignored");
      }
      continue;
    }
    if (xsdFieldElement != null) {
      Place.setXsdElement(xmlFieldElement,xsdFieldElement);
    }
    if (LOG.isDebugEnabled()) {
      LOG.debug("objectToElement(NO): invoking mergeTree for field");
    }
    xmlFieldElement=mergeTree(element,xmlFieldElement);
    if (xsdFieldElement != null) {
      if (LOG.isDebugEnabled()) {
        LOG.debug("objectToElement(NO): adding XS element for field to schema");
      }
      schema.addFieldXsElement(xsElement,xsdFieldElement);
    }
  }
  return place;
}
