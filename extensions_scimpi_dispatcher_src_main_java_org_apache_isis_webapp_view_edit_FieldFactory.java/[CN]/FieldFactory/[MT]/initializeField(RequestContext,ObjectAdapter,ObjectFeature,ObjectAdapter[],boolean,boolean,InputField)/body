{
  field.setLabel(param.getName());
  field.setDescription(param.getDescription());
  field.setRequired(!isOptional);
  field.setHidden(false);
  if (param.getSpecification().getFacet(ParseableFacet.class) != null) {
    final int maxLength=param.getFacet(MaxLengthFacet.class).value();
    field.setMaxLength(maxLength);
    TypicalLengthFacet typicalLengthFacet=param.getFacet(TypicalLengthFacet.class);
    if (typicalLengthFacet.isDerived() && maxLength > 0) {
      field.setWidth(maxLength);
    }
 else {
      field.setWidth(typicalLengthFacet.value());
    }
    MultiLineFacet multiLineFacet=param.getFacet(MultiLineFacet.class);
    field.setHeight(multiLineFacet.numberOfLines());
    field.setWrapped(!multiLineFacet.preventWrapping());
    ObjectSpecification spec=param.getSpecification();
    if (spec.isOfType(IsisContext.getSpecificationLoader().loadSpecification(boolean.class)) || spec.isOfType(IsisContext.getSpecificationLoader().loadSpecification(Boolean.class.getName()))) {
      field.setType(InputField.CHECKBOX);
    }
 else     if (spec.getFullName().endsWith(".Password")) {
      field.setType(InputField.PASSWORD);
    }
 else {
      field.setType(InputField.TEXT);
    }
  }
 else {
    field.setType(InputField.REFERENCE);
  }
  if (optionsForParameter != null) {
    int noOptions=optionsForParameter.length;
    String[] optionValues=new String[noOptions];
    String[] optionTitles=new String[noOptions];
    for (int j=0; j < noOptions; j++) {
      optionValues[j]=getValue(context,optionsForParameter[j]);
      optionTitles[j]=optionsForParameter[j].titleString();
    }
    field.setOptions(optionTitles,optionValues);
  }
}
