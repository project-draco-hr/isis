{
  final ObjectAdapter adapter=adapterMemento.getObjectAdapter(ConcurrencyChecking.NO_CHECK);
  final AbstractLink link=createLink(adapterMemento,action,linkId,adapter);
  final String label=ObjectAction.Utils.nameFor(action);
  final AuthenticationSession session=getAuthenticationSession();
  final Consent visibility=action.isVisible(session,adapter,Where.OBJECT_FORMS);
  if (visibility.isVetoed()) {
    return null;
  }
  final Consent usability=action.isUsable(session,adapter,Where.OBJECT_FORMS);
  final String disabledReasonIfAny=usability.getReason();
  if (disabledReasonIfAny != null) {
    link.setEnabled(false);
  }
  Util.addTargetBlankIfActionReturnsUrl(link,action);
  final boolean blobOrClob=CssMenuItem.returnsBlobOrClob(action);
  final boolean prototype=CssMenuItem.isExplorationOrPrototype(action);
  final String actionIdentifier=CssMenuItem.actionIdentifierFor(action);
  final String cssClass=CssMenuItem.cssClassFor(action);
  return new LinkAndLabel(link,label,disabledReasonIfAny,blobOrClob,prototype,actionIdentifier,cssClass);
}
