{
  final NakedObject object=getObject();
  ObjectOption.menuOptions(object,options);
  if (getObject() == null) {
    ClassOption.menuOptions(getSpecification(),options);
  }
  options.add(MenuOptionSet.EXPLORATION,new MenuOption("Instances"){
    public Consent disabled(    View component){
      return AbstractConsent.allow(object != null);
    }
    public void execute(    Workspace workspace,    View view,    Location at){
      NakedObjectSpecification spec=getObject().getSpecification();
      TypedNakedCollection instances=NakedObjects.getObjectPersistor().allInstances(spec,false);
      Content content=Skylark.getContentFactory().createRootContent(instances);
      View cloneView=Skylark.getViewFactory().createWindow(content);
      cloneView.setLocation(at);
      workspace.addView(cloneView);
    }
  }
);
  options.add(MenuOptionSet.EXPLORATION,new MenuOption("Class"){
    public Consent disabled(    View component){
      return AbstractConsent.allow(object != null);
    }
    public void execute(    Workspace workspace,    View view,    Location at){
    }
  }
);
  options.add(MenuOptionSet.EXPLORATION,new MenuOption("Clone"){
    public Consent disabled(    View component){
      return AbstractConsent.allow(object != null);
    }
    public void execute(    Workspace workspace,    View view,    Location at){
      NakedObject original=getObject();
      NakedObjectSpecification spec=original.getSpecification();
      NakedObject clone=NakedObjects.getObjectPersistor().createTransientInstance(spec);
      NakedObjectField[] fields=spec.getFields();
      for (int i=0; i < fields.length; i++) {
        Naked fld=original.getField(fields[i]);
        if (fields[i].isObject()) {
          clone.setAssociation(fields[i],(NakedObject)fld);
        }
 else         if (fields[i].isValue()) {
          clone.setValue((OneToOneAssociation)fields[i],fld.getObject());
        }
 else         if (fields[i].isCollection()) {
        }
      }
      Content content=Skylark.getContentFactory().createRootContent(clone);
      View cloneView=Skylark.getViewFactory().createWindow(content);
      cloneView.setLocation(at);
      workspace.addView(cloneView);
    }
  }
);
  options.add(MenuOptionSet.DEBUG,new MenuOption("Clear resolved"){
    public Consent disabled(    View component){
      return AbstractConsent.allow(object == null || object.getResolveState() != ResolveState.TRANSIENT || object.getResolveState() == ResolveState.GHOST);
    }
    public void execute(    Workspace workspace,    View view,    Location at){
      object.debugClearResolved();
    }
  }
);
}
