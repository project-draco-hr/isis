{
  context.checking(new Expectations(){
{
      allowing(mockConfiguration).injectInto(with(anything()));
      will(InjectIntoJMockAction.injectInto());
      ignoring(mockConfiguration);
    }
  }
);
  runtimeContext=new RuntimeContextNoRuntime();
  final ObjectReflectorDefault reflector=new ObjectReflectorDefault(mockConfiguration,new SpecificationTraverser(),new ProgrammingModelFacetsJava5(),new HashSet<FacetDecorator>(),new MetaModelValidatorDefault());
  reflector.setRuntimeContext(runtimeContext);
  reflector.setServices(Collections.<Object>singletonList(new DomainObjectContainerDefault()));
  reflector.init();
  specification=loadSpecification(reflector);
}
