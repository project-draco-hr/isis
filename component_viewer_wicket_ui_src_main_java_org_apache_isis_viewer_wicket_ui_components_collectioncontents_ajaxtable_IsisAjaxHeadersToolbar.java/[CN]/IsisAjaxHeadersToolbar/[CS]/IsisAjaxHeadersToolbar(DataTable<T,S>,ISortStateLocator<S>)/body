{
  super(table);
  RefreshingView<IColumn<T,S>> headers=new RefreshingView<IColumn<T,S>>("headers"){
    private static final long serialVersionUID=1L;
    @Override protected Iterator<IModel<IColumn<T,S>>> getItemModels(){
      List<IModel<IColumn<T,S>>> columnsModels=new LinkedList<IModel<IColumn<T,S>>>();
      for (      IColumn<T,S> column : table.getColumns()) {
        columnsModels.add(Model.of(column));
      }
      return columnsModels.iterator();
    }
    @Override protected void populateItem(    Item<IColumn<T,S>> item){
      final IColumn<T,S> column=item.getModelObject();
      WebMarkupContainer header;
      if (column.isSortable()) {
        header=newSortableHeader("header",column.getSortProperty(),stateLocator);
        if (column instanceof IStyledColumn) {
          CssAttributeBehavior cssAttributeBehavior=new CssAttributeBehavior(){
            private static final long serialVersionUID=1L;
            @Override protected String getCssClass(){
              return ((IStyledColumn<?,S>)column).getCssClass();
            }
          }
;
          header.add(cssAttributeBehavior);
        }
      }
 else {
        header=new WebMarkupContainer("header");
      }
      item.add(header);
      item.setRenderBodyOnly(true);
      Component label=column.getHeader("label");
      Component sortIcon=newSortIcon("sortIcon",column,stateLocator);
      header.add(label,sortIcon);
    }
  }
;
  add(headers);
}
