{
  try {
    Properties p=Configuration.loadProperties("log4j.properties");
    PropertyConfigurator.configure(p);
  }
 catch (  ConfigurationException e) {
    BasicConfigurator.configure();
  }
  Logger.getRootLogger().setLevel(Level.WARN);
  splash=null;
  try {
    String name=this.getClass().getName();
    name=name.substring(name.lastIndexOf('.') + 1);
    ConfigurationFactory.setConfiguration(new Configuration(DEFAULT_CONFIG));
    if (ConfigurationFactory.getConfiguration().getString(SHOW_EXPLORATION_OPTIONS) == null) {
      ConfigurationFactory.getConfiguration().add(SHOW_EXPLORATION_OPTIONS,"yes");
    }
    PropertyConfigurator.configure(ConfigurationFactory.getConfiguration().getProperties("log4j"));
    Logger log=Logger.getLogger("Naked Objects");
    log.info(AboutNakedObjects.getName());
    log.info(AboutNakedObjects.getVersion());
    log.info(AboutNakedObjects.getBuildId());
    boolean noSplash=ConfigurationFactory.getConfiguration().getBoolean("nosplash",false);
    if (!noSplash) {
      splash=new SplashWindow();
    }
    setUpLocale();
    JavaBusinessObjectContainer container=new JavaBusinessObjectContainer();
    LoadedObjectsHashtable loadedObjectsHashtable=new LoadedObjectsHashtable();
    JavaObjectFactory objectFactory=new JavaObjectFactory();
    objectFactory.setContainer(container);
    container.setObjectFactory(objectFactory);
    TransientObjectStore objectStore=new TransientObjectStore();
    objectStore.setLoadedObjects(loadedObjectsHashtable);
    OidGenerator oidGenerator=new SimpleOidGenerator();
    objectManager=new LocalObjectManager();
    objectManager.setObjectStore(objectStore);
    objectManager.setObjectFactory(objectFactory);
    objectManager.setOidGenerator(oidGenerator);
    objectManager.setLoadedObjects(loadedObjectsHashtable);
    NakedObjects.setObjectManager(objectManager);
    container.setObjectManger(objectManager);
    new NakedObjectSpecificationLoaderImpl();
    LocalReflectionFactory reflectionFactory=new LocalReflectionFactory();
    JavaReflectorFactory reflectorFactory=new JavaReflectorFactory();
    PojoAdapter.setPojoAdapterHash(new PojoAdapterHashImpl());
    PojoAdapter.setReflectorFactory(reflectorFactory);
    NakedObjectSpecificationImpl.setReflectionFactory(reflectionFactory);
    NakedObjectSpecificationLoaderImpl.setReflectorFactory(reflectorFactory);
    reflectorFactory.setObjectFactory(objectFactory);
    builder=new JavaFixtureBuilder();
  }
 catch (  ConfigurationException e) {
    throw new NakedObjectRuntimeException(e);
  }
 finally {
    if (splash != null) {
      splash.removeAfterDelay(4);
    }
  }
}
