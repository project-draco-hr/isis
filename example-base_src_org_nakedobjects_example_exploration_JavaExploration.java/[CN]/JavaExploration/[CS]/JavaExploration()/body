{
  ConfigurationPropertiesLoader loadedProperties=new ConfigurationPropertiesLoader("log4j.properties",false);
  Properties p=loadedProperties.getProperties();
  if (p.size() == 0) {
    BasicConfigurator.configure();
  }
 else {
    PropertyConfigurator.configure(p);
  }
  Logger.getRootLogger().setLevel(Level.WARN);
  splash=null;
  try {
    String name=this.getClass().getName();
    name=name.substring(name.lastIndexOf('.') + 1);
    Configuration configuration=new Configuration(new ConfigurationPropertiesLoader(DEFAULT_CONFIG,false));
    NakedObjectsClient nakedObjects=new NakedObjectsClient();
    nakedObjects.setConfiguration(configuration);
    PropertyConfigurator.configure(configuration.getProperties("log4j"));
    Logger log=Logger.getLogger("Naked Objects");
    log.info(AboutNakedObjects.getName());
    log.info(AboutNakedObjects.getVersion());
    log.info(AboutNakedObjects.getBuildId());
    boolean noSplash=configuration.getBoolean("nosplash",false);
    if (!noSplash) {
      splash=new SplashWindow();
    }
    setUpLocale();
    JavaBusinessObjectContainer container=new JavaBusinessObjectContainer();
    JavaObjectFactory objectFactory=new JavaObjectFactory();
    objectFactory.setContainer(container);
    container.setObjectFactory(objectFactory);
    TransientObjectStore objectStore=new TransientObjectStore();
    OidGenerator oidGenerator=new SimpleOidGenerator();
    LocalObjectManager objectManager=new LocalObjectManager();
    objectManager.setObjectStore(objectStore);
    objectManager.setObjectFactory(objectFactory);
    objectManager.setOidGenerator(oidGenerator);
    nakedObjects.setObjectManager(objectManager);
    NakedObjectSpecificationLoaderImpl specificationLoader=new NakedObjectSpecificationLoaderImpl();
    nakedObjects.setSpecificationLoader(specificationLoader);
    LocalReflectionFactory reflectionFactory=new LocalReflectionFactory();
    HelpManagerAssist helpManager=new HelpManagerAssist();
    helpManager.setDecorated(new SimpleHelpManager());
    reflectionFactory.setHelpManager(helpManager);
    JavaReflectorFactory reflectorFactory=new JavaReflectorFactory();
    PojoAdapterFactoryImpl pojoAdapterFactory=new PojoAdapterFactoryImpl();
    pojoAdapterFactory.setPojoAdapterHash(new PojoAdapterHashImpl());
    pojoAdapterFactory.setReflectorFactory(reflectorFactory);
    nakedObjects.setPojoAdapterFactory(pojoAdapterFactory);
    nakedObjects.setReflectionFactory(reflectionFactory);
    nakedObjects.setReflectorFactory(reflectorFactory);
    reflectorFactory.setObjectFactory(objectFactory);
    nakedObjects.setSession(new SimpleSession());
    objectManager.init();
    builder=new JavaFixtureBuilder();
  }
 catch (  Exception e) {
    ExceptionHelper.log(JavaExploration.class,"Exploration startup problem",e);
  }
 finally {
    if (splash != null) {
      splash.removeAfterDelay(4);
    }
  }
}
