{
  ConfigurationPropertiesLoader loadedProperties=new ConfigurationPropertiesLoader("log4j.properties",false);
  Properties p=loadedProperties.getProperties();
  if (p.size() == 0) {
    BasicConfigurator.configure();
  }
 else {
    PropertyConfigurator.configure(p);
  }
  Logger.getRootLogger().setLevel(Level.WARN);
  splash=null;
  try {
    String name=this.getClass().getName();
    name=name.substring(name.lastIndexOf('.') + 1);
    Configuration configuration=new Configuration(new ConfigurationPropertiesLoader(configurationFile(),false));
    NakedObjectsClient nakedObjects=new NakedObjectsClient();
    nakedObjects.setConfiguration(configuration);
    PropertyConfigurator.configure(configuration.getProperties("log4j"));
    Logger log=Logger.getLogger("Naked Objects");
    log.info(AboutNakedObjects.getName());
    log.info(AboutNakedObjects.getVersion());
    log.info(AboutNakedObjects.getBuildId());
    boolean noSplash=configuration.getBoolean("nosplash",false);
    if (!noSplash) {
      splash=new SplashWindow();
    }
    setUpLocale();
    JavaBusinessObjectContainer container=new JavaBusinessObjectContainer();
    JavaObjectFactory objectFactory=new JavaObjectFactory();
    objectFactory.setContainer(container);
    TransientObjectStore objectStore=new TransientObjectStore();
    OidGenerator oidGenerator=new SimpleOidGenerator();
    DefaultPersistAlgorithm persistAlgorithm=new DefaultPersistAlgorithm();
    persistAlgorithm.setOidGenerator(oidGenerator);
    LocalObjectManager objectManager=new LocalObjectManager();
    objectManager.setObjectStore(objectStore);
    objectManager.setPersistAlgorithm(persistAlgorithm);
    nakedObjects.setObjectManager(objectManager);
    NakedObjectSpecificationLoader specificationLoader=new JavaSpecificationLoader();
    nakedObjects.setSpecificationLoader(specificationLoader);
    LocalReflectionFactory reflectionFactory=new LocalReflectionFactory();
    HelpManagerAssist helpManager=new HelpManagerAssist();
    helpManager.setDecorated(new SimpleHelpManager());
    reflectionFactory.setHelpManager(helpManager);
    ObjectLoaderImpl objectLoader=new ObjectLoaderImpl();
    objectLoader.setObjectFactory(objectFactory);
    objectLoader.setPojoAdapterMap(new PojoAdapterHashMap());
    objectLoader.setIdentityAdapterMap(new IdentityAdapterHashMap());
    objectLoader.setAdapterFactory(new JavaAdapterFactory());
    nakedObjects.setObjectLoader(objectLoader);
    nakedObjects.setReflectionFactory(reflectionFactory);
    nakedObjects.setSession(new SimpleSession());
    builder=new JavaFixtureBuilder();
    nakedObjects.init();
  }
 catch (  Exception e) {
    LOG.error("exploration startup problem",e);
  }
 finally {
    if (splash != null) {
      splash.removeAfterDelay(4);
    }
  }
}
