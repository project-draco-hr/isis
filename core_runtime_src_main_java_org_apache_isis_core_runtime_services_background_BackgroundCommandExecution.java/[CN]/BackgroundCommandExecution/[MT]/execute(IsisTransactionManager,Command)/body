{
  transactionManager.executeWithinTransaction(backgroundCommand,new TransactionalClosure(){
    @Override public void execute(){
      final Interaction backgroundInteraction=interactionContext.getInteraction();
      final String memento=backgroundCommand.getMemento();
      try {
        backgroundCommand.setExecutor(Executor.BACKGROUND);
        final boolean legacy=memento.startsWith("<memento");
        if (legacy) {
          final ActionInvocationMemento aim=new ActionInvocationMemento(mementoService,memento);
          final String actionId=aim.getActionId();
          final Bookmark targetBookmark=aim.getTarget();
          final Object targetObject=bookmarkService.lookup(targetBookmark);
          final ObjectAdapter targetAdapter=adapterFor(targetObject);
          final ObjectSpecification specification=targetAdapter.getSpecification();
          final ObjectAction objectAction=findAction(specification,actionId);
          if (objectAction == null) {
            throw new RuntimeException(String.format("Unknown action '%s'",actionId));
          }
          final ObjectAdapter[] argAdapters=argAdaptersFor(aim);
          final ObjectAdapter resultAdapter=objectAction.execute(targetAdapter,argAdapters,InteractionInitiatedBy.FRAMEWORK);
          if (resultAdapter != null) {
            Bookmark resultBookmark=CommandUtil.bookmarkFor(resultAdapter);
            backgroundCommand.setResult(resultBookmark);
            backgroundInteraction.getCurrentExecution().setResult(resultAdapter.getObject());
          }
        }
 else {
          final CommandMementoDto dto=jaxbService.fromXml(CommandMementoDto.class,memento);
          final ActionDto actionDto=dto.getAction();
          final String actionId=actionDto.getActionIdentifier();
          final List<OidDto> targetOidDtos=dto.getTargets();
          for (          OidDto targetOidDto : targetOidDtos) {
            final Bookmark bookmark=Bookmark.from(targetOidDto);
            final Object targetObject=bookmarkService.lookup(bookmark);
            final ObjectAdapter targetAdapter=adapterFor(targetObject);
            final ObjectAction objectAction=findObjectAction(targetAdapter,actionId);
            final ObjectAdapter[] argAdapters=argAdaptersFor(dto);
            final ObjectAdapter resultAdapter=objectAction.execute(targetAdapter,argAdapters,InteractionInitiatedBy.FRAMEWORK);
            Object unused=backgroundInteraction.getPriorExecution().getResult();
            if (resultAdapter != null) {
              Bookmark resultBookmark=CommandUtil.bookmarkFor(resultAdapter);
              backgroundCommand.setResult(resultBookmark);
            }
          }
        }
      }
 catch (      RuntimeException e) {
        backgroundCommand.setException(Throwables.getStackTraceAsString(e));
        RuntimeException unused=backgroundInteraction.getPriorExecution().getException();
        backgroundInteraction.getCurrentExecution().setException(e);
      }
      backgroundCommand.setCompletedAt(backgroundInteraction.getPriorExecution().getCompletedAt());
    }
    private ObjectAction findObjectAction(    final ObjectAdapter targetAdapter,    final String actionId) throws RuntimeException {
      final ObjectAction objectAction;
      final ObjectSpecification specification=targetAdapter.getSpecification();
      objectAction=findAction(specification,actionId);
      if (objectAction == null) {
        throw new RuntimeException(String.format("Unknown action '%s'",actionId));
      }
      return objectAction;
    }
  }
);
}
