{
  transactionManager.executeWithinTransaction(backgroundCommand,new TransactionalClosure(){
    @Override public void execute(){
      final Interaction backgroundInteraction=interactionContext.getInteraction();
      final String memento=backgroundCommand.getMemento();
      try {
        backgroundCommand.setExecutor(Executor.BACKGROUND);
        final boolean legacy=memento.startsWith("<memento");
        if (legacy) {
          final ActionInvocationMemento aim=new ActionInvocationMemento(mementoService,memento);
          final String actionId=aim.getActionId();
          final Bookmark targetBookmark=aim.getTarget();
          final Object targetObject=bookmarkService.lookup(targetBookmark,BookmarkService2.FieldResetPolicy.RESET);
          final ObjectAdapter targetAdapter=adapterFor(targetObject);
          final ObjectSpecification specification=targetAdapter.getSpecification();
          final ObjectAction objectAction=findActionElseNull(specification,actionId);
          if (objectAction == null) {
            throw new RuntimeException(String.format("Unknown action '%s'",actionId));
          }
          final ObjectAdapter mixedInAdapter=null;
          final ObjectAdapter[] argAdapters=argAdaptersFor(aim);
          final ObjectAdapter resultAdapter=objectAction.execute(targetAdapter,mixedInAdapter,argAdapters,InteractionInitiatedBy.FRAMEWORK);
          if (resultAdapter != null) {
            Bookmark resultBookmark=CommandUtil.bookmarkFor(resultAdapter);
            backgroundCommand.setResult(resultBookmark);
            backgroundInteraction.getCurrentExecution().setReturned(resultAdapter.getObject());
          }
        }
 else {
          final CommandDto dto=jaxbService.fromXml(CommandDto.class,memento);
          final MemberDto memberDto=dto.getMember();
          final String memberId=memberDto.getMemberIdentifier();
          final OidsDto oidsDto=CommandDtoUtils.targetsFor(dto);
          final List<OidDto> targetOidDtos=oidsDto.getOid();
          final InteractionType interactionType=memberDto.getInteractionType();
          if (interactionType == InteractionType.ACTION_INVOCATION) {
            final ActionDto actionDto=(ActionDto)memberDto;
            for (            OidDto targetOidDto : targetOidDtos) {
              final Bookmark bookmark=Bookmark.from(targetOidDto);
              final Object targetObject=bookmarkService.lookup(bookmark);
              final ObjectAdapter targetAdapter=adapterFor(targetObject);
              final ObjectAction objectAction=findObjectAction(targetAdapter,memberId);
              final ObjectAdapter[] argAdapters=argAdaptersFor(actionDto);
              final ObjectAdapter resultAdapter=objectAction.execute(targetAdapter,null,argAdapters,InteractionInitiatedBy.FRAMEWORK);
              Object unused=backgroundInteraction.getPriorExecution().getReturned();
              if (resultAdapter != null) {
                Bookmark resultBookmark=CommandUtil.bookmarkFor(resultAdapter);
                backgroundCommand.setResult(resultBookmark);
              }
            }
          }
 else {
            final PropertyDto propertyDto=(PropertyDto)memberDto;
            for (            OidDto targetOidDto : targetOidDtos) {
              final Bookmark bookmark=Bookmark.from(targetOidDto);
              final Object targetObject=bookmarkService.lookup(bookmark);
              final ObjectAdapter targetAdapter=adapterFor(targetObject);
              final OneToOneAssociation property=findOneToOneAssociation(targetAdapter,memberId);
              final ObjectAdapter newValueAdapter=newValueAdapterFor(propertyDto);
              property.set(targetAdapter,newValueAdapter,InteractionInitiatedBy.FRAMEWORK);
            }
          }
        }
      }
 catch (      RuntimeException e) {
        backgroundCommand.setException(Throwables.getStackTraceAsString(e));
        Exception unused=backgroundInteraction.getPriorExecution().getThrew();
        backgroundInteraction.getCurrentExecution().setThrew(e);
      }
      backgroundCommand.setCompletedAt(backgroundInteraction.getPriorExecution().getCompletedAt());
    }
    private ObjectAction findObjectAction(    final ObjectAdapter targetAdapter,    final String actionId) throws RuntimeException {
      final ObjectSpecification specification=targetAdapter.getSpecification();
      final ObjectAction objectAction=findActionElseNull(specification,actionId);
      if (objectAction == null) {
        throw new RuntimeException(String.format("Unknown action '%s'",actionId));
      }
      return objectAction;
    }
    private OneToOneAssociation findOneToOneAssociation(    final ObjectAdapter targetAdapter,    final String propertyId) throws RuntimeException {
      final ObjectSpecification specification=targetAdapter.getSpecification();
      final OneToOneAssociation property=findOneToOneAssociationElseNull(specification,propertyId);
      if (property == null) {
        throw new RuntimeException(String.format("Unknown property '%s'",propertyId));
      }
      return property;
    }
  }
);
}
