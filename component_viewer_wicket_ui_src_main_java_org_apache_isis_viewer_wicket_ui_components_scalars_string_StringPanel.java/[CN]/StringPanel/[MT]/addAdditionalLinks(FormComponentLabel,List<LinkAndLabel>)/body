{
  if (links == null || links.isEmpty()) {
    permanentlyHide(ID_ADDITIONAL_LINKS);
    return;
  }
  links=Lists.newArrayList(links);
  final WebMarkupContainer views=new WebMarkupContainer(ID_ADDITIONAL_LINKS);
  final WebMarkupContainer container=new WebMarkupContainer(ID_ADDITIONAL_LINK_LIST);
  views.addOrReplace(container);
  views.setOutputMarkupId(true);
  this.setOutputMarkupId(true);
  final ListView<LinkAndLabel> listView=new ListView<LinkAndLabel>(ID_ADDITIONAL_LINK_ITEM,links){
    private static final long serialVersionUID=1L;
    @Override protected void populateItem(    ListItem<LinkAndLabel> item){
      final LinkAndLabel linkAndLabel=item.getModelObject();
      final AbstractLink link=linkAndLabel.getLink();
      Label viewTitleLabel=new Label(ID_ADDITIONAL_LINK_TITLE,linkAndLabel.getLabel());
      String disabledReasonIfAny=linkAndLabel.getDisabledReasonIfAny();
      if (disabledReasonIfAny != null) {
        viewTitleLabel.add(new AttributeAppender("title",disabledReasonIfAny));
      }
      viewTitleLabel.add(new CssClassAppender(StringUtils.toLowerDashed(linkAndLabel.getLabel())));
      link.addOrReplace(viewTitleLabel);
      item.addOrReplace(link);
    }
  }
;
  container.addOrReplace(listView);
  fcl.addOrReplace(views);
}
