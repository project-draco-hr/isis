{
  BasicConfigurator.configure();
  Configuration configuration=new Configuration(DEFAULT_CONFIG);
  NakedObjects.setConfiguration(configuration);
  ConfigurationFactory.setConfiguration(configuration);
  if (NakedObjects.getConfiguration().getString(SHOW_EXPLORATION_OPTIONS) == null) {
    NakedObjects.getConfiguration().add(SHOW_EXPLORATION_OPTIONS,"yes");
  }
  PropertyConfigurator.configure(NakedObjects.getConfiguration().getProperties("log4j"));
  Logger log=Logger.getLogger("Naked Objects");
  log.info(AboutNakedObjects.getName());
  log.info(AboutNakedObjects.getVersion());
  log.info(AboutNakedObjects.getBuildId());
  setUpLocale();
  SplashWindow splash=null;
  boolean noSplash=ConfigurationFactory.getConfiguration().getBoolean("nosplash",false);
  if (!noSplash) {
    splash=new SplashWindow();
  }
  try {
    JavaBusinessObjectContainer container=new JavaBusinessObjectContainer();
    LoadedObjectsHashtable loadedObjectsHashtable=new LoadedObjectsHashtable();
    JavaObjectFactory objectFactory=new JavaObjectFactory();
    objectFactory.setContainer(container);
    container.setObjectFactory(objectFactory);
    TransientObjectStore objectStore=new TransientObjectStore();
    objectStore.setLoadedObjects(loadedObjectsHashtable);
    OidGenerator oidGenerator=new SimpleOidGenerator();
    LocalObjectManager objectManager=new LocalObjectManager();
    objectManager.setObjectStore(objectStore);
    objectManager.setObjectFactory(objectFactory);
    objectManager.setOidGenerator(oidGenerator);
    objectManager.setLoadedObjects(loadedObjectsHashtable);
    NakedObjects.setObjectManager(objectManager);
    container.setObjectManger(objectManager);
    new NakedObjectSpecificationLoaderImpl();
    LocalReflectionFactory reflectionFactory=new LocalReflectionFactory();
    JavaReflectorFactory reflectorFactory=new JavaReflectorFactory();
    PojoAdapter.setPojoAdapterHash(new PojoAdapterHashImpl());
    PojoAdapter.setReflectorFactory(reflectorFactory);
    NakedObjectSpecificationImpl.setReflectionFactory(reflectionFactory);
    NakedObjectSpecificationLoaderImpl.setReflectorFactory(reflectorFactory);
    reflectorFactory.setObjectFactory(objectFactory);
    JavaFixtureBuilder fixtureBuilder=new JavaFixtureBuilder();
    fixtureBuilder.addFixture(new EcsFixture());
    fixtureBuilder.installFixtures();
    ClientSession.setSession(new SimpleSession());
    SkylarkViewer viewer=new SkylarkViewer();
    EcsContext ecs=new EcsContext();
    viewer.setApplication(ecs);
    viewer.setObjectManager(objectManager);
    viewer.show();
  }
  finally {
    if (splash != null) {
      splash.toFront();
      splash.removeAfterDelay(3);
    }
  }
}
