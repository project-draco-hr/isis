{
  final String capitalizedName=NameUtils.javaBaseName(collectionAccessor.getName());
  final Class<?> returnType=collectionAccessor.getReturnType();
  final List<Facet> facets=new ArrayList<Facet>();
  removeMethod(methodRemover,collectionAccessor);
  facets.add(new PropertyAccessorFacetViaAccessor(collectionAccessor,collection));
  final Class<?> addToType=findAndRemoveAddToMethod(facets,methodRemover,cls,collectionAccessor,capitalizedName,collection);
  final Class<?> removeFromType=findAndRemoveRemoveFromMethod(facets,methodRemover,cls,collectionAccessor,capitalizedName,collection);
  final Class<?> collectionType=inferTypeOfIfPossible(facets,collectionAccessor,addToType,removeFromType,collection);
  findAndRemoveClearMethod(facets,methodRemover,cls,collectionAccessor,capitalizedName,collection);
  findAndRemoveValidateAddToMethod(facets,methodRemover,cls,collectionType,capitalizedName,returnType,collection);
  findAndRemoveValidateRemoveFromMethod(facets,methodRemover,cls,collectionType,capitalizedName,returnType,collection);
  findAndRemoveNameMethod(facets,methodRemover,cls,capitalizedName,collection);
  findAndRemoveDescriptionMethod(facets,methodRemover,cls,capitalizedName,collection);
  findAndRemoveAlwaysHideMethod(facets,methodRemover,cls,capitalizedName,collection);
  findAndRemoveProtectMethod(facets,methodRemover,cls,capitalizedName,collection);
  findAndRemoveHideForSessionMethod(facets,methodRemover,cls,capitalizedName,UserMemento.class,collection);
  findAndRemoveDisableForSessionMethod(facets,methodRemover,cls,capitalizedName,UserMemento.class,collection);
  findAndRemoveHideMethod(facets,methodRemover,cls,OBJECT,capitalizedName,collection);
  findAndRemoveDisableMethod(facets,methodRemover,cls,OBJECT,capitalizedName,collection);
  return FacetUtil.addFacets(facets);
}
