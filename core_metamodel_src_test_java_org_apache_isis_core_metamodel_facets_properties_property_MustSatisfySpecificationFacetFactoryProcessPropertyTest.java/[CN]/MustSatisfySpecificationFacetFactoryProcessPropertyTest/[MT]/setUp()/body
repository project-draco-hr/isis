{
  context.checking(new Expectations(){
{
      allowing(mockServicesInjector).lookupService(TranslationService.class);
      will(returnValue(mockTranslationService));
      allowing(mockServicesInjector).getConfigurationServiceInternal();
      will(returnValue(mockConfiguration));
      allowing(mockServicesInjector).injectServicesInto(with(any(List.class)));
      allowing(mockFacetedMethod).getIdentifier();
      will(returnValue(Identifier.actionIdentifier(Customer.class,"foo")));
    }
  }
);
  domainObjectClassWithoutAnnotation=DomainObjectWithoutMustSatisfyAnnotations.class;
  domainObjectClassWithAnnotation=DomainObjectWithMustSatisfyAnnotations.class;
  firstNameMethodWithout=domainObjectClassWithoutAnnotation.getMethod("getFirstName");
  firstNameMethodWith=domainObjectClassWithAnnotation.getMethod("getFirstName");
  facetFactory=new PropertyAnnotationFacetFactory();
  facetFactory.setServicesInjector(mockServicesInjector);
}
