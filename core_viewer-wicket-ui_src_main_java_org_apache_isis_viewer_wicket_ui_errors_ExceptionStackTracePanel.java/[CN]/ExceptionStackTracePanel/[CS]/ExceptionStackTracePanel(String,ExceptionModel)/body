{
  super(id,exceptionModel);
  final Ticket ticket=exceptionModel.getTicket();
  final String mainMessage=ticket != null && ticket.getUserMessage() != null ? ticket.getUserMessage() : exceptionModel.getMainMessage();
  final Label label=new Label(ID_MAIN_MESSAGE,mainMessage);
  add(label);
  final String ticketDetail=ticket != null ? ticket.getDetails() : null;
  if (ticketDetail == null) {
    Components.permanentlyHide(this,ID_USER_DETAIL);
  }
 else {
    final WebMarkupContainer panel=new WebMarkupContainer(ID_USER_DETAIL);
    final MultiLineLabel details=new MultiLineLabel(ID_DETAILS,Model.of(ticketDetail));
    panel.add(details);
    add(panel);
  }
  final boolean suppressExceptionDetail=exceptionModel.isAuthorizationException() || exceptionModel.isRecognized();
  if (suppressExceptionDetail) {
    Components.permanentlyHide(this,ID_EXCEPTION_DETAIL);
  }
 else {
    MarkupContainer container=new WebMarkupContainer(ID_EXCEPTION_DETAIL){
      private static final long serialVersionUID=1L;
      @Override public void renderHead(      IHeaderResponse response){
        response.render(JavaScriptReferenceHeaderItem.forReference(DIV_TOGGLE_JS));
      }
    }
;
    container.add(new StackTraceListView(ID_STACK_TRACE_ELEMENT,ExceptionStackTracePanel.ID_LINE,exceptionModel.getStackTrace()));
    add(container);
  }
}
