{
class Customer {
    @SuppressWarnings("unused") @ActionLayout(cssClassFa="font-awesome",cssClassFaPosition=ActionLayout.CssClassFaPosition.RIGHT) public String foz(){
      return null;
    }
  }
  final Method method=findMethod(Customer.class,"foz");
  context.checking(new Expectations(){
{
      allowing(mockSpecificationLoaderSpi).loadSpecification(Customer.class);
      will(returnValue(mockObjSpec));
      allowing(mockObjSpec).getFacet(DomainServiceFacet.class);
      will(returnValue(null));
    }
  }
);
  facetFactory.process(new ProcessMethodContext(Customer.class,null,null,method,mockMethodRemover,facetedMethod));
  Facet facet=facetedMethod.getFacet(CssClassFaFacet.class);
  assertThat(facet,is(notNullValue()));
  assertThat(facet,is(instanceOf(CssClassFaFacetForActionLayoutAnnotation.class)));
  CssClassFaFacetForActionLayoutAnnotation classFaFacetForActionLayoutAnnotation=(CssClassFaFacetForActionLayoutAnnotation)facet;
  assertThat(classFaFacetForActionLayoutAnnotation.value(),is(equalTo("fa fa-fw fa-font-awesome")));
  assertThat(classFaFacetForActionLayoutAnnotation.getPosition(),is(CssClassFaPosition.RIGHT));
}
