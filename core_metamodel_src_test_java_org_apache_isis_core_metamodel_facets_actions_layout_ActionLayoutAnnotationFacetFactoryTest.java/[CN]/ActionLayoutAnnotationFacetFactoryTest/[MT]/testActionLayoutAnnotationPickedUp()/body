{
class Customer {
    @SuppressWarnings("unused") @ActionLayout(position=ActionLayout.Position.PANEL) public String foz(){
      return null;
    }
  }
  final Method method=findMethod(Customer.class,"foz");
  context.checking(new Expectations(){
{
      allowing(mockSpecificationLoaderSpi).loadSpecification(Customer.class);
      will(returnValue(mockObjSpec));
      allowing(mockObjSpec).getFacet(MixinFacet.class);
      will(returnValue(null));
      allowing(mockObjSpec).getFacet(DomainServiceFacet.class);
      will(returnValue(null));
    }
  }
);
  facetFactory.process(new ProcessMethodContext(Customer.class,null,null,method,mockMethodRemover,facetedMethod));
  final Facet facet=facetedMethod.getFacet(ActionPositionFacet.class);
  Assert.assertNotNull(facet);
  Assert.assertTrue(facet instanceof ActionPositionFacetForActionLayoutAnnotation);
  final ActionPositionFacetForActionLayoutAnnotation actionLayoutFacetAnnotation=(ActionPositionFacetForActionLayoutAnnotation)facet;
  Assert.assertEquals(ActionLayout.Position.PANEL,actionLayoutFacetAnnotation.position());
}
