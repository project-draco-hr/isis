{
  final CollectionAccessorFacetViaAccessorFactory facetFactory=new CollectionAccessorFacetViaAccessorFactory();
  facetFactory.setServicesInjector(stubServicesInjector);
@SuppressWarnings("hiding") class Order {
  }
class Customer {
    @SuppressWarnings("unused") public Collection<Order> getOrders(){
      return null;
    }
  }
class CustomerEx extends Customer {
  }
  final Method collectionAccessorMethod=findMethod(Customer.class,"getOrders");
  facetFactory.process(new ProcessMethodContext(CustomerEx.class,null,null,collectionAccessorMethod,methodRemover,facetedMethod));
  final Facet facet=facetedMethod.getFacet(PropertyOrCollectionAccessorFacet.class);
  assertNotNull(facet);
  assertTrue(facet instanceof CollectionAccessorFacetViaAccessor);
  final CollectionAccessorFacetViaAccessor collectionAccessorFacetViaMethod=(CollectionAccessorFacetViaAccessor)facet;
  assertEquals(collectionAccessorMethod,collectionAccessorFacetViaMethod.getMethods().get(0));
}
