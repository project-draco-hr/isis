{
  final CollectionAccessorFacetViaAccessorFactory facetFactory=new CollectionAccessorFacetViaAccessorFactory();
  facetFactory.setSpecificationLoader(programmableReflector);
  facetFactory.setDeploymentCategory(DeploymentCategory.PRODUCTION);
  facetFactory.setServicesInjector(mockServicesInjector);
  context.checking(new Expectations(){
{
      allowing(mockServicesInjector).lookupService(AuthenticationSessionProvider.class);
      will(returnValue(mockAuthenticationSessionProvider));
    }
  }
);
class Customer {
    @SuppressWarnings({"rawtypes","unused"}) public List getOrders(){
      return null;
    }
  }
  final Method collectionAccessorMethod=findMethod(Customer.class,"getOrders");
  facetFactory.process(new ProcessMethodContext(CustomerStatic.class,null,null,collectionAccessorMethod,methodRemover,facetedMethod));
  final Facet facet=facetedMethod.getFacet(PropertyOrCollectionAccessorFacet.class);
  assertNotNull(facet);
  assertTrue(facet instanceof CollectionAccessorFacetViaAccessor);
  final CollectionAccessorFacetViaAccessor propertyAccessorFacetViaAccessor=(CollectionAccessorFacetViaAccessor)facet;
  assertEquals(collectionAccessorMethod,propertyAccessorFacetViaAccessor.getMethods().get(0));
  assertTrue(methodRemover.getRemovedMethodMethodCalls().contains(collectionAccessorMethod));
}
