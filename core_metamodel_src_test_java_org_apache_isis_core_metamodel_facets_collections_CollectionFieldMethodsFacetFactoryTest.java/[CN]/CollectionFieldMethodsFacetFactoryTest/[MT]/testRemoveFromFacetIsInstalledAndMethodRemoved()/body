{
  final CollectionAddToRemoveFromAndValidateFacetFactory facetFactory=new CollectionAddToRemoveFromAndValidateFacetFactory();
  facetFactory.setSpecificationLookup(programmableReflector);
@SuppressWarnings("hiding") class Order {
  }
class Customer {
    @SuppressWarnings({"rawtypes","unused"}) public Collection getOrders(){
      return null;
    }
    @SuppressWarnings("unused") public void removeFromOrders(    final Order o){
    }
  }
  final Method collectionAccessorMethod=findMethod(Customer.class,"getOrders");
  final Method removeFromMethod=findMethod(Customer.class,"removeFromOrders",new Class[]{Order.class});
  facetFactory.process(new ProcessMethodContext(Customer.class,null,null,collectionAccessorMethod,methodRemover,facetedMethod));
  final Facet facet=facetedMethod.getFacet(CollectionRemoveFromFacet.class);
  assertNotNull(facet);
  assertTrue(facet instanceof CollectionRemoveFromFacetViaMethod);
  final CollectionRemoveFromFacetViaMethod collectionRemoveFromFacetViaMethod=(CollectionRemoveFromFacetViaMethod)facet;
  assertEquals(removeFromMethod,collectionRemoveFromFacetViaMethod.getMethods().get(0));
  assertTrue(methodRemover.getRemovedMethodMethodCalls().contains(removeFromMethod));
}
