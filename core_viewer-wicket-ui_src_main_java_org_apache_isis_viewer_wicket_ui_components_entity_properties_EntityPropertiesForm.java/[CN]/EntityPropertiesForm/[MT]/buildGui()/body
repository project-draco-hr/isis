{
  final EntityModel entityModel=(EntityModel)getModel();
  final Tab tabMetaDataIfAny=entityModel.getTabMetadata();
  final ColumnSpans columnSpans;
  if (tabMetaDataIfAny != null) {
    final Column middle=tabMetaDataIfAny.getMiddle();
    final Column right=tabMetaDataIfAny.getRight();
    columnSpans=ColumnSpans.asSpans(tabMetaDataIfAny.getLeft().getSpan(),middle != null ? middle.getSpan() : 0,right != null ? right.getSpan() : 0);
  }
 else {
    final MemberGroupLayoutFacet memberGroupLayoutFacet=entityModel.getObject().getSpecification().getFacet(MemberGroupLayoutFacet.class);
    columnSpans=memberGroupLayoutFacet.getColumnSpans();
  }
  renderedFirstField=false;
  MarkupContainer leftColumn=new WebMarkupContainer(ID_LEFT_COLUMN);
  add(leftColumn);
  boolean addedProperties;
  if (columnSpans.getLeft() > 0) {
    final MemberGroupLayoutHint hint=MemberGroupLayoutHint.LEFT;
    final Column columnMetaDataIfAny=tabMetaDataIfAny != null ? hint.from(tabMetaDataIfAny) : null;
    addPropertiesAndCollections(leftColumn,hint,entityModel,columnSpans,columnMetaDataIfAny);
    final ObjectAdapter adapter=entityModel.getObject();
    final ObjectSpecification objSpec=adapter.getSpecification();
    final Map<String,List<ObjectAssociation>> associationsByGroup=PropUtil.propertiesByMemberOrder(adapter);
    final List<String> groupNames=columnMetaDataIfAny != null ? FluentIterable.from(columnMetaDataIfAny.getPropertyGroups()).transform(PropertyGroup.Util.nameOf()).toList() : ObjectSpecifications.orderByMemberGroups(objSpec,associationsByGroup.keySet(),hint);
    addedProperties=!groupNames.isEmpty();
    addButtons(leftColumn);
    addFeedbackGui(leftColumn);
  }
 else {
    Components.permanentlyHide(this,ID_LEFT_COLUMN);
    addedProperties=false;
  }
  if (!addedProperties) {
    Components.permanentlyHide(this,ID_EDIT_BUTTON,ID_OK_BUTTON,ID_CANCEL_BUTTON,ID_FEEDBACK);
  }
  if (columnSpans.getMiddle() > 0) {
    MarkupContainer middleColumn=new WebMarkupContainer(ID_MIDDLE_COLUMN);
    add(middleColumn);
    final Column columnMetaDataIfAny=tabMetaDataIfAny != null ? MemberGroupLayoutHint.MIDDLE.from(tabMetaDataIfAny) : null;
    addPropertiesAndCollections(middleColumn,MemberGroupLayoutHint.MIDDLE,entityModel,columnSpans,columnMetaDataIfAny);
  }
 else {
    Components.permanentlyHide(this,ID_MIDDLE_COLUMN);
  }
  if (columnSpans.getRight() > 0) {
    MarkupContainer rightColumn=new WebMarkupContainer(ID_RIGHT_COLUMN);
    add(rightColumn);
    final Column columnMetaDataIfAny=tabMetaDataIfAny != null ? MemberGroupLayoutHint.RIGHT.from(tabMetaDataIfAny) : null;
    addPropertiesAndCollections(rightColumn,MemberGroupLayoutHint.RIGHT,entityModel,columnSpans,columnMetaDataIfAny);
  }
 else {
    Components.permanentlyHide(this,ID_RIGHT_COLUMN);
  }
  if (tabMetaDataIfAny == null && columnSpans.getCollections() > 0) {
    final String idCollectionsToShow;
    final String idCollectionsToHide;
    int collectionSpan;
    if (columnSpans.exceedsRow()) {
      idCollectionsToShow=ID_ENTITY_COLLECTIONS_OVERFLOW;
      idCollectionsToHide=ID_ENTITY_COLLECTIONS;
      collectionSpan=12;
    }
 else {
      idCollectionsToShow=ID_ENTITY_COLLECTIONS;
      idCollectionsToHide=ID_ENTITY_COLLECTIONS_OVERFLOW;
      collectionSpan=columnSpans.getCollections();
    }
    final Component collectionsColumn=getComponentFactoryRegistry().addOrReplaceComponent(this,idCollectionsToShow,ComponentType.ENTITY_COLLECTIONS,entityModel);
    addClassForSpan(collectionsColumn,collectionSpan);
    Components.permanentlyHide(this,idCollectionsToHide);
  }
 else {
    Components.permanentlyHide(this,ID_ENTITY_COLLECTIONS);
    Components.permanentlyHide(this,ID_ENTITY_COLLECTIONS_OVERFLOW);
  }
}
