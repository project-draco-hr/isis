{
  final EntityModel entityModel=(EntityModel)getModel();
  final Tab tabMetaDataIfAny=entityModel.getTabMetadata();
  final ColumnSpans columnSpans;
  if (tabMetaDataIfAny != null) {
    final Column middle=tabMetaDataIfAny.getMiddle();
    final Column right=tabMetaDataIfAny.getRight();
    columnSpans=ColumnSpans.asSpans(tabMetaDataIfAny.getLeft().getSpan(),middle != null ? middle.getSpan() : 0,right != null ? right.getSpan() : 0);
  }
 else {
    final MemberGroupLayoutFacet memberGroupLayoutFacet=entityModel.getObject().getSpecification().getFacet(MemberGroupLayoutFacet.class);
    columnSpans=memberGroupLayoutFacet.getColumnSpans();
  }
  renderedFirstField=false;
  MarkupContainer leftColumn=new WebMarkupContainer(ID_LEFT_COLUMN);
  add(leftColumn);
  if (columnSpans.getLeft() > 0) {
    addPropertiesAndCollections(leftColumn,entityModel,tabMetaDataIfAny,Hint.LEFT);
  }
 else {
    Components.permanentlyHide(this,ID_LEFT_COLUMN);
  }
  MarkupContainer middleColumn;
  if (columnSpans.getMiddle() > 0) {
    middleColumn=new WebMarkupContainer(ID_MIDDLE_COLUMN);
    add(middleColumn);
    addPropertiesAndCollections(middleColumn,entityModel,tabMetaDataIfAny,Hint.MIDDLE);
  }
 else {
    middleColumn=null;
    Components.permanentlyHide(this,ID_MIDDLE_COLUMN);
  }
  MarkupContainer rightColumn;
  if (columnSpans.getRight() > 0) {
    rightColumn=new WebMarkupContainer(ID_RIGHT_COLUMN);
    add(rightColumn);
    addPropertiesAndCollections(rightColumn,entityModel,tabMetaDataIfAny,Hint.RIGHT);
  }
 else {
    rightColumn=null;
    Components.permanentlyHide(this,ID_RIGHT_COLUMN);
  }
  if (columnSpans.getLeft() > 0) {
    addClassForSpan(leftColumn,Hint.LEFT.from(columnSpans));
  }
  if (columnSpans.getMiddle() > 0) {
    addClassForSpan(middleColumn,Hint.MIDDLE.from(columnSpans));
  }
  if (columnSpans.getRight() > 0) {
    addClassForSpan(rightColumn,Hint.RIGHT.from(columnSpans));
  }
  final Hint leftHint=Hint.LEFT;
  final Column leftColumnMetaDataIfAny=leftHint.from(tabMetaDataIfAny);
  final List<String> groupNames=PropUtil.propertyGroupNames(entityModel,leftHint,leftColumnMetaDataIfAny);
  final boolean hasProperties=!groupNames.isEmpty();
  if (hasProperties) {
    addButtons(leftColumn);
    addFeedbackGui(leftColumn);
  }
 else {
    Components.permanentlyHide(leftColumn,ID_EDIT_BUTTON,ID_OK_BUTTON,ID_CANCEL_BUTTON,ID_FEEDBACK);
  }
  if (tabMetaDataIfAny == null && columnSpans.getCollections() > 0) {
    final String idCollectionsToShow;
    final String idCollectionsToHide;
    int collectionSpan;
    if (columnSpans.exceedsRow()) {
      idCollectionsToShow=ID_ENTITY_COLLECTIONS_OVERFLOW;
      idCollectionsToHide=ID_ENTITY_COLLECTIONS;
      collectionSpan=12;
    }
 else {
      idCollectionsToShow=ID_ENTITY_COLLECTIONS;
      idCollectionsToHide=ID_ENTITY_COLLECTIONS_OVERFLOW;
      collectionSpan=columnSpans.getCollections();
    }
    final Component collectionsColumn=getComponentFactoryRegistry().addOrReplaceComponent(this,idCollectionsToShow,ComponentType.ENTITY_COLLECTIONS,entityModel);
    addClassForSpan(collectionsColumn,collectionSpan);
    Components.permanentlyHide(this,idCollectionsToHide);
  }
 else {
    Components.permanentlyHide(this,ID_ENTITY_COLLECTIONS);
    Components.permanentlyHide(this,ID_ENTITY_COLLECTIONS_OVERFLOW);
  }
}
