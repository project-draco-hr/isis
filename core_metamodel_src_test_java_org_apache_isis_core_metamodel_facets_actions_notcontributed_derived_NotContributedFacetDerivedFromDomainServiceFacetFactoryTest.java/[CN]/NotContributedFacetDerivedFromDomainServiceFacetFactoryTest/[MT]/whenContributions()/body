{
@DomainService(nature=NatureOfService.VIEW_CONTRIBUTIONS_ONLY) class Customer {
    public String name(){
      return "Joe";
    }
  }
  context.checking(new Expectations(){
{
      allowing(mockSpecificationLoaderSpi).loadSpecification(Customer.class);
      will(returnValue(mockObjSpec));
      allowing(mockObjSpec).getFacet(DomainServiceFacet.class);
      will(returnValue(new DomainServiceFacetAbstract(mockObjSpec,null,NatureOfService.VIEW_CONTRIBUTIONS_ONLY){
      }
));
    }
  }
);
  expectNoMethodsRemoved();
  facetedMethod=FacetedMethod.createForAction(Customer.class,"name");
  facetFactory.process(new FacetFactory.ProcessMethodContext(Customer.class,null,null,facetedMethod.getMethod(),mockMethodRemover,facetedMethod));
  final Facet facet=facetedMethod.getFacet(NotContributedFacet.class);
  assertThat(facet,is(nullValue()));
}
