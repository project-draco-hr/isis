{
  final AuthenticationManager authenticationManager=getAuthenticationManager();
  final HttpSession httpSession=getHttpSession(httpServletRequest);
  AuthenticationSession authSession=(AuthenticationSession)httpSession.getAttribute(WebAppConstants.HTTP_SESSION_AUTHENTICATION_SESSION_KEY);
  if (authSession != null) {
    final boolean sessionValid=authenticationManager.isSessionValid(authSession);
    if (sessionValid) {
      return authSession;
    }
  }
  final ServletContext servletContext=getServletContext(httpServletRequest);
  final IsisSystem system=(IsisSystem)servletContext.getAttribute(WebAppConstants.ISIS_SYSTEM_KEY);
  if (system == null) {
    return null;
  }
  final LogonFixture logonFixture=system.getSessionFactory().getLogonFixture();
  if (system.getDeploymentCategory().isExploring()) {
    authSession=authenticationManager.authenticate(new AuthenticationRequestExploration(logonFixture));
    if (authSession != null) {
      return authSession;
    }
  }
  final boolean loggedInUsingLogonFixture=httpSession.getAttribute(WebAppConstants.HTTP_SESSION_LOGGED_ON_PREVIOUSLY_USING_LOGON_FIXTURE_KEY) != null;
  if (logonFixture != null && !loggedInUsingLogonFixture) {
    httpSession.setAttribute(WebAppConstants.HTTP_SESSION_LOGGED_ON_PREVIOUSLY_USING_LOGON_FIXTURE_KEY,true);
    return authenticationManager.authenticate(new AuthenticationRequestLogonFixture(logonFixture));
  }
  return null;
}
