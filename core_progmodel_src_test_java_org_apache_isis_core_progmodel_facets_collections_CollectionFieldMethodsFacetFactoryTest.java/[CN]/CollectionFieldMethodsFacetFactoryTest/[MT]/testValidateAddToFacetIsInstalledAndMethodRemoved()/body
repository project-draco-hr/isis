{
  CollectionAddRemoveAndValidateFacetFactory facetFactory=new CollectionAddRemoveAndValidateFacetFactory();
  facetFactory.setSpecificationLookup(reflector);
@SuppressWarnings("hiding") class Order {
  }
class Customer {
    @SuppressWarnings({"rawtypes","unused"}) public Collection getOrders(){
      return null;
    }
    @SuppressWarnings("unused") public void addToOrders(    final Order o){
    }
    @SuppressWarnings("unused") public String validateAddToOrders(    final Order o){
      return null;
    }
  }
  final Method collectionAccessorMethod=findMethod(Customer.class,"getOrders");
  final Method validateAddToMethod=findMethod(Customer.class,"validateAddToOrders",new Class[]{Order.class});
  facetFactory.process(new ProcessMethodContext(Customer.class,collectionAccessorMethod,methodRemover,facetedMethod));
  final Facet facet=facetedMethod.getFacet(CollectionValidateAddToFacet.class);
  assertNotNull(facet);
  assertTrue(facet instanceof CollectionValidateAddToFacetViaMethod);
  final CollectionValidateAddToFacetViaMethod collectionValidateAddToFacetViaMethod=(CollectionValidateAddToFacetViaMethod)facet;
  assertEquals(validateAddToMethod,collectionValidateAddToFacetViaMethod.getMethods().get(0));
  assertTrue(methodRemover.getRemoveMethodMethodCalls().contains(validateAddToMethod));
}
