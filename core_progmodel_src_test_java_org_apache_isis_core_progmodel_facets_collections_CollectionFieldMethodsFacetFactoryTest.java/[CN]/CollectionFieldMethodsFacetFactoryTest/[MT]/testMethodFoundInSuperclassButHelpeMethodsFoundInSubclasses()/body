{
@SuppressWarnings("hiding") class Order {
  }
@edu.umd.cs.findbugs.annotations.SuppressWarnings("UMAC_UNCALLABLE_METHOD_OF_ANONYMOUS_CLASS") class Customer {
    @SuppressWarnings("unused") public Collection<Order> getOrders(){
      return null;
    }
  }
@edu.umd.cs.findbugs.annotations.SuppressWarnings("UMAC_UNCALLABLE_METHOD_OF_ANONYMOUS_CLASS") class CustomerEx extends Customer {
    @SuppressWarnings("unused") public void removeFromOrders(    final Order o){
    }
    @SuppressWarnings("unused") public String validateRemoveFromOrders(    final Order o){
      return null;
    }
  }
  final Method collectionAccessorMethod=findMethod(Customer.class,"getOrders");
  final Method removeFromMethod=findMethod(CustomerEx.class,"removeFromOrders",new Class[]{Order.class});
  final Method validateRemoveFromMethod=findMethod(CustomerEx.class,"validateRemoveFromOrders",new Class[]{Order.class});
  facetFactory.process(CustomerEx.class,collectionAccessorMethod,methodRemover,facetHolder);
  final Facet facet=facetHolder.getFacet(CollectionRemoveFromFacet.class);
  assertNotNull(facet);
  assertTrue(facet instanceof CollectionRemoveFromFacetViaMethod);
  final CollectionRemoveFromFacetViaMethod collectionRemoveFromFacetViaMethod=(CollectionRemoveFromFacetViaMethod)facet;
  assertEquals(removeFromMethod,collectionRemoveFromFacetViaMethod.getMethods().get(0));
  assertTrue(methodRemover.getRemoveMethodMethodCalls().contains(removeFromMethod));
  final Facet facet1=facetHolder.getFacet(CollectionValidateRemoveFromFacet.class);
  assertNotNull(facet1);
  assertTrue(facet1 instanceof CollectionValidateRemoveFromFacetViaMethod);
  final CollectionValidateRemoveFromFacetViaMethod collectionValidateRemoveFromFacetViaMethod=(CollectionValidateRemoveFromFacetViaMethod)facet1;
  assertEquals(validateRemoveFromMethod,collectionValidateRemoveFromFacetViaMethod.getMethods().get(0));
  assertTrue(methodRemover.getRemoveMethodMethodCalls().contains(validateRemoveFromMethod));
}
