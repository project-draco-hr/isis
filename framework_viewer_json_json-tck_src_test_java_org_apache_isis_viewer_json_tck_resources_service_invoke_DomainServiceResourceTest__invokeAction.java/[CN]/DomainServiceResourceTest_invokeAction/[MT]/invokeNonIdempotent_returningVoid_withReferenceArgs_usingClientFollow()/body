{
  final LinkRepresentation linkToSimpleEntity=givenLinkToSimpleEntity(0);
  final RestfulResponse<DomainObjectRepresentation> restfulResponseBefore=client.followT(linkToSimpleEntity);
  final DomainObjectRepresentation simpleEntityBefore=restfulResponseBefore.getEntity();
  final Boolean before=simpleEntityBefore.getProperty("flag").getBoolean("value");
  final JsonRepresentation givenAction=givenAction("simples","toggle");
  final ObjectActionRepresentation actionRepr=givenAction.as(ObjectActionRepresentation.class);
  final LinkRepresentation invokeLink=actionRepr.getInvoke();
  assertThat(invokeLink,is(not(nullValue())));
  final JsonRepresentation args=invokeLink.getArguments();
  assertThat(args.size(),is(1));
  assertThat(args.mapHas("object"),is(true));
  args.mapPut("object",linkToSimpleEntity);
  final RestfulResponse<JsonRepresentation> restfulResponse=client.followT(invokeLink,args);
  assertThat(restfulResponse.getStatus(),is(HttpStatusCode.NO_CONTENT));
  final RestfulResponse<DomainObjectRepresentation> restfulResponseAfter=client.followT(linkToSimpleEntity);
  final DomainObjectRepresentation simpleEntityAfter=restfulResponseAfter.getEntity();
  final Boolean after=simpleEntityAfter.getProperty("flag").getBoolean("value");
  assertThat(after,is(!before));
}
