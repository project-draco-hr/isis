{
  final Method method=processParameterContext.getMethod();
  final int paramNum=processParameterContext.getParamNum();
  final FacetedMethodParameter holder=processParameterContext.getFacetHolder();
  final Class<?>[] parameterTypes=method.getParameterTypes();
  final Annotation[] parameterAnnotations=Annotations.getParameterAnnotations(method)[paramNum];
  for (  final Annotation parameterAnnotation : parameterAnnotations) {
    final Class<?> parameterType=parameterTypes[paramNum];
    if (parameterAnnotation instanceof Optional) {
      final Optional annotation=(Optional)parameterAnnotation;
      FacetUtil.addFacet(optionalValidator.flagIfPresent(MandatoryFacetInvertedByOptionalAnnotationOnParameter.create(annotation,parameterType,holder),processParameterContext));
    }
  }
  for (  final Annotation parameterAnnotation : parameterAnnotations) {
    final Class<?> parameterType=parameterTypes[paramNum];
    if (parameterAnnotation instanceof javax.annotation.Nullable) {
      final Nullable annotation=(Nullable)parameterAnnotation;
      final MandatoryFacet facet=MandatoryFacetInvertedByNullableAnnotationOnParameter.create(annotation,parameterType,holder);
      FacetUtil.addFacet(facet);
      conflictingOptionalityValidator.flagIfConflict(facet,"Conflicting @Nullable with other optionality annotation");
    }
  }
  for (  final Annotation parameterAnnotation : parameterAnnotations) {
    if (parameterAnnotation instanceof Parameter) {
      final Parameter parameter=(Parameter)parameterAnnotation;
      final Class<?> parameterType=parameterTypes[paramNum];
      final MandatoryFacet facet=MandatoryFacetForParameterAnnotation.create(parameter,parameterType,holder);
      FacetUtil.addFacet(facet);
      conflictingOptionalityValidator.flagIfConflict(facet,"Conflicting @Parameter#optionality with other optionality annotation");
    }
  }
}
