{
  final Hashtable<String,String> env=new Hashtable<String,String>(4);
  env.put(Context.INITIAL_CONTEXT_FACTORY,LdapAuthorizationConstants.SERVER_DEFAULT);
  env.put(Context.PROVIDER_URL,ldapProvider);
  if (learn) {
    env.put(Context.SECURITY_PRINCIPAL,"uid=admin, ou=system");
    env.put(Context.SECURITY_CREDENTIALS,"secret");
  }
  DirContext authContext=null;
  try {
    authContext=new InitialDirContext(env);
    if (learn) {
      return bindNames(authContext,role,member);
    }
    return isPermitted(authContext,role,member,flag);
  }
 catch (  final AuthenticationException e) {
    throw new IsisException("Failed to authorise using LDAP",e);
  }
catch (  final NameNotFoundException e) {
    LOG.error(e);
    return false;
  }
catch (  final NamingException e) {
    throw new IsisException("Failed to authorise using LDAP",e);
  }
 finally {
    try {
      if (authContext != null) {
        authContext.close();
      }
    }
 catch (    final NamingException e) {
      throw new IsisException("Failed to authorise using LDAP",e);
    }
  }
}
