{
  final ObjectAdapter resultAdapter=getPublishingServiceInternal().withPublishingSuppressed(new PublishingServiceInternal.Block<ObjectAdapter>(){
    @Override public ObjectAdapter exec(){
      final Object list=invoke();
      return adapterManager.adapterFor(list);
    }
    private Object invoke(){
      try {
        return repositoryMethod.invoke(getRepository(),search);
      }
 catch (      IllegalAccessException|InvocationTargetException e) {
        return Collections.emptyList();
      }
    }
  }
);
  if (CollectionFacet.Utils.getCollectionFacetFromSpec(resultAdapter) == null) {
    return Collections.emptyList();
  }
  final CollectionFacet facet=CollectionFacet.Utils.getCollectionFacetFromSpec(resultAdapter);
  final Iterable<ObjectAdapter> adapterList=facet.iterable(resultAdapter);
  return ObjectAdapter.Util.visibleAdapters(adapterList,interactionInitiatedBy);
}
