{
  servicesList=Collections.emptyList();
  final TemplateImageLoader mockTemplateImageLoader=mockery.mock(TemplateImageLoader.class);
  final UserProfileLoader mockUserProfileLoader=mockery.mock(UserProfileLoader.class);
  final AuthenticationManager mockAuthenticationManager=mockery.mock(AuthenticationManager.class);
  final AuthorizationManager mockAuthorizationManager=mockery.mock(AuthorizationManager.class);
  mockery.checking(new Expectations(){
{
      ignoring(mockTemplateImageLoader);
      ignoring(mockUserProfileLoader);
      ignoring(mockAuthenticationManager);
      ignoring(mockAuthorizationManager);
    }
  }
);
  configuration=new IsisConfigurationDefault();
  SpecificationLoader mockSpecificationLoader;
  JavaReflectorInstaller javaReflectorInstaller=new JavaReflectorInstaller();
  javaReflectorInstaller.setConfiguration(configuration);
  mockSpecificationLoader=javaReflectorInstaller.createReflector();
  ((ObjectReflectorDefault)mockSpecificationLoader).setRuntimeContext(new RuntimeContextFromSession());
  InMemoryPersistenceMechanismInstaller persistenceMechanismInstaller=new InMemoryPersistenceMechanismInstaller();
  persistenceMechanismInstaller.setConfiguration(configuration);
  PersistenceSessionFactory mockPersistenceSessionFactory=persistenceMechanismInstaller.createPersistenceSessionFactory(DeploymentType.PROTOTYPE);
  IsisSessionFactoryDefault sessionFactory=new IsisSessionFactoryDefault(DeploymentType.EXPLORATION,configuration,mockTemplateImageLoader,mockSpecificationLoader,mockAuthenticationManager,mockAuthorizationManager,mockUserProfileLoader,mockPersistenceSessionFactory,servicesList);
  IsisContext context=IsisContextStatic.createRelaxedInstance(sessionFactory);
  IsisContext.setConfiguration(sessionFactory.getConfiguration());
  sessionFactory.init();
  context.openSessionInstance(new SimpleSession("tester",new String[0],"001"));
}
