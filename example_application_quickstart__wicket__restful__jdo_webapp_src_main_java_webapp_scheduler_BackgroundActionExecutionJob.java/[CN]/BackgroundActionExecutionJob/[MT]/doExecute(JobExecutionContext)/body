{
  final BackgroundActionServiceJdoRepository backgroundActionRepo=getService(BackgroundActionServiceJdoRepository.class);
  final List<ReifiableActionJdo> findBackgroundActionsToStart=backgroundActionRepo.findBackgroundActionsToStart();
  for (  final ReifiableActionJdo backgroundAction : findBackgroundActionsToStart) {
    try {
      reifiableActionContext.setReifiableAction(backgroundAction);
      backgroundAction.setStartedAt(Clock.getTimeAsJavaSqlTimestamp());
      final String memento=backgroundAction.getMemento();
      final ActionInvocationMemento aim=backgroundService.newActionInvocationMemento(memento);
      final String actionId=aim.getActionId();
      final Bookmark targetBookmark=aim.getTarget();
      final Object targetObject=bookmarkService.lookup(targetBookmark);
      final ObjectAdapter targetAdapter=adapterFor(targetObject);
      final ObjectSpecification specification=targetAdapter.getSpecification();
      ObjectAction objectAction=findAction(specification,actionId);
      if (objectAction != null) {
        final ObjectAdapter[] argAdapters=argAdaptersFor(aim);
        ObjectAdapter resultAdapter=objectAction.execute(targetAdapter,argAdapters);
        if (resultAdapter != null) {
          Bookmark resultBookmark=bookmarkService.bookmarkFor(resultAdapter.getObject());
          backgroundAction.setResult(resultBookmark);
        }
      }
    }
 catch (    Exception e) {
      backgroundAction.setException(Throwables.getStackTraceAsString(e));
    }
 finally {
      backgroundAction.setCompletedAt(Clock.getTimeAsJavaSqlTimestamp());
    }
  }
}
