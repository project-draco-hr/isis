{
  super.process(processClassContext);
  Class<?> cls=processClassContext.getCls();
  Method[] methods=cls.getMethods();
  for (  Method method : methods) {
    if (method.isSynthetic() || Modifier.isAbstract(method.getModifiers())) {
      processClassContext.removeMethod(method);
    }
    if (method.getName().equals("compareTo")) {
      processClassContext.removeMethod(method);
    }
  }
  final List<Class<?>> serviceClasses=getSpecificationLoader().allServiceClasses();
  for (  Class<? extends Object> serviceClass : serviceClasses) {
    Method[] methods2=processClassContext.getCls().getMethods();
    for (    Method method : methods2) {
      if (injectorMethodEvaluator.isInjectorMethodFor(method,serviceClass)) {
        processClassContext.removeMethod(method);
      }
    }
  }
  removeSuperclassMethods(processClassContext.getCls(),processClassContext);
  for (  final MethodAndParameterTypes mapt : javaLangObjectMethodsToIgnore) {
    processClassContext.removeMethod(MethodScope.OBJECT,mapt.methodName,null,mapt.methodParameters);
  }
  processClassContext.removeMethod(MethodScope.OBJECT,"init",void.class,new Class[0]);
}
