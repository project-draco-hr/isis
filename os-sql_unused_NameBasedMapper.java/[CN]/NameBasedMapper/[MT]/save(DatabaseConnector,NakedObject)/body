{
  NakedObjectSpecification cls=object.getSpecification();
  String table=table(cls);
  StringBuffer sb=new StringBuffer();
  NakedObjectField[] fields=cls.getFields();
  for (int i=0; i < fields.length; i++) {
    if (fields[i].isDerived()) {
      continue;
    }
    Naked fieldValue=object.getField(fields[i]);
    if (fields[i].isCollection()) {
      saveInternalCollection(connector,fields[i],(InternalCollection)fieldValue);
    }
 else {
      if (i > 0) {
        sb.append(", ");
      }
      sb.append(columnName(fields[i]));
      sb.append('=');
      if (fieldValue instanceof NakedObject) {
        if (fieldValue == null) {
          sb.append("NULL");
        }
 else {
          sb.append(primaryKey((NakedObject)fieldValue));
        }
      }
 else       if (fieldValue instanceof NakedValue) {
        ValueMapper mapper=typeMapper.mapperFor(fields[i].getSpecification());
        sb.append(mapper.valueAsDBString((NakedValue)fieldValue));
      }
 else {
        sb.append("NULL");
      }
    }
  }
  String assignments=sb.toString();
  long id=((SerialOid)object.getOid()).getSerialNo();
  String statement="update " + table + " set "+ assignments+ " where ID = "+ id;
  connector.update(statement);
}
