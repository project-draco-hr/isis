{
  final List<Method> methods=Arrays.asList(NormalDomainObject.class.getMethod("titleElement1"),NormalDomainObject.class.getMethod("titleElement2"),NormalDomainObject.class.getMethod("titleElement3"));
  final List<TitleComponent> components=Lists.transform(methods,TitleComponent.FROM_METHOD);
  final TitleFacetViaTitleAnnotation facet=new TitleFacetViaTitleAnnotation(components,mockFacetHolder,mockAdapterManager,mockLocalizationProvider);
  final NormalDomainObject normalPojo=new NormalDomainObject();
  final Sequence sequence=context.sequence("in-title-element-order");
  context.checking(new Expectations(){
{
      allowing(mockObjectAdapter).getObject();
      will(returnValue(normalPojo));
      allowing(mockAdapterManager).getAdapterFor("Normal");
      inSequence(sequence);
      allowing(mockAdapterManager).getAdapterFor("Domain");
      inSequence(sequence);
      allowing(mockAdapterManager).getAdapterFor("Object");
      inSequence(sequence);
    }
  }
);
  final String title=facet.title(mockObjectAdapter,null);
  assertThat(title,is("Normal Domain Object"));
}
