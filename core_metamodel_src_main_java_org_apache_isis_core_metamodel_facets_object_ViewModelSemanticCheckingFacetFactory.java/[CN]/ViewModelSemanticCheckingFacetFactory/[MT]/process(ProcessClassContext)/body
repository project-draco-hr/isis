{
  final Class<?> cls=processClassContext.getCls();
  final DomainObjectLayout domainObjectLayout=Annotations.getAnnotation(cls,DomainObjectLayout.class);
  final ViewModelLayout viewModelLayout=Annotations.getAnnotation(cls,ViewModelLayout.class);
  final DomainObject domainObject=Annotations.getAnnotation(cls,DomainObject.class);
  final ViewModel viewModel=Annotations.getAnnotation(cls,ViewModel.class);
  final boolean implementsViewModel=org.apache.isis.applib.ViewModel.class.isAssignableFrom(cls);
  final boolean implementsRecreatableDomainObject=org.apache.isis.applib.RecreatableDomainObject.class.isAssignableFrom(cls);
  final boolean annotatedWithDomainObjectLayout=domainObjectLayout != null;
  final boolean annotatedWithViewModelLayout=viewModelLayout != null;
  final boolean annotatedWithDomainObject=domainObject != null;
  final boolean annotatedWithViewModel=viewModel != null;
  if (implementsViewModel && implementsRecreatableDomainObject) {
    failures.add("Inconsistent view model / domain object semantics; %s should not implement both %s and %s interfaces (implement one or the other)",cls.getName(),org.apache.isis.applib.ViewModel.class.getSimpleName(),org.apache.isis.applib.RecreatableDomainObject.class.getSimpleName());
  }
  if (implementsViewModel && annotatedWithDomainObject) {
    failures.add("Inconsistent view model / domain object semantics; %1$s should not implement %2$s and be annotated with @%3$s (annotate with %4$s instead of %2$s, or implement %6s instead of %2$s)",cls.getName(),org.apache.isis.applib.ViewModel.class.getSimpleName(),DomainObject.class.getSimpleName(),ViewModel.class.getSimpleName(),RecreatableDomainObject.class.getSimpleName());
  }
  if (implementsViewModel && annotatedWithDomainObjectLayout) {
    failures.add("Inconsistent view model / domain object semantics; %1$s should not implement %2$s and be annotated with @%3$s (annotate with @%4$s instead of %3$s, or implement %5$s instead of %2$s)",cls.getName(),org.apache.isis.applib.ViewModel.class.getSimpleName(),DomainObjectLayout.class.getSimpleName(),ViewModelLayout.class.getSimpleName(),RecreatableDomainObject.class.getSimpleName());
  }
  if (annotatedWithViewModel && implementsRecreatableDomainObject) {
    failures.add("Inconsistent view model / domain object semantics; %1$s should not be annotated with @%2$s but implement @%3$s (implement %4$s instead of %3$s, or annotate with @%5$s with nature of %6s, %7s or %8s instead of annotating with @%2$s)",cls.getName(),org.apache.isis.applib.annotation.ViewModel.class.getSimpleName(),org.apache.isis.applib.RecreatableDomainObject.class.getSimpleName(),org.apache.isis.applib.ViewModel.class.getName(),org.apache.isis.applib.annotation.DomainObject.class.getName(),Nature.VIEW_MODEL,Nature.INMEMORY_ENTITY,Nature.EXTERNAL_ENTITY);
  }
  if (annotatedWithViewModel && annotatedWithDomainObject) {
    failures.add("Inconsistent view model / domain object semantics; %1$s should not be annotated with both @%2$s and @%3$s (annotate with one or the other)",cls.getName(),org.apache.isis.applib.annotation.ViewModel.class.getSimpleName(),org.apache.isis.applib.annotation.DomainObject.class.getSimpleName());
  }
  if (annotatedWithViewModel && annotatedWithDomainObjectLayout) {
    failures.add("Inconsistent view model / domain object semantics; %1$s should not be annotated with both @%2$s and @%3$s (annotate with @%4$s instead of @%3$s, or annotate with @%5$s instead of @%2$s)",cls.getName(),org.apache.isis.applib.annotation.ViewModel.class.getSimpleName(),DomainObjectLayout.class.getSimpleName(),ViewModelLayout.class.getSimpleName(),DomainObject.class.getSimpleName());
  }
  if (annotatedWithViewModelLayout && implementsRecreatableDomainObject) {
    failures.add("Inconsistent view model / domain object semantics; %1$s should not be annotated with @%2$s but implement @%3$s (implement %4$s instead of %3$s, or annotate with %5$s instead of %2$s)",cls.getName(),org.apache.isis.applib.annotation.ViewModelLayout.class.getSimpleName(),RecreatableDomainObject.class.getSimpleName(),org.apache.isis.applib.ViewModel.class.getSimpleName(),DomainObjectLayout.class.getSimpleName());
  }
  if (annotatedWithViewModelLayout && annotatedWithDomainObject) {
    failures.add("Inconsistent view model / domain object semantics; %1$s should not be annotated with @%2$s and also be annotated with @%3$s (annotate with @%4$s instead of @%3$s, or instead annotate with @%5$s instead of @%2$s)",cls.getName(),org.apache.isis.applib.annotation.ViewModelLayout.class.getSimpleName(),DomainObject.class.getSimpleName(),org.apache.isis.applib.annotation.ViewModel.class.getSimpleName(),DomainObjectLayout.class.getSimpleName());
  }
  if (annotatedWithViewModelLayout && annotatedWithDomainObjectLayout) {
    failures.add("Inconsistent view model / domain object semantics; %1$s should not be annotated with both @%2$s and @%3$s (annotate with one or the other)",cls.getName(),org.apache.isis.applib.annotation.ViewModel.class.getSimpleName(),DomainObjectLayout.class.getSimpleName(),ViewModelLayout.class.getSimpleName());
  }
  if (annotatedWithDomainObject && (domainObject.nature() == Nature.NOT_SPECIFIED || domainObject.nature() == Nature.JDO_ENTITY) && implementsRecreatableDomainObject) {
    failures.add("Inconsistent view model / domain object semantics; %1$s should not be annotated with @%2$s with nature of %3$s and also implement %4$s (specify a nature of %5$s, %6$s or %7$s)",cls.getName(),DomainObject.class.getSimpleName(),domainObject.nature(),org.apache.isis.applib.RecreatableDomainObject.class.getSimpleName(),Nature.EXTERNAL_ENTITY,Nature.INMEMORY_ENTITY,Nature.VIEW_MODEL);
  }
}
