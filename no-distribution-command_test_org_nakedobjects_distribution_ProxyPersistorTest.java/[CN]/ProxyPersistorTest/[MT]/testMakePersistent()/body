{
  TestObjectBuilder referencedObject;
  referencedObject=new TestObjectBuilder(new TestPojo());
  referencedObject.setResolveState(ResolveState.TRANSIENT);
  TestValue value=new TestValue(new TestPojoValuePeer());
  TestObjectBuilder obj;
  obj=new TestObjectBuilder(new TestPojo());
  obj.setResolveState(ResolveState.TRANSIENT);
  obj.setValueField("value",value);
  obj.setReferenceField("reference",referencedObject);
  obj.init(system);
  ObjectData field2=new DummyObjectData(new DummyOid(345),"type",true,new DummyVersion(456));
  field2.setFieldContent(new Data[]{});
  DummyObjectData transientData=new DummyObjectData(new DummyOid(123),"type",true,new DummyVersion(456));
  transientData.setFieldContent(new Data[]{null,field2});
  DummyValueData dummyValueData=new DummyValueData("","value type");
  dataFactoryControl.expectAndReturn(dataFactoryHelper.createObjectData(null,TestPojo.class.getName(),true,null),transientData);
  dataFactoryControl.expectAndReturn(dataFactoryHelper.createObjectData(null,TestPojo.class.getName(),true,null),transientData);
  dataFactoryControl.expectAndDefaultReturn(dataFactoryHelper.createValueData(value.toString(),null),dummyValueData);
  dataFactoryControl.replay();
  DummyObjectData updateData=new DummyObjectData(new DummyOid(123),"type",true,new DummyVersion(456));
  distributionControl.expectAndReturn(distribution.executeClientAction(null,new ObjectData[]{transientData},new ObjectData[0],new ReferenceData[0]),new ObjectData[]{updateData});
  distributionControl.replay();
  NakedObject transientObject=obj.getAdapter();
  persistor.startTransaction();
  persistor.makePersistent(transientObject);
  persistor.endTransaction();
  assertEquals(new DummyOid(123),transientObject.getOid());
  assertEquals(new DummyOid(345),referencedObject.getAdapter().getOid());
  distributionControl.verify();
}
