{
  if (LOG.isDebugEnabled()) {
    LOG.debug("installing " + this.getClass().getName());
  }
  final PojoRecreator pojoRecreator=createPojoRecreator(getConfiguration());
  final ObjectAdapterFactory adapterFactory=createAdapterFactory(getConfiguration());
  final ObjectFactory objectFactory=createObjectFactory(getConfiguration());
  final IdentifierGenerator identifierGenerator=createIdentifierGenerator(getConfiguration());
  final RuntimeContext runtimeContext=createRuntimeContext(getConfiguration());
  final DomainObjectContainer container=createContainer(getConfiguration());
  final ServicesInjectorSpi servicesInjector=createServicesInjector(getConfiguration());
  final List<Object> serviceList=persistenceSessionFactory.getServices();
  ensureThatArg(pojoRecreator,is(not(nullValue())));
  ensureThatArg(adapterFactory,is(not(nullValue())));
  ensureThatArg(objectFactory,is(not(nullValue())));
  ensureThatArg(identifierGenerator,is(not(nullValue())));
  ensureThatArg(runtimeContext,is(not(nullValue())));
  ensureThatArg(container,is(not(nullValue())));
  ensureThatArg(serviceList,is(not(nullValue())));
  ensureThatArg(servicesInjector,is(not(nullValue())));
  runtimeContext.injectInto(container);
  runtimeContext.setContainer(container);
  servicesInjector.setContainer(container);
  servicesInjector.setServices(serviceList);
  getSpecificationLoader().injectInto(runtimeContext);
  return createPersistenceSession(persistenceSessionFactory,adapterFactory,objectFactory,pojoRecreator,identifierGenerator,servicesInjector);
}
