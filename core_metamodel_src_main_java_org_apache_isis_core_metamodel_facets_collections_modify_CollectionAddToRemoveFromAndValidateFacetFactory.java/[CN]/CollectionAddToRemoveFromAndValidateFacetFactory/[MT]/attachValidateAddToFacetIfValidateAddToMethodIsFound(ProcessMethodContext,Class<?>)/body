{
  final Method getMethod=processMethodContext.getMethod();
  final String capitalizedName=StringExtensions.asJavaBaseName(getMethod.getName());
  final Class<?> cls=processMethodContext.getCls();
  final Class<?>[] paramTypes=MethodFinderUtils.paramTypesOrNull(collectionType);
  Method validateAddToMethod=MethodFinderUtils.findMethod(cls,MethodScope.OBJECT,MethodPrefixConstants.VALIDATE_ADD_TO_PREFIX + capitalizedName,new Class<?>[]{String.class,TranslatableString.class},paramTypes);
  if (validateAddToMethod == null) {
    validateAddToMethod=MethodFinderUtils.findMethod(cls,MethodScope.OBJECT,MethodPrefixConstants.VALIDATE_ADD_TO_PREFIX_2 + capitalizedName,new Class<?>[]{String.class,TranslatableString.class},MethodFinderUtils.paramTypesOrNull(collectionType));
  }
  if (validateAddToMethod == null) {
    return;
  }
  processMethodContext.removeMethod(validateAddToMethod);
  final IdentifiedHolder facetHolder=processMethodContext.getFacetHolder();
  final TranslationService translationService=servicesInjector.lookupService(TranslationService.class);
  final String translationContext=facetHolder.getIdentifier().toClassAndNameIdentityString();
  final CollectionValidateAddToFacetViaMethod facet=new CollectionValidateAddToFacetViaMethod(validateAddToMethod,translationService,translationContext,facetHolder);
  FacetUtil.addFacet(facet);
}
