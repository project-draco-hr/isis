{
  final Method getMethod=processMethodContext.getMethod();
  final String capitalizedName=StringExtensions.asJavaBaseName(getMethod.getName());
  final Class<?> cls=processMethodContext.getCls();
  final Class<?>[] paramTypes=MethodFinderUtils.paramTypesOrNull(collectionType);
  Method validateRemoveFromMethod=MethodFinderUtils.findMethod(cls,MethodScope.OBJECT,MethodPrefixConstants.VALIDATE_REMOVE_FROM_PREFIX + capitalizedName,new Class<?>[]{String.class,TranslatableString.class},paramTypes);
  if (validateRemoveFromMethod == null) {
    validateRemoveFromMethod=MethodFinderUtils.findMethod(cls,MethodScope.OBJECT,MethodPrefixConstants.VALIDATE_REMOVE_FROM_PREFIX_2 + capitalizedName,new Class<?>[]{String.class,TranslatableString.class},MethodFinderUtils.paramTypesOrNull(collectionType));
  }
  if (validateRemoveFromMethod == null) {
    return;
  }
  processMethodContext.removeMethod(validateRemoveFromMethod);
  final IdentifiedHolder facetHolder=processMethodContext.getFacetHolder();
  final TranslationService translationService=servicesInjector.lookupService(TranslationService.class);
  final String translationContext=facetHolder.getIdentifier().toClassAndNameIdentityString();
  final CollectionValidateRemoveFromFacetViaMethod facet=new CollectionValidateRemoveFromFacetViaMethod(validateRemoveFromMethod,translationService,translationContext,facetHolder);
  FacetUtil.addFacet(facet);
}
