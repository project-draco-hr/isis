{
  final WebMarkupContainer container=new WebMarkupContainer(BOOKMARK_LIST);
  container.setOutputMarkupId(true);
  add(container);
  final BookmarkedPagesModel bookmarkedPagesModel=getModel();
  final ListView<PageParameters> listView=new ListView<PageParameters>(BOOKMARKED_PAGE_ITEM,bookmarkedPagesModel){
    private static final long serialVersionUID=1L;
    @Override protected void populateItem(    ListItem<PageParameters> item){
      final PageParameters pageParameters=item.getModelObject();
      final PageType pageType=PageParameterNames.PAGE_TYPE.getEnumFrom(pageParameters,PageType.class);
      final Class<? extends Page> pageClass=pageClassRegistry.getPageClass(pageType);
      final AbstractLink link=Links.newBookmarkablePageLink(BOOKMARKED_PAGE_LINK,pageParameters,pageClass);
      link.add(new Label(BOOKMARKED_PAGE_TITLE,BookmarkedPagesModel.titleFrom(pageParameters)));
      item.add(link);
      link.setEnabled(!bookmarkedPagesModel.isCurrent(pageParameters));
    }
  }
;
  container.add(listView);
  if (!getModel().isEmpty()) {
    final AjaxLink<Void> ajaxLink=new AjaxLink<Void>(CLEAR_BOOKMARKS){
      private static final long serialVersionUID=1L;
      @Override public void onClick(      AjaxRequestTarget target){
        BookmarkedPagesPanel.this.getModel().clear();
        setEnabled(false);
        target.add(container,this);
      }
    }
;
    ajaxLink.setOutputMarkupId(true);
    add(ajaxLink);
  }
 else {
    permanentlyHide(CLEAR_BOOKMARKS);
  }
}
