{
  final BS3Grid bs3Grid=(BS3Grid)grid;
  final LinkedHashMap<String,PropertyLayoutData> propertyIds=bs3Grid.getAllPropertiesById();
  final LinkedHashMap<String,CollectionLayoutData> collectionIds=bs3Grid.getAllCollectionsById();
  final LinkedHashMap<String,ActionLayoutData> actionIds=bs3Grid.getAllActionsById();
  final List<String> gridIds=Lists.newArrayList();
  final LinkedHashMap<String,BS3Row> rowIds=Maps.newLinkedHashMap();
  final LinkedHashMap<String,BS3Col> colIds=Maps.newLinkedHashMap();
  final LinkedHashMap<String,FieldSet> fieldSetIds=Maps.newLinkedHashMap();
  final AtomicReference<Boolean> duplicateIdDetected=new AtomicReference<>(false);
  bs3Grid.visit(new BS3Grid.VisitorAdapter(){
    @Override public void visit(    final BS3Row bs3Row){
      final String id=bs3Row.getId();
      if (id == null) {
        return;
      }
      if (gridIds.contains(id)) {
        bs3Row.setMetadataError("There is another element in the grid with this id");
        duplicateIdDetected.set(true);
        return;
      }
      rowIds.put(id,bs3Row);
      gridIds.add(id);
    }
    @Override public void visit(    final BS3Col bs3Col){
      final String id=bs3Col.getId();
      if (id == null) {
        return;
      }
      if (gridIds.contains(id)) {
        bs3Col.setMetadataError("There is another element in the grid with this id");
        duplicateIdDetected.set(true);
        return;
      }
      colIds.put(id,bs3Col);
      gridIds.add(id);
    }
    @Override public void visit(    final FieldSet fieldSet){
      String id=fieldSet.getId();
      if (id == null) {
        final String name=fieldSet.getName();
        fieldSet.setId(id=asId(name));
      }
      if (gridIds.contains(id)) {
        fieldSet.setMetadataError("There is another element in the grid with this id");
        duplicateIdDetected.set(true);
        return;
      }
      fieldSetIds.put(id,fieldSet);
      gridIds.add(id);
    }
  }
);
  if (duplicateIdDetected.get()) {
    return false;
  }
  final AtomicReference<BS3Col> colForUnreferencedActionsRef=new AtomicReference<>();
  final AtomicReference<BS3Col> colForUnreferencedCollectionsRef=new AtomicReference<>();
  final AtomicReference<FieldSet> fieldSetForUnreferencedActionsRef=new AtomicReference<>();
  final AtomicReference<FieldSet> fieldSetForUnreferencedPropertiesRef=new AtomicReference<>();
  final AtomicReference<BS3TabGroup> tabGroupForUnreferencedCollectionsRef=new AtomicReference<>();
  bs3Grid.visit(new BS3Grid.VisitorAdapter(){
    @Override public void visit(    final BS3Col bs3Col){
      if (isSet(bs3Col.isUnreferencedActions())) {
        if (colForUnreferencedActionsRef.get() != null) {
          bs3Col.setMetadataError("More than one col with 'unreferencedActions' attribute set");
        }
 else         if (fieldSetForUnreferencedActionsRef.get() != null) {
          bs3Col.setMetadataError("Already found a fieldset with 'unreferencedActions' attribute set");
        }
 else {
          colForUnreferencedActionsRef.set(bs3Col);
        }
      }
      if (isSet(bs3Col.isUnreferencedCollections())) {
        if (colForUnreferencedCollectionsRef.get() != null) {
          bs3Col.setMetadataError("More than one col with 'unreferencedCollections' attribute set");
        }
 else         if (tabGroupForUnreferencedCollectionsRef.get() != null) {
          bs3Col.setMetadataError("Already found a tabgroup with 'unreferencedCollections' attribute set");
        }
 else {
          colForUnreferencedCollectionsRef.set(bs3Col);
        }
      }
    }
    @Override public void visit(    final FieldSet fieldSet){
      if (isSet(fieldSet.isUnreferencedActions())) {
        if (fieldSetForUnreferencedActionsRef.get() != null) {
          fieldSet.setMetadataError("More than one fieldset with 'unreferencedActions' attribute set");
        }
 else         if (colForUnreferencedActionsRef.get() != null) {
          fieldSet.setMetadataError("Already found a column with 'unreferencedActions' attribute set");
        }
 else {
          fieldSetForUnreferencedActionsRef.set(fieldSet);
        }
      }
      if (isSet(fieldSet.isUnreferencedProperties())) {
        if (fieldSetForUnreferencedPropertiesRef.get() != null) {
          fieldSet.setMetadataError("More than one col with 'unreferencedProperties' attribute set");
        }
 else {
          fieldSetForUnreferencedPropertiesRef.set(fieldSet);
        }
      }
    }
    @Override public void visit(    final BS3TabGroup bs3TabGroup){
      if (isSet(bs3TabGroup.isUnreferencedCollections())) {
        if (tabGroupForUnreferencedCollectionsRef.get() != null) {
          bs3TabGroup.setMetadataError("More than one tabgroup with 'unreferencedCollections' attribute set");
        }
 else         if (colForUnreferencedCollectionsRef.get() != null) {
          bs3TabGroup.setMetadataError("Already found a column with 'unreferencedCollections' attribute set");
        }
 else {
          tabGroupForUnreferencedCollectionsRef.set(bs3TabGroup);
        }
      }
    }
  }
);
  if (colForUnreferencedActionsRef.get() == null && fieldSetForUnreferencedActionsRef.get() == null) {
    bs3Grid.getMetadataErrors().add("No column and also no fieldset found with the 'unreferencedActions' attribute set");
  }
  if (fieldSetForUnreferencedPropertiesRef.get() == null) {
    bs3Grid.getMetadataErrors().add("No fieldset found with the 'unreferencedProperties' attribute set");
  }
  if (colForUnreferencedCollectionsRef.get() == null && tabGroupForUnreferencedCollectionsRef.get() == null) {
    bs3Grid.getMetadataErrors().add("No column and also no tabgroup found with the 'unreferencedCollections' attribute set");
  }
  if (colForUnreferencedActionsRef.get() == null && fieldSetForUnreferencedActionsRef.get() == null || fieldSetForUnreferencedPropertiesRef.get() == null || colForUnreferencedCollectionsRef.get() == null && tabGroupForUnreferencedCollectionsRef.get() == null) {
    return false;
  }
  final Tuple<List<String>> propertyIdTuple=surplusAndMissing(propertyIds.keySet(),oneToOneAssociationById.keySet());
  final List<String> surplusPropertyIds=propertyIdTuple.first;
  final List<String> missingPropertyIds=propertyIdTuple.second;
  for (  String surplusPropertyId : surplusPropertyIds) {
    propertyIds.get(surplusPropertyId).setMetadataError("No such property");
  }
  final Map<String,Set<String>> boundAssociationIdsByFieldSetId=Maps.newHashMap();
  for (  FieldSet fieldSet : fieldSetIds.values()) {
    final String fieldSetId=fieldSet.getId();
    Set<String> boundAssociationIds=boundAssociationIdsByFieldSetId.get(fieldSetId);
    if (boundAssociationIds == null) {
      boundAssociationIds=Sets.newLinkedHashSet();
      boundAssociationIds.addAll(FluentIterable.from(fieldSet.getProperties()).transform(new Function<PropertyLayoutData,String>(){
        @Override public String apply(        @Nullable final PropertyLayoutData propertyLayoutData){
          return propertyLayoutData.getId();
        }
      }
).toList());
      boundAssociationIdsByFieldSetId.put(fieldSetId,boundAssociationIds);
    }
  }
  for (  OneToOneAssociation otoa : oneToOneAssociationById.values()) {
    final MemberOrderFacet memberOrderFacet=otoa.getFacet(MemberOrderFacet.class);
    if (memberOrderFacet != null) {
      final String id=asId(memberOrderFacet.name());
      if (fieldSetIds.containsKey(id)) {
        Set<String> boundAssociationIds=boundAssociationIdsByFieldSetId.get(id);
        if (boundAssociationIds == null) {
          boundAssociationIds=Sets.newLinkedHashSet();
          boundAssociationIdsByFieldSetId.put(id,boundAssociationIds);
        }
        boundAssociationIds.add(otoa.getId());
      }
    }
  }
  if (!missingPropertyIds.isEmpty()) {
    final List<String> unboundPropertyIds=Lists.newArrayList(missingPropertyIds);
    for (    final String fieldSetId : boundAssociationIdsByFieldSetId.keySet()) {
      final Set<String> boundPropertyIds=boundAssociationIdsByFieldSetId.get(fieldSetId);
      unboundPropertyIds.removeAll(boundPropertyIds);
    }
    for (    final String fieldSetId : boundAssociationIdsByFieldSetId.keySet()) {
      final FieldSet fieldSet=fieldSetIds.get(fieldSetId);
      final Set<String> associationIds=boundAssociationIdsByFieldSetId.get(fieldSetId);
      final List<OneToOneAssociation> associations=Lists.newArrayList(FluentIterable.from(associationIds).transform(new Function<String,OneToOneAssociation>(){
        @Nullable @Override public OneToOneAssociation apply(        final String propertyId){
          return oneToOneAssociationById.get(propertyId);
        }
      }
).filter(Predicates.<OneToOneAssociation>notNull()));
      associations.sort(byMemberOrderSequence());
      addPropertiesTo(fieldSet,FluentIterable.from(associations).transform(ObjectAssociation.Functions.toId()).toList());
    }
    if (!unboundPropertyIds.isEmpty()) {
      final FieldSet fieldSet=fieldSetForUnreferencedPropertiesRef.get();
      if (fieldSet != null) {
        addPropertiesTo(fieldSet,unboundPropertyIds);
      }
    }
  }
  final Tuple<List<String>> collectionIdTuple=surplusAndMissing(collectionIds.keySet(),oneToManyAssociationById.keySet());
  final List<String> surplusCollectionIds=collectionIdTuple.first;
  final List<String> missingCollectionIds=collectionIdTuple.second;
  for (  String surplusCollectionId : surplusCollectionIds) {
    collectionIds.get(surplusCollectionId).setMetadataError("No such collection");
  }
  if (!missingCollectionIds.isEmpty()) {
    List<OneToManyAssociation> sortedCollections=Lists.newArrayList(FluentIterable.from(missingCollectionIds).transform(new Function<String,OneToManyAssociation>(){
      @Nullable @Override public OneToManyAssociation apply(      @Nullable final String collectionId){
        return oneToManyAssociationById.get(collectionId);
      }
    }
).toSortedList(byMemberOrderSequence()));
    final ImmutableList<String> sortedMissingCollectionIds=FluentIterable.from(sortedCollections).transform(ObjectAssociation.Functions.toId()).toList();
    final BS3TabGroup bs3TabGroup=tabGroupForUnreferencedCollectionsRef.get();
    if (bs3TabGroup != null) {
      addCollectionsTo(bs3TabGroup,sortedMissingCollectionIds,objectSpec);
    }
 else {
      final BS3Col bs3Col=colForUnreferencedCollectionsRef.get();
      if (bs3Col != null) {
        addCollectionsTo(bs3Col,sortedMissingCollectionIds);
      }
    }
  }
  final Tuple<List<String>> actionIdTuple=surplusAndMissing(actionIds.keySet(),objectActionById.keySet());
  final List<String> surplusActionIds=actionIdTuple.first;
  final List<String> missingActionIds=FluentIterable.from(actionIdTuple.second).filter(new Predicate<String>(){
    @Override public boolean apply(    final String actionId){
      final ObjectAction oa=objectActionById.get(actionId);
      final MemberOrderFacet memberOrderFacet=oa.getFacet(MemberOrderFacet.class);
      if (memberOrderFacet == null) {
        return true;
      }
      final String memberOrderName=memberOrderFacet.name();
      if (memberOrderName == null) {
        return true;
      }
      final String id=asId(memberOrderName);
      if (oneToOneAssociationById.containsKey(id)) {
        return false;
      }
      if (oneToManyAssociationById.containsKey(id)) {
        return false;
      }
      final Set<String> boundAssociationIds=boundAssociationIdsByFieldSetId.get(id);
      if (boundAssociationIds != null && !boundAssociationIds.isEmpty()) {
        final ActionLayoutData actionLayoutData=new ActionLayoutData(actionId);
        actionLayoutData.setPosition(ActionLayout.Position.PANEL_DROPDOWN);
        fieldSetIds.get(id).getActions().add(actionLayoutData);
        return false;
      }
      return true;
    }
  }
).toList();
  for (  String surplusActionId : surplusActionIds) {
    actionIds.get(surplusActionId).setMetadataError("No such action");
  }
  if (!missingActionIds.isEmpty()) {
    final BS3Col bs3Col=colForUnreferencedActionsRef.get();
    if (bs3Col != null) {
      addActionsTo(bs3Col,missingActionIds);
    }
 else {
      final FieldSet fieldSet=fieldSetForUnreferencedActionsRef.get();
      if (fieldSet != null) {
        addActionsTo(fieldSet,missingActionIds);
      }
    }
  }
  return true;
}
