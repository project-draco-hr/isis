{
  final BS3Grid bs3Grid=(BS3Grid)grid;
  final LinkedHashMap<String,PropertyLayoutData> propertyIds=bs3Grid.getAllPropertiesById();
  final LinkedHashMap<String,CollectionLayoutData> collectionIds=bs3Grid.getAllCollectionsById();
  final LinkedHashMap<String,ActionLayoutData> actionIds=bs3Grid.getAllActionsById();
  final LinkedHashMap<String,BS3Row> rowIds=Maps.newLinkedHashMap();
  final LinkedHashMap<String,BS3Col> colIds=Maps.newLinkedHashMap();
  final AtomicReference<Boolean> duplicateIdDetected=new AtomicReference<>(false);
  bs3Grid.visit(new BS3Grid.VisitorAdapter(){
    @Override public void visit(    final BS3Row bs3Row){
      final String id=bs3Row.getId();
      if (id == null) {
        return;
      }
      if (rowIds.containsKey(id) || colIds.containsKey(id)) {
        bs3Row.setMetadataError("There is another col with this id");
        duplicateIdDetected.set(true);
        return;
      }
      rowIds.put(id,bs3Row);
    }
    @Override public void visit(    final BS3Col bs3Col){
      final String id=bs3Col.getId();
      if (id == null) {
        return;
      }
      if (rowIds.containsKey(id) || colIds.containsKey(id)) {
        bs3Col.setMetadataError("There is another col with this id");
        duplicateIdDetected.set(true);
        return;
      }
      colIds.put(id,bs3Col);
    }
  }
);
  if (duplicateIdDetected.get()) {
    return false;
  }
  final AtomicReference<BS3Col> colForUnreferencedActionsRef=new AtomicReference<>();
  final AtomicReference<BS3Col> colForUnreferencedPropertiesRef=new AtomicReference<>();
  final AtomicReference<FieldSet> fieldSetForUnreferencedPropsRef=new AtomicReference<>();
  final AtomicReference<BS3Col> colForUnreferencedCollectionsRef=new AtomicReference<>();
  bs3Grid.visit(new BS3Grid.VisitorAdapter(){
    @Override public void visit(    final BS3Col bs3Col){
      if (bs3Col.isUnreferencedActions()) {
        if (colForUnreferencedActionsRef.get() != null) {
          bs3Col.setMetadataError("More than one col with 'unreferencedActions' attribute set");
        }
 else {
          colForUnreferencedActionsRef.set(bs3Col);
        }
      }
      if (bs3Col.isUnreferencedProperties()) {
        if (colForUnreferencedPropertiesRef.get() != null) {
          bs3Col.setMetadataError("More than one col with 'unreferencedProperties' attribute set");
        }
 else {
          final List<FieldSet> fieldSets=bs3Col.getFieldSets();
          for (          FieldSet fieldSet : fieldSets) {
            if (fieldSet.getName().equals(MemberGroupLayoutFacet.DEFAULT_GROUP)) {
              fieldSetForUnreferencedPropsRef.set(fieldSet);
            }
          }
          colForUnreferencedPropertiesRef.set(bs3Col);
        }
      }
      if (bs3Col.isUnreferencedCollections()) {
        if (colForUnreferencedCollectionsRef.get() != null) {
          bs3Col.setMetadataError("More than one col with 'unreferencedCollections' attribute set");
        }
 else {
          colForUnreferencedCollectionsRef.set(bs3Col);
        }
      }
    }
  }
);
  if (colForUnreferencedActionsRef.get() == null || colForUnreferencedPropertiesRef.get() == null || colForUnreferencedCollectionsRef.get() == null) {
    return false;
  }
  final Tuple<List<String>> propertyIdTuple=surplusAndMissing(propertyIds.keySet(),oneToOneAssociationById.keySet());
  final List<String> surplusPropertyIds=propertyIdTuple.first;
  final List<String> missingPropertyIds=propertyIdTuple.second;
  for (  String surplusPropertyId : surplusPropertyIds) {
    propertyIds.get(surplusPropertyId).setMetadataError("No such property");
  }
  if (!missingPropertyIds.isEmpty()) {
    final BS3Col bs3Col=colForUnreferencedPropertiesRef.get();
    if (bs3Col != null) {
      boolean wasSet=fieldSetForUnreferencedPropsRef.compareAndSet(null,new FieldSet(MemberGroupLayoutFacet.DEFAULT_GROUP));
      final FieldSet fieldSetForUnref=fieldSetForUnreferencedPropsRef.get();
      if (wasSet) {
        fieldSetForUnref.setOwner(bs3Col);
        bs3Col.getFieldSets().add(fieldSetForUnref);
      }
      for (      final String propertyId : missingPropertyIds) {
        bs3Col.getFieldSets().get(0).getProperties().add(new PropertyLayoutData(propertyId));
      }
    }
  }
  final Tuple<List<String>> collectionIdTuple=surplusAndMissing(collectionIds.keySet(),oneToManyAssociationById.keySet());
  final List<String> surplusCollectionIds=collectionIdTuple.first;
  final List<String> missingCollectionIds=collectionIdTuple.second;
  for (  String surplusCollectionId : surplusCollectionIds) {
    collectionIds.get(surplusCollectionId).setMetadataError("No such collection");
  }
  if (!missingCollectionIds.isEmpty()) {
    final BS3Col bs3Col=colForUnreferencedCollectionsRef.get();
    if (bs3Col != null) {
      final BS3TabGroup tabGroup=new BS3TabGroup();
      tabGroup.setOwner(bs3Col);
      bs3Col.getTabGroups().add(tabGroup);
      for (      final String collectionId : missingCollectionIds) {
        final BS3Tab bs3Tab=new BS3Tab();
        tabGroup.getTabs().add(bs3Tab);
        FCColumn left=new FCColumn(12);
        bs3Tab.setOwner(tabGroup);
        final CollectionLayoutData layoutMetadata=new CollectionLayoutData(collectionId);
        layoutMetadata.setDefaultView("table");
        left.getCollections().add(layoutMetadata);
      }
    }
  }
  final Tuple<List<String>> actionIdTuple=surplusAndMissing(actionIds.keySet(),objectActionById.keySet());
  final List<String> surplusActionIds=actionIdTuple.first;
  final List<String> missingActionIds=actionIdTuple.second;
  for (  String surplusActionId : surplusActionIds) {
    actionIds.get(surplusActionId).setMetadataError("No such action");
  }
  if (!missingActionIds.isEmpty()) {
    final BS3Col bs3Col=colForUnreferencedActionsRef.get();
    if (bs3Col != null) {
      for (      String actionId : missingActionIds) {
        List<ActionLayoutData> actions=bs3Col.getActions();
        if (actions == null) {
          actions=Lists.newArrayList();
          bs3Col.setActions(actions);
        }
        actions.add(new ActionLayoutData(actionId));
      }
    }
  }
  return true;
}
