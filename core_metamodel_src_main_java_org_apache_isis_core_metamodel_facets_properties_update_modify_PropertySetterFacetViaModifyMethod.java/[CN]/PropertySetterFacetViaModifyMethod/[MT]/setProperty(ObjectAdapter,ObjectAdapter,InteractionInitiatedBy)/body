{
  final CommandContext commandContext=getCommandContext();
  final Command command=commandContext.getCommand();
  final InteractionContext interactionContext=getInteractionContext();
  final Interaction interaction=interactionContext.getInteraction();
  command.setExecutor(Command.Executor.USER);
  command.setTarget(CommandUtil.bookmarkFor(targetAdapter));
  command.setTargetClass(CommandUtil.targetClassNameFor(targetAdapter));
  command.setTargetAction(Command.ACTION_IDENTIFIER_FOR_EDIT);
  command.setMemberIdentifier(Command.ACTION_IDENTIFIER_FOR_EDIT);
  command.setExecuteIn(org.apache.isis.applib.annotation.Command.ExecuteIn.FOREGROUND);
  command.setPersistence(org.apache.isis.applib.annotation.Command.Persistence.IF_HINTED);
  final Object target=ObjectAdapter.Util.unwrap(targetAdapter);
  final Object argValue=ObjectAdapter.Util.unwrap(valueAdapter);
  final Interaction.PropertyArgs propertyArgs=new Interaction.PropertyArgs(command,target,argValue);
  final Interaction.MemberCallable<?> callable=new Interaction.MemberCallable<Interaction.PropertyArgs>(){
    @Override public Object call(    final Interaction.PropertyArgs propertyArgs){
      return ObjectAdapter.InvokeUtils.invoke(method,targetAdapter,valueAdapter);
    }
  }
;
  interaction.execute(callable,propertyArgs,getClockService());
}
