{
  if (parentElement.getOwnerDocument() == null) {
    throw new IllegalArgumentException("parentElement must have owner document");
  }
  NakedObjectSpecification nakedClass=object.getSpecification();
  Document doc=parentElement.getOwnerDocument();
  String qname=namespaceManager.getQname(nakedClass);
  String nsUri=namespaceManager.getUri(nakedClass);
  String nsAlias=namespaceManager.getAlias(nakedClass);
  Element element=doc.createElementNS(nsUri,qname);
  namespaceManager.addNamespace(element,nsAlias,nsUri);
  if (object.getOid() == null) {
    throw new NakedObjectRuntimeException("No object for " + nsAlias);
  }
  namespaceManager.setNofAttribute(element,"oid",object.getOid().toString());
  FieldSpecification[] fields=nakedClass.getFields();
  for (int i=0; i < fields.length; i++) {
    FieldSpecification field=fields[i];
    String fieldName=field.getName();
    Element fieldElement=doc.createElementNS(nsUri,namespaceManager.getAlias(nakedClass) + ":" + fieldName);
    if (field instanceof ValueFieldSpecification) {
      ValueFieldSpecification valueHolder=((ValueFieldSpecification)field);
      Naked value=valueHolder.get(object);
      if (value != null) {
        namespaceManager.setNofAttribute(fieldElement,"feature","value");
        namespaceManager.setNofAttribute(fieldElement,"datatype",NamespaceManager.NOF_METAMODEL_NS_ALIAS + ":" + value.getSpecification().getShortName());
        if (value.titleString().length() > 0) {
          String valueStr=value.titleString();
          fieldElement.appendChild(doc.createTextNode(valueStr));
        }
 else {
          namespaceManager.setNofAttribute(fieldElement,"isEmpty","true");
        }
        element.appendChild(fieldElement);
      }
    }
 else     if (field instanceof OneToOneAssociationSpecification) {
      OneToOneAssociationSpecification oneToOneAssociation=((OneToOneAssociationSpecification)field);
      NakedObject referencedNakedObject=(NakedObject)oneToOneAssociation.get(object);
      namespaceManager.setNofAttribute(fieldElement,"feature","reference");
      String fullyQualifiedClassName=oneToOneAssociation.getType().getFullName();
      namespaceManager.addNamespaceIfRequired(parentElement,fullyQualifiedClassName);
      setNofTypeAttr(fieldElement,namespaceManager,fullyQualifiedClassName);
      if (referencedNakedObject != null) {
        String titleStr=referencedNakedObject.titleString();
        Element titleElement=doc.createElementNS(NamespaceManager.NOF_METAMODEL_NS_URI,"nof:title");
        fieldElement.appendChild(titleElement);
        titleElement.appendChild(doc.createTextNode(titleStr));
      }
 else {
        namespaceManager.setNofAttribute(fieldElement,"isEmpty","true");
      }
      fieldElement=addElementIfNotPresent(element,fieldElement,namespaceManager);
    }
 else     if (field instanceof OneToManyAssociationSpecification) {
      namespaceManager.setNofAttribute(fieldElement,"feature","collection");
      OneToManyAssociationSpecification oneToManyAssociation=(OneToManyAssociationSpecification)field;
      InternalCollection collection=(InternalCollection)oneToManyAssociation.get(object);
      String fullyQualifiedClassName=collection.getType().getFullName();
      namespaceManager.addNamespaceIfRequired(parentElement,fullyQualifiedClassName);
      setNofTypeAttr(fieldElement,namespaceManager,fullyQualifiedClassName);
      Attr collectionSizeAttr=doc.createAttributeNS(NamespaceManager.NOF_METAMODEL_NS_URI,"nof:size");
      collectionSizeAttr.setValue("" + collection.size());
      fieldElement.setAttributeNode(collectionSizeAttr);
      fieldElement=addElementIfNotPresent(element,fieldElement,namespaceManager);
    }
  }
  element=addElementIfNotPresent(parentElement,element,namespaceManager);
  return element;
}
