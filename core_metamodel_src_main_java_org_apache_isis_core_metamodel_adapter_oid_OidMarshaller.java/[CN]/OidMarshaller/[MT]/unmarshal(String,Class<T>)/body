{
  final Matcher matcher=OIDSTR_PATTERN.matcher(oidStr);
  if (!matcher.matches()) {
    throw new IllegalArgumentException("Could not parse OID '" + oidStr + "'; should match pattern: "+ OIDSTR_PATTERN.pattern());
  }
  final String isTransientOrViewModelStr=getGroup(matcher,3);
  final State state;
  if ("!".equals(isTransientOrViewModelStr)) {
    state=State.TRANSIENT;
  }
 else   if ("*".equals(isTransientOrViewModelStr)) {
    state=State.VIEWMODEL;
  }
 else {
    state=State.PERSISTENT;
  }
  final String rootOidStr=getGroup(matcher,2);
  final String rootObjectType=getGroup(matcher,4);
  final String rootIdentifier=getGroup(matcher,5);
  final String aggregateOidPart=getGroup(matcher,6);
  final List<AggregateOidPart> aggregateOidParts=Lists.newArrayList();
  final Splitter nestingSplitter=Splitter.on(SEPARATOR_NESTING);
  final Splitter partsSplitter=Splitter.on(SEPARATOR);
  if (aggregateOidPart != null) {
    final Iterable<String> tildaSplitIter=nestingSplitter.split(aggregateOidPart);
    for (    String str : tildaSplitIter) {
      if (Strings.isNullOrEmpty(str)) {
        continue;
      }
      final Iterator<String> colonSplitIter=partsSplitter.split(str).iterator();
      final String objectType=colonSplitIter.next();
      final String localId=colonSplitIter.next();
      aggregateOidParts.add(new AggregateOidPart(objectType,localId));
    }
  }
  final String collectionPart=getGroup(matcher,8);
  final String collectionName=collectionPart != null ? collectionPart.substring(1) : null;
  final String versionSequence=getGroup(matcher,10);
  final String versionUser=getGroup(matcher,11);
  final String versionUtcTimestamp=getGroup(matcher,12);
  final Version version=Version.create(versionSequence,versionUser,versionUtcTimestamp);
  if (collectionName == null) {
    if (aggregateOidParts.isEmpty()) {
      ensureCorrectType(oidStr,requestedType,RootOidDefault.class);
      return (T)new RootOidDefault(ObjectSpecId.of(rootObjectType),rootIdentifier,state,version);
    }
 else {
      throw new RuntimeException("Aggregated Oids are no longer supported");
    }
  }
 else {
    final String oidStrWithoutCollectionName=getGroup(matcher,1);
    final String parentOidStr=oidStrWithoutCollectionName + marshal(version);
    TypedOid parentOid=this.unmarshal(parentOidStr,TypedOid.class);
    ensureCorrectType(oidStr,requestedType,CollectionOid.class);
    return (T)new CollectionOid(parentOid,collectionName);
  }
}
