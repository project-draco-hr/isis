{
  for (  final String memberName : members.keySet()) {
    props.setProperty("member." + memberName + ".memberOrder.sequence","" + ++memberSeq[0]);
    if (memberGroupName != null) {
      props.setProperty("member." + memberName + ".memberOrder.name",memberGroupName);
    }
    final MemberRepr memberRepr=members.get(memberName);
    final NamedFacetRepr named=memberRepr.named;
    if (named != null) {
      props.setProperty("member." + memberName + ".named.value",named.value);
    }
    final DescribedAsFacetRepr describedAs=memberRepr.describedAs;
    if (describedAs != null) {
      props.setProperty("member." + memberName + ".describedAs.value",describedAs.value);
    }
    final CssClassFacetRepr cssClass=memberRepr.cssClass;
    if (cssClass != null) {
      props.setProperty("member." + memberName + ".cssClass.value",cssClass.value);
    }
    final TypicalLengthFacetRepr typicalLength=memberRepr.typicalLength;
    if (typicalLength != null) {
      props.setProperty("member." + memberName + ".typicalLength.value","" + typicalLength.value);
    }
    final MultiLineFacetRepr multiLine=memberRepr.multiLine;
    if (multiLine != null) {
      props.setProperty("member." + memberName + ".multiLine.numberOfLines","" + multiLine.numberOfLines);
    }
    final PropertyLayoutFacetRepr propertyLayout=memberRepr.propertyLayout;
    if (propertyLayout != null) {
      props.setProperty("member." + memberName + ".propertyLayout.labelPosition","" + propertyLayout.labelPosition);
    }
    final PagedFacetRepr paged=memberRepr.paged;
    if (paged != null) {
      props.setProperty("member." + memberName + ".paged.value","" + paged.value);
    }
    final DisabledFacetRepr disabled=memberRepr.disabled;
    if (disabled != null) {
      final When disabledWhen=disabled.when != null ? disabled.when : When.ALWAYS;
      props.setProperty("member." + memberName + ".disabled.when",disabledWhen.toString());
      final Where disabledWhere=disabled.where != null ? disabled.where : Where.ANYWHERE;
      props.setProperty("member." + memberName + ".disabled.where",disabledWhere.toString());
      final String disabledReason=disabled.reason != null ? disabled.reason : "";
      props.setProperty("member." + memberName + ".disabled.reason",disabledReason);
    }
    final HiddenFacetRepr hidden=memberRepr.hidden;
    if (hidden != null) {
      final When hiddenWhen=hidden.when != null ? hidden.when : When.ALWAYS;
      props.setProperty("member." + memberName + ".hidden.when",hiddenWhen.toString());
      final Where hiddenWhere=hidden.where != null ? hidden.where : Where.ANYWHERE;
      props.setProperty("member." + memberName + ".hidden.where",hiddenWhere.toString());
    }
    final RenderFacetRepr render=memberRepr.render;
    if (render != null) {
      final Type renderType=render.value != null ? render.value : Render.Type.EAGERLY;
      props.setProperty("member." + memberName + ".render.value",renderType.toString());
    }
    final Map<String,ActionRepr> actions=memberRepr.actions;
    if (actions != null) {
      int actSeq=0;
      for (      final String actionName : actions.keySet()) {
        final ActionRepr actionRepr=actions.get(actionName);
        String nameKey="action." + actionName + ".memberOrder.name";
        props.setProperty(nameKey,memberName);
        setRemainingActionProperties(props,"action",actionName,actionRepr,++actSeq);
      }
    }
  }
}
