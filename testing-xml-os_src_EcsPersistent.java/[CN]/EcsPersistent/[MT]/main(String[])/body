{
  BasicConfigurator.configure();
  PropertiesConfiguration configuration=new PropertiesConfiguration(new PropertiesFileLoader(DEFAULT_CONFIG,false));
  if (configuration.getString(SHOW_EXPLORATION_OPTIONS) == null) {
    configuration.add(SHOW_EXPLORATION_OPTIONS,"yes");
  }
  NakedObjectsClient nakedObjects=new NakedObjectsClient();
  nakedObjects.setConfiguration(configuration);
  PropertyConfigurator.configure(configuration.getProperties("log4j"));
  AboutNakedObjects.logVersion();
  SplashWindow splash=null;
  boolean noSplash=configuration.getBoolean("nosplash",false);
  if (!noSplash) {
    splash=new SplashWindow();
  }
  try {
    JavaBusinessObjectContainer container=new JavaBusinessObjectContainer();
    JavaObjectFactory objectFactory=new JavaObjectFactory();
    objectFactory.setContainer(container);
    XmlObjectStore objectStore=new XmlObjectStore();
    objectStore.setDataManager(new XmlDataManager());
    DefaultPersistAlgorithm persistAlgorithm=new DefaultPersistAlgorithm();
    OidGenerator oidGenerator=new SimpleOidGenerator(1000);
    persistAlgorithm.setOidGenerator(oidGenerator);
    DefaultPersistAlgorithm algo=new DefaultPersistAlgorithm();
    algo.setOidGenerator(oidGenerator);
    ObjectStorePersistenceManager objectManager=new ObjectStorePersistenceManager();
    objectManager.setObjectStore(objectStore);
    objectManager.setPersistAlgorithm(persistAlgorithm);
    objectManager.setCheckObjectsForDirtyFlag(true);
    nakedObjects.setPersistenceManager(objectManager);
    ReflectionPeerFactory[] factories=new ReflectionPeerFactory[]{new TransactionPeerFactory()};
    JavaSpecificationLoader specificationLoader=new JavaSpecificationLoader();
    specificationLoader.setReflectionPeerFactories(factories);
    nakedObjects.setSpecificationLoader(specificationLoader);
    new SystemClock();
    nakedObjects.setSession(new SimpleSession());
    ObjectLoaderImpl objectLoader=new ObjectLoaderImpl();
    objectLoader.setPojoAdapterMap(new PojoAdapterHashMap());
    objectLoader.setAdapterFactory(new JavaAdapterFactory());
    objectLoader.setObjectFactory(objectFactory);
    objectLoader.setIdentityAdapterMap(new IdentityAdapterHashMap());
    nakedObjects.setObjectLoader(objectLoader);
    nakedObjects.init();
    SkylarkViewer viewer=new SkylarkViewer();
    viewer.setUpdateNotifier(new ViewUpdateNotifier());
    Context ecs=new Context();
    viewer.setApplication(ecs);
    viewer.setExploration(true);
    viewer.setShutdownListener(new ObjectViewingMechanismListener(){
      public void viewerClosing(){
        System.out.println("EXITED");
        System.exit(0);
      }
    }
);
    viewer.init();
  }
  finally {
    if (splash != null) {
      splash.toFront();
      splash.removeAfterDelay(3);
    }
  }
}
