{
  if (alreadyPersistedOrNotPersistableOrServiceOrStandalone(adapter)) {
    return;
  }
  final List<ObjectAssociation> associations=adapter.getSpecification().getAssociations(Contributed.EXCLUDED);
  if (!adapter.getSpecification().isEncodeable() && associations.size() > 0) {
    if (LOG.isDebugEnabled()) {
      LOG.debug("make persistent " + adapter);
    }
    CallbackUtils.callCallback(adapter,PersistingCallbackFacet.class);
    toPersistObjectSet.remapAsPersistent(adapter);
    final ResolveState stateWhilePersisting=ResolveState.UPDATING;
    adapter.changeState(stateWhilePersisting);
    for (int i=0; i < associations.size(); i++) {
      final ObjectAssociation objectAssoc=associations.get(i);
      if (objectAssoc.isNotPersisted()) {
        continue;
      }
      if (objectAssoc.isOneToManyAssociation()) {
        final ObjectAdapter collection=objectAssoc.get(adapter);
        if (collection == null) {
          throw new ObjectPersistenceException("Collection " + objectAssoc.getName() + " does not exist in "+ adapter.getSpecification().getFullIdentifier());
        }
        makePersistent(collection,toPersistObjectSet);
      }
 else {
        final ObjectAdapter fieldValue=objectAssoc.get(adapter);
        if (fieldValue == null) {
          continue;
        }
        persist(fieldValue,toPersistObjectSet);
      }
    }
    toPersistObjectSet.addCreateObjectCommand(adapter);
    CallbackUtils.callCallback(adapter,PersistedCallbackFacet.class);
    adapter.changeState(stateWhilePersisting.getEndState());
  }
}
