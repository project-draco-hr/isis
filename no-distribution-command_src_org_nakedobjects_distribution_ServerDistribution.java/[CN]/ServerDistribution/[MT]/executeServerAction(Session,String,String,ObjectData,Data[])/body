{
  LOG.debug("request executeAction " + actionIdentifier + " on "+ target+ " for "+ session);
  NakedObject object;
  if (target instanceof ReferenceData && ((ReferenceData)target).getOid() != null) {
    object=getPersistentNakedObject(session,(ReferenceData)target);
  }
 else   if (target instanceof ObjectData) {
    object=(NakedObject)ObjectDecoder.restore(target);
  }
 else   if (target == null) {
    object=null;
  }
 else {
    throw new NakedObjectRuntimeException();
  }
  Action action=getActionMethod(actionType,actionIdentifier,parameterData,object);
  checkHint(session,actionType,actionIdentifier,target,parameterData);
  Naked[] parameters=getParameters(session,parameterData);
  if (action == null) {
    throw new NakedObjectsRemoteException("Could not find method " + actionIdentifier);
  }
  Naked result=action.execute(object,parameters);
  ObjectData persistedTarget;
  if (target == null) {
    persistedTarget=null;
  }
 else {
    persistedTarget=encoder.createMadePersistentGraph(target,object,updateNotifier);
  }
  ObjectData[] persistedParameters=new ObjectData[parameterData.length];
  for (int i=0; i < persistedParameters.length; i++) {
    if (action.getParameterTypes()[i].isObject() && parameterData[i] instanceof ObjectData) {
      persistedParameters[i]=encoder.createMadePersistentGraph((ObjectData)parameterData[i],(NakedObject)parameters[i],updateNotifier);
    }
  }
  String[] messages=new String[0];
  String[] warnings=new String[0];
  return encoder.createServerActionResult(result,getUpdates(),persistedTarget,persistedParameters,messages,warnings);
}
