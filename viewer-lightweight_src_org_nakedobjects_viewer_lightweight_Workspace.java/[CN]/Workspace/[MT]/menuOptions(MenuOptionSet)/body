{
  super.menuOptions(options);
  viewer.menuOptions(options);
  options.add(MenuOptionSet.OBJECT,new MenuOption("Naked Class..."){
    public void execute(    Workspace workspace,    View view,    Location at){
      DesktopView classesView=ViewFactory.getViewFactory().createClassView(NakedClass.SELF);
      classesView.setLocation(at);
      addIcon(classesView);
    }
  }
);
  options.add(MenuOptionSet.VIEW,new PrintOption());
  options.add(MenuOptionSet.VIEW,new MenuOption("Close all"){
    public void execute(    Workspace workspace,    View view,    Location at){
      ObjectView[] vw=new ObjectView[openViews.size()];
      for (int i=0; i < openViews.size(); i++) {
        vw[i]=(ObjectView)openViews.elementAt(i);
      }
      for (int i=0; i < vw.length; i++) {
        removeView(vw[i]);
      }
      redraw();
    }
  }
);
  options.add(MenuOptionSet.VIEW,new MenuOption("Tidy up views"){
    public void execute(    Workspace workspace,    View view,    Location at){
      layoutOpenViews();
      redraw();
    }
  }
);
  options.add(MenuOptionSet.EXPLORATION,new MenuOption("Tidy up icons"){
    public void execute(    Workspace workspace,    View view,    Location at){
      layoutIcons();
      redraw();
    }
  }
);
  options.add(MenuOptionSet.DEBUG,new MenuOption("View's debug info..."){
    public void execute(    Workspace workspace,    View view,    Location at){
      DebugFrame f=new DebugFrame();
      f.setInfo(new DebugOpenViewList());
      f.show(at.x + 50,workspace.getBounds().y + 6);
    }
  }
);
  options.add(MenuOptionSet.DEBUG,loggingOption("Error",Level.ERROR));
  options.add(MenuOptionSet.DEBUG,loggingOption("Info",Level.INFO));
  options.add(MenuOptionSet.DEBUG,loggingOption("Debug",Level.DEBUG));
  options.add(MenuOptionSet.DEBUG,loggingOption("Off",Level.OFF));
  options.setColor(Style.WORKSPACE_MENU);
}
