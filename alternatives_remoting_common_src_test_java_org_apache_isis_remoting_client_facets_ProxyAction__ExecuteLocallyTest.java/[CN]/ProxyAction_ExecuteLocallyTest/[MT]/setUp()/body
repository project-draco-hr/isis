{
  BasicConfigurator.configure();
  LogManager.getRootLogger().setLevel(Level.OFF);
  system=new TestProxySystem();
  system.init();
  mockObjectAction=mockery.mock(ObjectAction.class);
  mockEncoder=mockery.mock(ObjectEncoderDecoder.class);
  mockDistribution=mockery.mock(ServerFacade.class);
  mockActionInvocationFacet=mockery.mock(ActionInvocationFacet.class);
  mockFacetHolder=mockery.mock(FacetHolder.class);
  identifier=Identifier.classIdentifier("");
  target=system.createTransientTestObject();
  mockery.checking(new Expectations(){
{
      one(mockActionInvocationFacet).getFacetHolder();
      will(returnValue(mockFacetHolder));
      allowing(mockObjectAction).getIdentifier();
      will(returnValue((identifier)));
      allowing(mockObjectAction).execute(with(equalTo(target)),with(any(ObjectAdapter[].class)));
      will(returnValue(null));
    }
  }
);
  proxy=new ActionInvocationFacetWrapProxy(mockActionInvocationFacet,mockDistribution,mockEncoder,mockObjectAction);
}
