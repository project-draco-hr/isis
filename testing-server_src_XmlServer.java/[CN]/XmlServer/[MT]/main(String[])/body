{
  BasicConfigurator.configure();
  NakedObjectsClient nakedObjects=new NakedObjectsClient();
  PropertiesConfiguration configuration=new PropertiesConfiguration(new PropertiesFileLoader("server.properties",true));
  nakedObjects.setConfiguration(configuration);
  PropertyConfigurator.configure(configuration.getProperties("log4j"));
  JavaBusinessObjectContainer container=new JavaBusinessObjectContainer();
  new SystemClock();
  TransientObjectStore objectStore=new TransientObjectStore();
  DataFactory objectDataFactory=new JavaDataFactory();
  SingleResponseUpdateNotifier updateNotifier=new SingleResponseUpdateNotifier();
  JavaObjectFactory objectFactory=new JavaObjectFactory();
  objectFactory.setContainer(container);
  OidGenerator oidGenerator=new SimpleOidGenerator();
  DefaultPersistAlgorithm persistAlgorithm=new DefaultPersistAlgorithm();
  persistAlgorithm.setOidGenerator(oidGenerator);
  ObjectStorePersistor objectPersistor=new ObjectStorePersistor();
  objectPersistor.setObjectStore(objectStore);
  objectPersistor.setPersistAlgorithm(persistAlgorithm);
  objectPersistor.setCheckObjectsForDirtyFlag(true);
  nakedObjects.setObjectPersistor(objectPersistor);
  ReflectionPeerFactory[] factories=new ReflectionPeerFactory[]{new TransactionPeerFactory()};
  JavaSpecificationLoader specificationLoader=new JavaSpecificationLoader();
  specificationLoader.setReflectionPeerFactories(factories);
  nakedObjects.setSpecificationLoader(specificationLoader);
  ObjectLoaderImpl objectLoader=new ObjectLoaderImpl();
  objectLoader.setPojoAdapterMap(new PojoAdapterHashMap());
  objectLoader.setAdapterFactory(new JavaAdapterFactory());
  objectLoader.setObjectFactory(objectFactory);
  objectLoader.setIdentityAdapterMap(new IdentityAdapterHashMap());
  nakedObjects.setObjectLoader(objectLoader);
  ServerDistribution sd=new ServerDistribution();
  sd.setObjectDataFactory(objectDataFactory);
  sd.setUpdateNotifier(updateNotifier);
  XServerListener serverListener=new XServerListener();
  serverListener.setServerDistribution(sd);
  objectPersistor.addObjectChangedListener(updateNotifier);
  nakedObjects.init();
  serverListener.start();
  JavaFixtureBuilder fb=new JavaFixtureBuilder();
  CitiesFixture cities;
  fb.addFixture(cities=new CitiesFixture());
  fb.addFixture(new BookingsFixture(cities));
  fb.addFixture(new ClassesFixture());
  fb.installFixtures();
  InfoDebugFrame debugFrame=new InfoDebugFrame(){
    private static final long serialVersionUID=1L;
    public void dialogClosing(){
      System.exit(0);
    }
  }
;
  DebugInfo debugInfo=objectPersistor;
  debugFrame.setInfo(debugInfo);
  debugFrame.setBounds(10,10,1000,800);
  debugFrame.refresh();
  debugFrame.show();
}
