{
  final ObjectSpecification objectSpec=objectAdapter.getSpecification();
  final List<ObjectAssociation> properties=objectSpec.getAssociations(ObjectAssociationFilters.PROPERTIES);
  boolean allOk=true;
  for (  final ObjectAssociation association : properties) {
    final OneToOneAssociation property=(OneToOneAssociation)association;
    final ObjectSpecification propertySpec=property.getSpecification();
    final String id=property.getId();
    final JsonRepresentation propertyRepr=propertiesList.getRepresentation(id);
    final Consent visibility=property.isVisible(resourceContext.getAuthenticationSession(),objectAdapter,resourceContext.getWhere());
    final Consent usability=property.isUsable(resourceContext.getAuthenticationSession(),objectAdapter,resourceContext.getWhere());
    final boolean invisible=visibility.isVetoed();
    final boolean disabled=usability.isVetoed();
    final boolean valueProvided=propertyRepr != null;
    if (!valueProvided) {
      if (invisible || disabled) {
        continue;
      }
      if (!property.isMandatory()) {
        continue;
      }
      final String invalidReason=propertiesList.getString("x-ro-invalidReason");
      if (invalidReason != null) {
        propertiesList.mapPut("x-ro-invalidReason",invalidReason + "; " + property.getName());
      }
 else {
        propertiesList.mapPut("x-ro-invalidReason","Mandatory field(s) missing: " + property.getName());
      }
      allOk=false;
      continue;
    }
 else {
      if (invisible) {
        continue;
      }
      if (disabled) {
        propertyRepr.mapPut("invalidReason",usability.getReason());
        allOk=false;
        continue;
      }
      final ObjectAdapter valueAdapter;
      try {
        valueAdapter=objectAdapterFor(resourceContext,propertySpec,propertyRepr);
      }
 catch (      IllegalArgumentException ex) {
        propertyRepr.mapPut("invalidReason",ex.getMessage());
        allOk=false;
        continue;
      }
      final Consent validity=property.isAssociationValid(objectAdapter,valueAdapter);
      if (validity.isAllowed()) {
        try {
          property.set(objectAdapter,valueAdapter);
        }
 catch (        final IllegalArgumentException ex) {
          propertyRepr.mapPut("invalidReason",ex.getMessage());
          allOk=false;
        }
      }
 else {
        propertyRepr.mapPut("invalidReason",validity.getReason());
        allOk=false;
      }
    }
  }
  return allOk;
}
