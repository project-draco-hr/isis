{
  final List<JsonRepresentation> argList=argListFor(action,arguments);
  final List<ObjectAdapter> argAdapters=Lists.newArrayList();
  final List<ObjectActionParameter> parameters=action.getParameters();
  boolean valid=true;
  for (int i=0; i < argList.size(); i++) {
    final JsonRepresentation argRepr=argList.get(i);
    final ObjectSpecification paramSpec=parameters.get(i).getSpecification();
    try {
      final ObjectAdapter argAdapter=new JsonParserHelper(rendererContext,paramSpec).objectAdapterFor(argRepr);
      argAdapters.add(argAdapter);
      final ObjectActionParameter parameter=parameters.get(i);
      final Object argPojo=argAdapter != null ? argAdapter.getObject() : null;
      final String reasonNotValid=parameter.isValid(objectAdapter,argPojo,InteractionInitiatedBy.USER);
      if (reasonNotValid != null) {
        argRepr.mapPut("invalidReason",reasonNotValid);
        valid=false;
      }
    }
 catch (    final IllegalArgumentException e) {
      argAdapters.add(null);
      valid=false;
    }
  }
  final ObjectAdapter[] argArray=argAdapters.toArray(new ObjectAdapter[0]);
  final Consent consent=action.isProposedArgumentSetValid(objectAdapter,argArray,InteractionInitiatedBy.USER);
  if (consent.isVetoed()) {
    arguments.mapPut("x-ro-invalidReason",consent.getReason());
    valid=false;
  }
  if (!valid) {
    throw RestfulObjectsApplicationException.createWithBody(RestfulResponse.HttpStatusCode.VALIDATION_FAILED,arguments,"Validation failed, see body for details");
  }
  return argAdapters;
}
