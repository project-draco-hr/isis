{
  Logger.getRootLogger().setLevel(Level.OFF);
  loader=new MockNakedObjectSpecificationLoader();
  loader.addSpec(spec=new DummyNakedObjectSpecification());
  loader.addSpec(new DummyNakedObjectSpecification());
  loader.addSpec(new DummyNakedObjectSpecification());
  NakedObjectsClient nakedObjectsClient=new NakedObjectsClient();
  nakedObjectsClient.setSpecificationLoader(loader);
  nakedObjectsClient.setConfiguration(new TestConfiguration());
  javaObjectWithOneToOneAssociations=new JavaObjectWithOneToOneAssociations();
  ObjectLoaderImpl objectLoader=new ObjectLoaderImpl(){
    public NakedObject recreateAdapter(    Oid oid,    NakedObjectSpecification spec){
      return null;
    }
  }
;
  objectLoader.setPojoAdapterHash(new PojoAdapterHashImpl());
  objectLoader.setReflectorFactory(new NullReflectorFactory());
  nakedObjectsClient.setObjectLoader(objectLoader);
  nakedObjectHoldingObjectWithAssociations=objectLoader.createAdapterForTransient(javaObjectWithOneToOneAssociations);
  Class cls=JavaObjectWithOneToOneAssociations.class;
  Method get=cls.getDeclaredMethod("getReferencedObject",new Class[0]);
  Method set=cls.getDeclaredMethod("setReferencedObject",new Class[]{JavaReferencedObject.class});
  Method about=cls.getDeclaredMethod("aboutReferencedObject",new Class[]{FieldAbout.class,JavaReferencedObject.class});
  personField=new JavaOneToOneAssociation(PERSON_FIELD_NAME,JavaReferencedObject.class,get,set,null,null,about);
  javaObjectForReferencing=new JavaReferencedObject();
  associate=objectLoader.createAdapterForTransient(javaObjectForReferencing);
}
