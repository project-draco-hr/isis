{
  add(new AbstractFormValidator(){
    private static final long serialVersionUID=1L;
    @Override public FormComponent<?>[] getDependentFormComponents(){
      return new FormComponent<?>[0];
    }
    @Override public void validate(    final Form<?> form){
      final EntityModel entityModel=(EntityModel)getModel();
      String invalidReasonIfAny;
      try {
        final ObjectAdapter adapter=entityModel.getObject();
        final ValidateObjectFacet facet=adapter.getSpecification().getFacet(ValidateObjectFacet.class);
        if (facet == null) {
          return;
        }
        invalidReasonIfAny=facet.invalidReason(adapter);
      }
 catch (      ConcurrencyException ex) {
        invalidReasonIfAny=ex.getMessage();
      }
      if (invalidReasonIfAny != null) {
        Session.get().getFeedbackMessages().add(new FeedbackMessage(form,invalidReasonIfAny,FeedbackMessage.ERROR));
      }
    }
  }
);
}
