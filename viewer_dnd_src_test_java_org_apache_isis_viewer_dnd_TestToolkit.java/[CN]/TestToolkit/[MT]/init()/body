{
  colorsAndFonts=new ColorsAndFonts(){
    @Override public int defaultBaseline(){
      return 0;
    }
    @Override public int defaultFieldHeight(){
      return 0;
    }
    @Override public Color getColor(    final int rgbColor){
      return null;
    }
    @Override public Color getColor(    final String name){
      return new NullColor();
    }
    @Override public Text getText(    final String name){
      return new DummyText();
    }
    @Override public void init(){
    }
  }
;
  viewer=new Viewer(){
    @Override public void addToNotificationList(    final View view){
    }
    @Override public void clearAction(){
    }
    @Override public void clearOverlayView(){
    }
    @Override public void clearOverlayView(    final View view){
    }
    @Override public void disposeUnneededViews(){
    }
    @Override public Object getClipboard(    final Class<?> class1){
      return null;
    }
    @Override public InteractionSpy getSpy(){
      return null;
    }
    UndoStack undoStack=new UndoStack();
    @Override public UndoStack getUndoStack(){
      return undoStack;
    }
    @Override public boolean hasFocus(    final View view){
      return false;
    }
    @Override public boolean isRunningAsExploration(){
      return false;
    }
    @Override public boolean isRunningAsPrototype(){
      return false;
    }
    @Override public void markDamaged(    final Bounds bounds){
    }
    @Override public void removeFromNotificationList(    final View view){
    }
    @Override public void scheduleRepaint(){
    }
    @Override public void saveCurrentFieldEntry(){
    }
    @Override public String selectFilePath(    final String title,    final String directory){
      return null;
    }
    @Override public void setBackground(    final Background background){
    }
    @Override public void setClipboard(    final String clip,    final Class<?> class1){
    }
    @Override public void setKeyboardFocus(    final View view){
    }
    @Override public void setOverlayView(    final View view){
    }
    @Override public void showInOverlay(    final Content content,    final Location location){
    }
    @Override public void showDebugFrame(    final DebuggableWithTitle[] info,    final Location at){
    }
    @Override public Size getOverlaySize(){
      return null;
    }
    @Override public void saveOpenObjects(){
    }
  }
;
  feedbackManager=new Feedback(){
    @Override public void showArrowCursor(){
    }
    @Override public void showCrosshairCursor(){
    }
    @Override public void showDefaultCursor(){
    }
    @Override public void showException(    final Throwable e){
    }
    @Override public void showHandCursor(){
    }
    @Override public void showMoveCursor(){
    }
    @Override public void showResizeDownCursor(){
    }
    @Override public void showResizeDownLeftCursor(){
    }
    @Override public void showResizeDownRightCursor(){
    }
    @Override public void showResizeLeftCursor(){
    }
    @Override public void showResizeRightCursor(){
    }
    @Override public void showResizeUpCursor(){
    }
    @Override public void showResizeUpLeftCursor(){
    }
    @Override public void showResizeUpRightCursor(){
    }
    @Override public void showTextCursor(){
    }
    @Override public void addMessage(    final String string){
    }
    @Override public void clearAction(){
    }
    @Override public void clearBusy(    final View view){
    }
    @Override public void clearError(){
    }
    @Override public String getStatusBarOutput(){
      return null;
    }
    @Override public boolean isBusy(    final View view){
      return false;
    }
    @Override public void setAction(    final String string){
    }
    @Override public void setBusy(    final View view,    final BackgroundTask task){
    }
    @Override public void setError(    final String string){
    }
    @Override public void setViewDetail(    final String string){
    }
    @Override public void showBusyState(    final View view){
    }
    @Override public void showMessagesAndWarnings(){
    }
  }
;
  viewFactory=new GlobalViewFactory(){
    @Override public Enumeration<ViewSpecification> availableViews(    final ViewRequirement viewRequirement){
      throw new UnexpectedCallException();
    }
    @Override public View createDialog(    final Content content){
      throw new UnexpectedCallException();
    }
    @Override public DragEvent createDragContentOutline(    final View view,    final Location location){
      throw new UnexpectedCallException();
    }
    @Override public View createDragViewOutline(    final View view){
      throw new UnexpectedCallException();
    }
    @Override public View createMinimizedView(    final View view){
      throw new UnexpectedCallException();
    }
    @Override public View createView(    final ViewRequirement requirement){
      return new DummyView();
    }
    @Override public void debugData(    final DebugBuilder debug){
    }
    @Override public String debugTitle(){
      throw new UnexpectedCallException();
    }
    @Override public void addSpecification(    final ViewSpecification spec){
    }
    @Override public Enumeration<ViewSpecification> availableDesigns(    final ViewRequirement viewRequirement){
      return null;
    }
  }
;
}
