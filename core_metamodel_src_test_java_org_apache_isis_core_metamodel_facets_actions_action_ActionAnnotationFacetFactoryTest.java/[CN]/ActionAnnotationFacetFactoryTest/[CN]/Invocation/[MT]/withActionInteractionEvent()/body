{
class Customer {
class SomeActionInvokedDomainEvent extends ActionInteractionEvent<Customer> {
      public SomeActionInvokedDomainEvent(      final Customer source,      final Identifier identifier,      final Object... arguments){
        super(source,identifier,arguments);
      }
    }
    @ActionInteraction(SomeActionInvokedDomainEvent.class) public void someAction(){
    }
  }
  final Class<?> cls=Customer.class;
  actionMethod=findMethod(cls,"someAction");
  allowingLoadSpecificationRequestsFor(cls,actionMethod.getReturnType());
  expectRemoveMethod(actionMethod);
  final ProcessMethodContext processMethodContext=new ProcessMethodContext(cls,null,null,actionMethod,mockMethodRemover,facetedMethod);
  facetFactory.processInvocation(processMethodContext);
  final Facet domainEventFacet=facetedMethod.getFacet(ActionDomainEventFacet.class);
  Assert.assertNotNull(domainEventFacet);
  Assert.assertTrue(domainEventFacet instanceof ActionDomainEventFacetForActionInteractionAnnotation);
  final ActionDomainEventFacetForActionInteractionAnnotation domainEventFacetImpl=(ActionDomainEventFacetForActionInteractionAnnotation)domainEventFacet;
  assertThat(domainEventFacetImpl.getEventType(),classEqualTo(Customer.SomeActionInvokedDomainEvent.class));
  final Facet invocationFacet=facetedMethod.getFacet(ActionInvocationFacet.class);
  Assert.assertNotNull(invocationFacet);
  Assert.assertTrue(invocationFacet instanceof ActionInvocationFacetForDomainEventFromActionInteractionAnnotation);
  final ActionInvocationFacetForDomainEventFromActionInteractionAnnotation invocationFacetImpl=(ActionInvocationFacetForDomainEventFromActionInteractionAnnotation)invocationFacet;
  assertThat(invocationFacetImpl.getEventType(),classEqualTo(Customer.SomeActionInvokedDomainEvent.class));
}
