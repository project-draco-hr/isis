{
  if (object == null) {
    return null;
  }
  boolean nextLevel=object.getResolveState().isTransient() || recursePersistentObjects;
  if (previous.containsKey(object)) {
    return (ObjectData)previous.get(object);
  }
  Oid oid=object.getOid();
  NakedObjectSpecification specification=object.getSpecification();
  String type=specification.getFullName();
  ResolveState resolveState=object.getResolveState();
  boolean isComplete=object.getResolveState() == ResolveState.TRANSIENT || object.getResolveState() == ResolveState.RESOLVED;
  ObjectData data=helper.createObjectData(oid,type,isComplete,object.getVersion());
  previous.put(object,data);
  Data[] fieldContent;
  if (resolveState.isSerializing() || !nextLevel || depth == 0 || resolveState.isGhost()) {
    fieldContent=null;
  }
 else {
    NakedObjectField[] fields=getFields(specification);
    fieldContent=new Data[fields.length];
    NakedObjects.getObjectLoader().start(object,object.getResolveState().serializeFrom());
    for (int i=0; i < fields.length; i++) {
      Naked field=object.getField(fields[i]);
      if (fields[i].isDerived()) {
        fieldContent[i]=null;
      }
 else       if (field == null && isComplete) {
        fieldContent[i]=helper.createNullData(fields[i].getSpecification().getFullName());
      }
 else       if (field == null && !isComplete) {
        fieldContent[i]=null;
      }
 else       if (fields[i].isValue()) {
        fieldContent[i]=createValueData(field);
      }
 else       if (fields[i].isCollection()) {
        fieldContent[i]=createCollectionData((NakedCollection)field,recursePersistentObjects,depth - 1,previous);
      }
 else {
        fieldContent[i]=createObjectData((NakedObject)field,recursePersistentObjects,depth - 1,previous);
      }
    }
    NakedObjects.getObjectLoader().end(object);
  }
  data.setFieldContent(fieldContent);
  return data;
}
