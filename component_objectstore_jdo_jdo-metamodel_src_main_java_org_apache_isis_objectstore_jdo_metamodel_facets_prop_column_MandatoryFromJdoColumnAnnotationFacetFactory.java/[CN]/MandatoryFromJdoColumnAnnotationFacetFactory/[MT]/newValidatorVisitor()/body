{
  return new MetaModelValidatorVisiting.Visitor(){
    @Override public boolean visit(    ObjectSpecification objectSpec,    ValidationFailures validationFailures){
      validate(objectSpec,validationFailures);
      return true;
    }
    private void validate(    ObjectSpecification objectSpec,    ValidationFailures validationFailures){
      final JdoPersistenceCapableFacet pcFacet=objectSpec.getFacet(JdoPersistenceCapableFacet.class);
      if (pcFacet == null || pcFacet.getIdentityType() == IdentityType.NONDURABLE) {
        return;
      }
      final List<ObjectAssociation> associations=objectSpec.getAssociations(Contributed.EXCLUDED,ObjectAssociation.Filters.PROPERTIES);
      for (      ObjectAssociation association : associations) {
        if (association.containsDoOpFacet(JdoNotPersistentFacet.class)) {
          return;
        }
        validateMandatoryFacet(association,validationFailures);
      }
    }
    private void validateMandatoryFacet(    ObjectAssociation association,    ValidationFailures validationFailures){
      MandatoryFacet facet=association.getFacet(MandatoryFacet.class);
      MandatoryFacet underlying=(MandatoryFacet)facet.getUnderlyingFacet();
      if (underlying == null) {
        return;
      }
      if (facet instanceof MandatoryFacetDerivedFromJdoColumn) {
        if (association.isNotPersisted()) {
          validationFailures.add("%s: @javax.jdo.annotations.Column found on non-persisted property; please remove)",association.getIdentifier().toClassAndNameIdentityString());
          return;
        }
        if (underlying.isInvertedSemantics() == facet.isInvertedSemantics()) {
          return;
        }
        if (underlying.isInvertedSemantics()) {
          validationFailures.add("%s: incompatible usage of Isis' @Optional annotation and @javax.jdo.annotations.Column; use just @javax.jdo.annotations.Column(allowNulls=\"...\")",association.getIdentifier().toClassAndNameIdentityString());
        }
 else {
          validationFailures.add("%s: incompatible Isis' default of required/optional properties vs JDO; add @javax.jdo.annotations.Column(allowNulls=\"...\")",association.getIdentifier().toClassAndNameIdentityString());
        }
      }
      if (facet instanceof MandatoryFacetInferredFromAbsenceOfJdoColumn) {
        if (association.isNotPersisted()) {
          return;
        }
        if (underlying.isInvertedSemantics() == facet.isInvertedSemantics()) {
          return;
        }
        if (underlying.isInvertedSemantics()) {
          validationFailures.add("%s: incompatible usage of Isis' @Optional annotation and @javax.jdo.annotations.Column; use just @javax.jdo.annotations.Column(allowNulls=\"...\")",association.getIdentifier().toClassAndNameIdentityString());
        }
 else {
          validationFailures.add("%s: incompatible default handling of required/optional properties between Isis and JDO; add @javax.jdo.annotations.Column(allowsNull=\"...\")",association.getIdentifier().toClassAndNameIdentityString());
        }
      }
    }
  }
;
}
