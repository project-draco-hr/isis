{
  org.apache.log4j.Logger.getRootLogger().setLevel(org.apache.log4j.Level.OFF);
  stubConfiguration=new IsisConfigurationDefault();
  stubServicesInjector=new ServicesInjector(Lists.<Object>newArrayList(mockSpecificationLoader,mockSpecificationLoader,mockPersistenceSessionServiceInternal),stubConfiguration);
  context.checking(new Expectations(){
{
      allowing(mockAuthenticationSessionProvider).getAuthenticationSession();
      will(returnValue(mockAuthenticationSession));
    }
  }
);
  persistentAdapter=PojoAdapterBuilder.create().with(mockSpecificationLoader).withOid("CUS|1").withPojo(mockPersistable).build();
  transientAdapter=PojoAdapterBuilder.create().with(mockSpecificationLoader).with(Persistence.TRANSIENT).withPojo(mockPersistable).build();
  testMember=new ObjectMemberAbstractImpl("id",stubServicesInjector);
  context.checking(new Expectations(){
{
      allowing(mockSpecificationLoader).lookupBySpecId(ObjectSpecId.of("CUS"));
      will(returnValue(mockSpecForCustomer));
      allowing(mockSpecificationLoader).loadSpecification(with(any(Class.class)));
      will(returnValue(mockSpecForCustomer));
      allowing(mockSpecForCustomer).isService();
      will(returnValue(false));
      allowing(mockSpecForCustomer).isViewModel();
      will(returnValue(false));
      allowing(mockSpecForCustomer).getShortIdentifier();
      will(returnValue("Customer"));
    }
  }
);
}
