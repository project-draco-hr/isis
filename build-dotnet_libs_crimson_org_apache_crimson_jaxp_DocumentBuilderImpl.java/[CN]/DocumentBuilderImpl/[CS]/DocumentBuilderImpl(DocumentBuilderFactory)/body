{
  this.dbf=dbf;
  namespaceAware=dbf.isNamespaceAware();
  xmlReader=new XMLReaderImpl();
  try {
    validating=dbf.isValidating();
    String validation="http://xml.org/sax/features/validation";
    xmlReader.setFeature(validation,validating);
    if (validating) {
      setErrorHandler(new DefaultValidationErrorHandler());
    }
    String nsPrefixes="http://xml.org/sax/features/namespace-prefixes";
    xmlReader.setFeature(nsPrefixes,true);
    String namespaces="http://xml.org/sax/features/namespaces";
    xmlReader.setFeature(namespaces,namespaceAware);
    if (namespaceAware) {
      builder=new XmlDocumentBuilderNS();
    }
 else {
      builder=new XmlDocumentBuilder();
    }
    xmlReader.setContentHandler(builder);
    String lexHandler="http://xml.org/sax/properties/lexical-handler";
    xmlReader.setProperty(lexHandler,builder);
    String declHandler="http://xml.org/sax/properties/declaration-handler";
    xmlReader.setProperty(declHandler,builder);
    xmlReader.setDTDHandler(builder);
  }
 catch (  SAXException e) {
    throw new ParserConfigurationException(e.getMessage());
  }
  builder.setIgnoreWhitespace(dbf.isIgnoringElementContentWhitespace());
  builder.setExpandEntityReferences(dbf.isExpandEntityReferences());
  builder.setIgnoreComments(dbf.isIgnoringComments());
  builder.setPutCDATAIntoText(dbf.isCoalescing());
}
