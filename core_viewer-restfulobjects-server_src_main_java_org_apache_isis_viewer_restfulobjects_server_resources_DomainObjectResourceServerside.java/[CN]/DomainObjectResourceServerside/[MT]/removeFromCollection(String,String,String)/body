{
  init(Where.PARENTED_TABLES,RepresentationService.Intent.NOT_APPLICABLE);
  final ObjectAdapter objectAdapter=getObjectAdapterElseThrowNotFound(domainType,instanceId);
  final DomainResourceHelper helper=newDomainResourceHelper(objectAdapter);
  final ObjectAdapterAccessHelper accessHelper=new ObjectAdapterAccessHelper(getResourceContext(),objectAdapter);
  final OneToManyAssociation collection=accessHelper.getCollectionThatIsVisibleForIntent(collectionId,ObjectAdapterAccessHelper.Intent.MUTATE);
  final ObjectSpecification collectionSpec=collection.getSpecification();
  final ObjectAdapter argAdapter=new JsonParserHelper(getResourceContext(),collectionSpec).parseAsMapWithSingleValue(getResourceContext().getUrlUnencodedQueryString());
  final Consent consent=collection.isValidToRemove(objectAdapter,argAdapter,InteractionInitiatedBy.USER);
  if (consent.isVetoed()) {
    throw RestfulObjectsApplicationException.createWithMessage(HttpStatusCode.UNAUTHORIZED,consent.getReason());
  }
  collection.removeElement(objectAdapter,argAdapter,InteractionInitiatedBy.USER);
  return helper.collectionDetails(collectionId,MemberReprMode.WRITE);
}
