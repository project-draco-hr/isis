{
  init(RepresentationType.DOMAIN_OBJECT,Where.OBJECT_FORMS,RepresentationService.Intent.JUST_CREATED);
  final String objectStr=Util.asStringUtf8(object);
  final JsonRepresentation objectRepr=Util.readAsMap(objectStr);
  if (!objectRepr.isMap()) {
    throw RestfulObjectsApplicationException.createWithMessage(HttpStatusCode.BAD_REQUEST,"Body is not a map; got %s",objectRepr);
  }
  final ObjectSpecification domainTypeSpec=getSpecificationLoader().lookupBySpecId(ObjectSpecId.of(domainType));
  if (domainTypeSpec == null) {
    throw RestfulObjectsApplicationException.createWithMessage(HttpStatusCode.BAD_REQUEST,"Could not determine type of domain object to persist (no class with domainType Id of '%s')",domainType);
  }
  final ObjectAdapter objectAdapter=getResourceContext().getPersistenceSession().createTransientInstance(domainTypeSpec);
  final ObjectAdapterUpdateHelper updateHelper=new ObjectAdapterUpdateHelper(getResourceContext(),objectAdapter);
  final JsonRepresentation membersMap=objectRepr.getMap("members");
  if (membersMap == null) {
    throw RestfulObjectsApplicationException.createWithMessage(HttpStatusCode.BAD_REQUEST,"Could not find members map; got %s",objectRepr);
  }
  if (!updateHelper.copyOverProperties(membersMap,ObjectAdapterUpdateHelper.Intent.PERSISTING_NEW)) {
    throw RestfulObjectsApplicationException.createWithBody(HttpStatusCode.BAD_REQUEST,objectRepr,"Illegal property value");
  }
  final Consent validity=objectAdapter.getSpecification().isValid(objectAdapter,InteractionInitiatedBy.USER);
  if (validity.isVetoed()) {
    throw RestfulObjectsApplicationException.createWithBody(HttpStatusCode.BAD_REQUEST,objectRepr,validity.getReason());
  }
  getResourceContext().getPersistenceSession().makePersistentInTransaction(objectAdapter);
  return newDomainResourceHelper(objectAdapter).objectRepresentation(RepresentationService.Intent.JUST_CREATED);
}
