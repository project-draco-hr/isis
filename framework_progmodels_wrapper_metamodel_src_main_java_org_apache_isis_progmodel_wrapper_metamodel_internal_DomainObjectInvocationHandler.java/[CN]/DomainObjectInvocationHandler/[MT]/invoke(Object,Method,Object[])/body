{
  if (isObjectMethod(method)) {
    return delegate(method,args);
  }
  final ObjectAdapter targetAdapter=getAdapterManager().getAdapterFor(getDelegate());
  if (isTitleMethod(method)) {
    return handleTitleMethod(method,args,targetAdapter);
  }
  final ObjectSpecification targetNoSpec=targetAdapter.getSpecification();
  if (isSaveMethod(method)) {
    return handleSaveMethod(getAuthenticationSession(),targetAdapter,targetNoSpec);
  }
  if (isUnderlyingMethod(method)) {
    return getDelegate();
  }
  final ObjectMember objectMember=locateAndCheckMember(method);
  final String memberName=objectMember.getName();
  final String methodName=method.getName();
  final String prefix=checkPrefix(methodName);
  if (isDefaultMethod(prefix) || isChoicesMethod(prefix)) {
    return method.invoke(getDelegate(),args);
  }
  final boolean isGetterMethod=isGetterMethod(prefix);
  final boolean isSetterMethod=isSetterMethod(prefix);
  final boolean isAddToMethod=isAddToMethod(prefix);
  final boolean isRemoveFromMethod=isRemoveFromMethod(prefix);
  checkVisibility(getAuthenticationSession(),targetAdapter,objectMember);
  if (objectMember.isOneToOneAssociation()) {
    final OneToOneAssociation otoa=(OneToOneAssociation)objectMember;
    if (isGetterMethod) {
      return handleGetterMethodOnProperty(args,targetAdapter,otoa,methodName);
    }
    if (isSetterMethod) {
      checkUsability(getAuthenticationSession(),targetAdapter,objectMember);
      return handleSetterMethodOnProperty(args,getAuthenticationSession(),targetAdapter,otoa,methodName);
    }
  }
  if (objectMember.isOneToManyAssociation()) {
    final OneToManyAssociation otma=(OneToManyAssociation)objectMember;
    if (isGetterMethod) {
      return handleGetterMethodOnCollection(method,args,targetAdapter,otma,memberName);
    }
    if (isAddToMethod) {
      checkUsability(getAuthenticationSession(),targetAdapter,objectMember);
      return handleCollectionAddToMethod(args,targetAdapter,otma,methodName);
    }
    if (isRemoveFromMethod) {
      checkUsability(getAuthenticationSession(),targetAdapter,objectMember);
      return handleCollectionRemoveFromMethod(args,targetAdapter,otma,methodName);
    }
  }
  if (isGetterMethod) {
    throw new UnsupportedOperationException(String.format("Can only invoke 'get' on properties or collections; '%s' represents %s",methodName,decode(objectMember)));
  }
  if (isSetterMethod) {
    throw new UnsupportedOperationException(String.format("Can only invoke 'set' on properties; '%s' represents %s",methodName,decode(objectMember)));
  }
  if (isAddToMethod) {
    throw new UnsupportedOperationException(String.format("Can only invoke 'addTo' on collections; '%s' represents %s",methodName,decode(objectMember)));
  }
  if (isRemoveFromMethod) {
    throw new UnsupportedOperationException(String.format("Can only invoke 'removeFrom' on collections; '%s' represents %s",methodName,decode(objectMember)));
  }
  if (objectMember instanceof ObjectAction) {
    checkUsability(getAuthenticationSession(),targetAdapter,objectMember);
    final ObjectAction noa=(ObjectAction)objectMember;
    return handleActionMethod(args,getAuthenticationSession(),targetAdapter,noa,memberName);
  }
  throw new UnsupportedOperationException(String.format("Unknown member type '%s'",objectMember));
}
