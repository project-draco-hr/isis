{
class Customer {
    @SuppressWarnings("unused") @edu.umd.cs.findbugs.annotations.SuppressWarnings("UMAC_UNCALLABLE_METHOD_OF_ANONYMOUS_CLASS") public void someAction(    final int x,    final long y){
    }
    @SuppressWarnings("unused") @edu.umd.cs.findbugs.annotations.SuppressWarnings("UMAC_UNCALLABLE_METHOD_OF_ANONYMOUS_CLASS") public int default0SomeAction(){
      return 0;
    }
    @SuppressWarnings("unused") @edu.umd.cs.findbugs.annotations.SuppressWarnings("UMAC_UNCALLABLE_METHOD_OF_ANONYMOUS_CLASS") public long default1SomeAction(){
      return 0;
    }
  }
  Method actionMethod=findMethod(Customer.class,"someAction",new Class[]{int.class,long.class});
  Method default0Method=findMethod(Customer.class,"default0SomeAction",new Class[]{});
  Method default1Method=findMethod(Customer.class,"default1SomeAction",new Class[]{});
  ObjectActionPeer facetHolderWithParms=new JavaObjectActionPeer(Customer.class,actionMethod,void.class,reflector);
  reflector.setLoadSpecificationStringReturn(voidNoSpec);
  facetFactory.process(Customer.class,actionMethod,methodRemover,facetHolderWithParms);
  final Facet facet0=facetHolderWithParms.getParameters()[0].getFacet(ActionParameterDefaultsFacet.class);
  assertNotNull(facet0);
  assertTrue(facet0 instanceof ActionParameterDefaultsFacetViaMethod);
  final ActionParameterDefaultsFacetViaMethod actionDefaultFacetViaMethod0=(ActionParameterDefaultsFacetViaMethod)facet0;
  assertEquals(default0Method,actionDefaultFacetViaMethod0.getMethods().get(0));
  assertTrue(methodRemover.getRemoveMethodMethodCalls().contains(default0Method));
  final Facet facet1=facetHolderWithParms.getParameters()[1].getFacet(ActionParameterDefaultsFacet.class);
  assertNotNull(facet1);
  assertTrue(facet1 instanceof ActionParameterDefaultsFacetViaMethod);
  final ActionParameterDefaultsFacetViaMethod actionDefaultFacetViaMethod1=(ActionParameterDefaultsFacetViaMethod)facet1;
  assertEquals(default1Method,actionDefaultFacetViaMethod1.getMethods().get(0));
  assertTrue(methodRemover.getRemoveMethodMethodCalls().contains(default1Method));
}
