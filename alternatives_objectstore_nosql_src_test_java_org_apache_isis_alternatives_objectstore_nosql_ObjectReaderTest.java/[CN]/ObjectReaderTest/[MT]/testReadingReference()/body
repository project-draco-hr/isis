{
  reader2=context.mock(StateReader.class,"reader 2");
  context.checking(new Expectations(){
{
      one(reader2).readObjectType();
      will(returnValue(ExampleReferencePojo.class.getName()));
      one(reader2).readId();
      will(returnValue("4"));
      one(reader2).readVersion();
      will(returnValue("3"));
      one(reader2).readUser();
      will(returnValue("username"));
      one(reader2).readTime();
      will(returnValue("1020"));
      one(versionCreator).version("3","username","1020");
      one(keyCreator).oid("4");
      will(returnValue(SerialOid.createPersistent(4)));
      ;
      one(reader2).readField("reference1");
      will(returnValue("ref@3"));
      one(reader2).readField("reference2");
      will(returnValue("null"));
      one(keyCreator).oidFromReference("ref@3");
      will(returnValue(SerialOid.createPersistent(3)));
      ;
      one(keyCreator).specificationFromReference("ref@3");
      will(returnValue(IsisContext.getSpecificationLoader().loadSpecification(ExampleValuePojo.class)));
    }
  }
);
  ObjectAdapter readObject=objectReader.load(reader2,keyCreator,versionCreator);
  assertEquals(SerialOid.createPersistent(4),readObject.getOid());
  assertEquals(ResolveState.RESOLVED,readObject.getResolveState());
  ExampleReferencePojo pojo=(ExampleReferencePojo)readObject.getObject();
  assertEquals(null,pojo.getReference2());
  assertThat(pojo.getReference1(),CoreMatchers.instanceOf(ExampleValuePojo.class));
  context.assertIsSatisfied();
}
