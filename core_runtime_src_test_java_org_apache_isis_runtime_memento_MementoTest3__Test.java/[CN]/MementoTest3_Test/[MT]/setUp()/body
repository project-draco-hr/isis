{
  Logger.getRootLogger().setLevel(Level.OFF);
  emptySpecification=mockery.mock(ObjectSpecification.class,"empty specification");
  final ObjectSpecification rootSpecification=mockery.mock(ObjectSpecification.class);
  final CollectionFacet collectionFacet=mockery.mock(CollectionFacet.class);
  mockery.checking(new Expectations(){
{
      atLeast(1).of(rootSpecification).isCollection();
      will(returnValue(true));
      atLeast(1).of(rootSpecification).getFullName();
      will(returnValue(TestObject[].class.getName()));
      atLeast(1).of(rootSpecification).getFacet(CollectionFacet.class);
      will(returnValue(collectionFacet));
      atLeast(0).of(emptySpecification).getFullName();
      will(returnValue(TestObject.class.getName()));
    }
  }
);
  rootAdapter=mockery.mock(ObjectAdapter.class);
  oid=mockery.mock(Oid.class);
  final TypeOfFacet typeOfFacet=mockery.mock(TypeOfFacet.class,"element 1");
  final Iterator<?> mockIterator=mockery.mock(Iterator.class);
  mockery.checking(new Expectations(){
{
      atLeast(1).of(collectionFacet).size(rootAdapter);
      will(returnValue(2));
      atLeast(1).of(collectionFacet).getTypeOfFacet();
      will(returnValue(typeOfFacet));
      atLeast(1).of(typeOfFacet).valueSpec();
      will(returnValue(rootSpecification));
      atLeast(1).of(collectionFacet).iterator(rootAdapter);
      will(returnValue(mockIterator));
      one(mockIterator).hasNext();
      will(returnValue(true));
      one(mockIterator).next();
      element1=adapter("element",1,false);
      will(returnValue(element1));
      one(mockIterator).hasNext();
      will(returnValue(true));
      one(mockIterator).next();
      will(returnValue(adapter("element",2,false)));
      one(mockIterator).hasNext();
      will(returnValue(false));
      atLeast(1).of(rootAdapter).getSpecification();
      will(returnValue(rootSpecification));
      atLeast(1).of(rootAdapter).getOid();
      will(returnValue(oid));
      atLeast(1).of(rootAdapter).getResolveState();
      will(returnValue(ResolveState.RESOLVED));
    }
  }
);
  mockery.checking(new Expectations(){
{
    }
  }
);
  final IsisSessionFactory sessionFactory=mockery.mock(IsisSessionFactory.class);
  IsisContextStatic.createRelaxedInstance(sessionFactory);
  memento=new Memento(rootAdapter);
  data=memento.getData();
}
