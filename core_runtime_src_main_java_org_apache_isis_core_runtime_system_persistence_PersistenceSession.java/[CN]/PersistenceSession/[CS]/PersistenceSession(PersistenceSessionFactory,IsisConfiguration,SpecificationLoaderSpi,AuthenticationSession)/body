{
  ensureThatArg(persistenceSessionFactory,is(not(nullValue())),"persistence session factory required");
  this.configuration=configuration;
  this.specificationLoader=specificationLoader;
  this.authenticationSession=authenticationSession;
  this.persistenceSessionFactory=persistenceSessionFactory;
  this.servicesInjector=persistenceSessionFactory.getServicesInjector();
  this.applicationComponents=persistenceSessionFactory.getApplicationComponents();
  this.oidMarshaller=new OidMarshaller();
  this.oidGenerator=new OidGenerator(this,specificationLoader);
  this.adapterManager=new AdapterManagerDefault(this,configuration);
  this.persistenceQueryFactory=new PersistenceQueryFactory(getSpecificationLoader(),adapterManager);
  this.transactionManager=new IsisTransactionManager(this,servicesInjector);
  setState(State.NOT_INITIALIZED);
  final Properties properties=RuntimeContextFromSession.applicationPropertiesFrom(configuration);
  setProperties(properties);
  if (LOG.isDebugEnabled()) {
    LOG.debug("creating " + this);
  }
  final boolean concurrencyCheckingGloballyDisabled=configuration.getBoolean("isis.persistor.disableConcurrencyChecking",false);
  this.concurrencyCheckingGloballyEnabled=!concurrencyCheckingGloballyDisabled;
}
