{
  final Oid oid=collectionAdapter.getOid();
  final String collectionType=collectionAdapter.getSpecification().getFullName();
  final TypeOfFacet typeOfFacet=collectionAdapter.getSpecification().getFacet(TypeOfFacet.class);
  if (typeOfFacet == null) {
    throw new IsisException("No type of facet for collection " + collectionAdapter);
  }
  final String elementType=typeOfFacet.value().getName();
  final boolean hasAllElements=collectionAdapter.isTransient() || collectionAdapter.getResolveState().isResolved();
  ReferenceData[] elements;
  if (hasAllElements) {
    final CollectionFacet collectionFacet=CollectionFacetUtils.getCollectionFacetFromSpec(collectionAdapter);
    final Enumeration e=collectionFacet.elements(collectionAdapter);
    elements=new ReferenceData[collectionFacet.size(collectionAdapter)];
    int i=0;
    while (e.hasMoreElements()) {
      final ObjectAdapter element=(ObjectAdapter)e.nextElement();
      elements[i++]=serializeAdapter(element,graphDepth,knownObjects);
    }
  }
 else {
    elements=new ObjectData[0];
  }
  return this.dataFactory.createCollectionData(collectionType,elementType,oid,elements,hasAllElements,collectionAdapter.getVersion());
}
