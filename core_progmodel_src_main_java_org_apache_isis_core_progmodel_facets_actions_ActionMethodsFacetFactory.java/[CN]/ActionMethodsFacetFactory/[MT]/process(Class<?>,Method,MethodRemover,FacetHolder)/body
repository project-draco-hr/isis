{
  final String capitalizedName=NameUtils.capitalizeName(actionMethod.getName());
  final Class<?> returnType=actionMethod.getReturnType();
  final Class<?>[] paramTypes=actionMethod.getParameterTypes();
  final List<Facet> facets=new ArrayList<Facet>();
  final ObjectSpecification typeSpec=getSpecificationLookup().loadSpecification(cls);
  final ObjectSpecification returnSpec=getSpecificationLookup().loadSpecification(returnType);
  if (returnSpec != null) {
    facets.add(new ActionInvocationFacetViaMethod(actionMethod,typeSpec,returnSpec,holder,getAdapterMap()));
    checkForDebugPrefix(facets,capitalizedName,holder);
    checkForExplorationPrefix(facets,capitalizedName,holder);
    checkForExecutionLocationPrefix(facets,capitalizedName,holder);
  }
  removeMethod(methodRemover,actionMethod);
  final boolean forClass=(actionMethod.getModifiers() & Modifier.STATIC) > 0;
  findAndRemoveValidMethod(facets,methodRemover,cls,forClass,capitalizedName,returnType,paramTypes,holder);
  boolean oldChoicesOrDefaultsMethodsUsed=findAndRemoveParametersDefaultsMethod(facets,methodRemover,cls,forClass,capitalizedName,returnType,paramTypes,holder);
  oldChoicesOrDefaultsMethodsUsed=findAndRemoveParametersChoicesMethod(facets,methodRemover,cls,forClass,capitalizedName,returnType,paramTypes,holder) || oldChoicesOrDefaultsMethodsUsed;
  defaultNamedFacet(facets,methodRemover,capitalizedName,holder);
  findAndRemoveNameMethod(facets,methodRemover,cls,capitalizedName,new Class[]{},holder);
  findAndRemoveDescriptionMethod(facets,methodRemover,cls,capitalizedName,new Class[]{},holder);
  findAndRemoveAlwaysHideMethod(facets,methodRemover,cls,capitalizedName,paramTypes,holder);
  findAndRemoveProtectMethod(facets,methodRemover,cls,capitalizedName,paramTypes,holder);
  findAndRemoveHideForSessionMethod(facets,methodRemover,cls,capitalizedName,UserMemento.class,holder);
  findAndRemoveDisableForSessionMethod(facets,methodRemover,cls,capitalizedName,UserMemento.class,holder);
  findAndRemoveHideMethod(facets,methodRemover,cls,forClass,capitalizedName,paramTypes,holder);
  findAndRemoveDisableMethod(facets,methodRemover,cls,forClass,capitalizedName,paramTypes,holder);
  if (holder instanceof FacetedMethod) {
    final FacetedMethod memberPeer=(FacetedMethod)holder;
    if (memberPeer.getFeatureType().isAction()) {
      final List<FacetedMethodParameter> parameters=memberPeer.getParameters();
      findAndRemoveOptionalForActionParametersMethod(methodRemover,cls,capitalizedName,returnType,paramTypes,parameters);
      findAndRemoveNamesForActionParametersMethod(methodRemover,cls,capitalizedName,returnType,paramTypes,parameters);
      findAndRemoveDescriptionsforActionParametersMethod(methodRemover,cls,capitalizedName,returnType,paramTypes,parameters);
      findAndRemoveChoicesForActionParametersMethod(oldChoicesOrDefaultsMethodsUsed,methodRemover,cls,capitalizedName,paramTypes,parameters);
      findAndRemoveDefaultForActionParametersMethod(oldChoicesOrDefaultsMethodsUsed,methodRemover,cls,capitalizedName,paramTypes,parameters);
    }
  }
  return FacetUtil.addFacets(facets);
}
