{
  final CommandMementoDto dto=new CommandMementoDto();
  dto.setMajorVersion("1");
  dto.setMinorVersion("0");
  for (  ObjectAdapter targetAdapter : targetAdapters) {
    final RootOid rootOid=(RootOid)targetAdapter.getOid();
    final Bookmark bookmark=rootOid.asBookmark();
    dto.getTargets().add(bookmark.toOidDto());
  }
  final ActionDto actionDto=new ActionDto();
  dto.setAction(actionDto);
  final String actionIdentifier=CommandUtil.actionIdentifierFor(objectAction);
  actionDto.setActionIdentifier(actionIdentifier);
  List<ObjectActionParameter> actionParameters=objectAction.getParameters();
  for (int paramNum=0; paramNum < actionParameters.size(); paramNum++) {
    final ObjectActionParameter actionParameter=actionParameters.get(paramNum);
    final String parameterName=actionParameter.getName();
    final Class<?> paramType=actionParameter.getSpecification().getCorrespondingClass();
    ObjectAdapter argAdapter=argAdapters[paramNum];
    final Object arg=argAdapter != null ? argAdapter.getObject() : null;
    CommandMementoDtoUtils.addParamArg(actionDto.getParameters(),parameterName,paramType,arg,bookmarkService);
  }
  if (objectAction instanceof ObjectActionMixedIn) {
    final ObjectActionMixedIn actionMixedIn=(ObjectActionMixedIn)objectAction;
    final String mixinTypeName=actionMixedIn.getMixinType().getCorrespondingClass().getName();
    actionDto.setMixinFqClassName(mixinTypeName);
  }
  dto.setTransactionId(UUID.randomUUID().toString());
  return dto;
}
