{
  try {
    final InputStream input=connection.getInputStream();
    final BufferedReader reader=new BufferedReader(new InputStreamReader(input));
    final OutputStream output=connection.getOutputStream();
    final PrintWriter print=new PrintWriter(output);
    print.print("> ");
    print.flush();
    String line;
    while ((line=reader.readLine()) != null) {
      if ("shutdown".equals(line)) {
        awaitConnections=false;
        print.println("Server shutdown initiated...");
        print.flush();
        server.shutdown();
        break;
      }
 else       if ("quiesce".equals(line)) {
        isQuiescent=true;
        final String message="Placing server in a quiescent state";
        LOG.info(message);
        print.println(message);
        print.print("> ");
        print.flush();
      }
 else       if ("resume".equals(line)) {
        if (isQuiescent) {
          isQuiescent=false;
          final String message="Resuming from a quiescent state";
          LOG.info(message);
          print.println(message);
        }
 else {
          print.println("Can't resume as not currently in a quiescent state");
        }
        print.print("> ");
        print.flush();
      }
 else       if ("quit".equals(line)) {
        print.println("Bye");
        print.flush();
        break;
      }
 else       if ("status".equals(line)) {
        print.println("requests: " + requests);
        print.println("quiescent: " + isQuiescent);
        print.print("> ");
        print.flush();
      }
 else {
        print.println("Unknown command, valid commands are: quit, quiesce, status, resume, shutdown");
        print.print("> ");
        print.flush();
      }
    }
  }
 catch (  final IOException e) {
    LOG.error("networking failure",e);
  }
catch (  final RuntimeException e) {
    LOG.error("request failure",e);
  }
 finally {
    try {
      connection.close();
    }
 catch (    final IOException e) {
      LOG.warn("failure to close connection",e);
    }
  }
}
