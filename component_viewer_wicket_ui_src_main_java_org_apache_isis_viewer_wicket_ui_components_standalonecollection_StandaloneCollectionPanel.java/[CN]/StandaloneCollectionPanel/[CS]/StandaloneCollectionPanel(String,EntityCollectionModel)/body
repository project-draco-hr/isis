{
  super(id,entityCollectionModel);
  ActionModel actionModel=entityCollectionModel.getActionModelHint();
  ObjectAction action=actionModel.getActionMemento().getAction();
  addOrReplace(new Label(StandaloneCollectionPanel.ID_ACTION_NAME,Model.of(action.getName())));
  this.actionPromptModalWindow=ActionPromptModalWindow.newModalWindow(ID_ACTION_PROMPT_MODAL_WINDOW);
  addOrReplace(actionPromptModalWindow);
  final CollectionSelectorHelper selectorHelper=new CollectionSelectorHelper(entityCollectionModel,getComponentFactoryRegistry());
  final List<ComponentFactory> componentFactories=selectorHelper.getComponentFactories();
  if (componentFactories.size() <= 1) {
    permanentlyHide(ID_SELECTOR_DROPDOWN);
    this.selectorDropdownPanel=null;
  }
 else {
    CollectionSelectorPanel selectorDropdownPanel=new CollectionSelectorPanel(ID_SELECTOR_DROPDOWN,entityCollectionModel,new CollectionContentsMultipleViewsPanelFactory());
    final Model<ComponentFactory> componentFactoryModel=new Model<>();
    final int selected=selectorHelper.honourViewHintElseDefault(selectorDropdownPanel);
    ComponentFactory selectedComponentFactory=componentFactories.get(selected);
    componentFactoryModel.setObject(selectedComponentFactory);
    this.setOutputMarkupId(true);
    addOrReplace(selectorDropdownPanel);
    this.selectorDropdownPanel=selectorDropdownPanel;
  }
  final ComponentFactoryRegistry componentFactoryRegistry=getComponentFactoryRegistry();
  componentFactoryRegistry.addOrReplaceComponent(this,ComponentType.COLLECTION_CONTENTS,entityCollectionModel);
  bulkActionsHelper=new BulkActionsHelper(entityCollectionModel);
}
