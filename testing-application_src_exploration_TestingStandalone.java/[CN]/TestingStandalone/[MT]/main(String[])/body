{
  BasicConfigurator.configure();
  NakedObjectsClient nakedObjects=new NakedObjectsClient();
  Configuration configuration=new Configuration(new ConfigurationPropertiesLoader(DEFAULT_CONFIG,false));
  nakedObjects.setConfiguration(configuration);
  if (configuration.getString(SHOW_EXPLORATION_OPTIONS) == null) {
    configuration.add(SHOW_EXPLORATION_OPTIONS,"yes");
  }
  PropertyConfigurator.configure(configuration.getProperties("log4j"));
  Logger log=Logger.getLogger("Naked Objects");
  log.info(AboutNakedObjects.getName());
  log.info(AboutNakedObjects.getVersion());
  log.info(AboutNakedObjects.getBuildId());
  setUpLocale();
  SplashWindow splash=null;
  boolean noSplash=configuration.getBoolean("nosplash",false);
  if (!noSplash) {
    splash=new SplashWindow();
  }
  try {
    JavaBusinessObjectContainer container=new JavaBusinessObjectContainer();
    JavaObjectFactory objectFactory=new JavaObjectFactory();
    objectFactory.setContainer(container);
    TransientObjectStore tos=new TransientObjectStore();
    NakedObjectStore objectStore=new ObjectStoreLogger(tos,"store.log");
    OidGenerator oidGenerator=new SimpleOidGenerator();
    DefaultPersistAlgorithm persistAlgorithm=new DefaultPersistAlgorithm();
    persistAlgorithm.setOidGenerator(oidGenerator);
    LocalObjectManager lom=new LocalObjectManager();
    lom.setObjectStore(objectStore);
    lom.setCheckObjectsForDirtyFlag(true);
    lom.setPersistAlgorithm(persistAlgorithm);
    NakedObjectManager objectManager=new ObjectManagerLogger(lom,"manager.log");
    nakedObjects.setObjectManager(objectManager);
    NakedObjectSpecificationLoader specificationLoader=new JavaSpecificationLoader();
    nakedObjects.setSpecificationLoader(specificationLoader);
    LocalReflectionFactory reflectionFactory=new LocalReflectionFactory();
    JavaAdapterFactory reflectorFactory=new JavaAdapterFactory();
    ObjectLoaderImpl objectLoader=new ObjectLoaderImpl();
    objectLoader.setObjectFactory(objectFactory);
    objectLoader.setPojoAdapterMap(new PojoAdapterHashMap());
    objectLoader.setAdapterFactory(reflectorFactory);
    objectLoader.setIdentityAdapterMap(new IdentityAdapterHashMap());
    nakedObjects.setObjectLoader(objectLoader);
    nakedObjects.setReflectionFactory(reflectionFactory);
    JavaFixtureBuilder fixtureBuilder=new JavaFixtureBuilder();
    fixtureBuilder.addFixture(new EcsFixture());
    fixtureBuilder.installFixtures();
    nakedObjects.setSession(new SimpleSession());
    SkylarkViewer viewer=new SkylarkViewer();
    viewer.setUpdateNotifier(new ViewUpdateNotifier());
    Context ecs=new Context();
    viewer.setApplication(ecs);
    viewer.setShutdownListener(new ObjectViewingMechanismListener(){
      public void viewerClosing(){
        System.out.println("EXITED");
        System.exit(0);
      }
    }
);
    viewer.init();
  }
  finally {
    if (splash != null) {
      splash.toFront();
      splash.removeAfterDelay(3);
    }
  }
}
