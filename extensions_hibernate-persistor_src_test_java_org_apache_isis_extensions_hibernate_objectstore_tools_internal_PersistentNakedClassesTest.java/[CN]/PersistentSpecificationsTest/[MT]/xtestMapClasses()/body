{
  final PersistentSpecifications classes=PersistentSpecifications.buildPersistentSpecifications(Boolean.TRUE);
  int count=0;
  for (final Iterator<?> iter=classes.getPersistentClasses(); iter.hasNext(); ) {
    iter.next();
    count++;
  }
  assertTrue(classes.isPersistentClass(BiDirectional.class.getName()));
  assertTrue(classes.isPersistentClass(ManyToMany.class.getName()));
  assertTrue(classes.isPersistentClass(OneToMany.class.getName()));
  assertTrue(classes.isPersistentClass(OneToOne.class.getName()));
  assertEquals("classes count",4,count);
  final PersistentSpecification bidirPc=classes.getPersistentClass(BiDirectional.class.getName());
  assertTrue("!assn secondOneToMany",!bidirPc.hasAssociation("secondonetomany"));
  assertTrue("assn oneToMany",bidirPc.hasAssociation("oneToMany"));
  assertTrue("assn manyToMany",bidirPc.hasAssociation("manyToMany"));
  assertTrue("assn oneToOne",bidirPc.hasAssociation("oneToOne"));
  final Association assnManyToMany=bidirPc.getAssociation("manyToMany");
  assertTrue("!many to many inverse",!assnManyToMany.isInverse());
  assertEquals("many to many type",ManyToMany.class.getName(),assnManyToMany.getPersistentClass().getName());
  final PersistentSpecification m2mPc=classes.getPersistentClass(ManyToMany.class.getName());
  assertTrue("assn many",m2mPc.hasAssociation("many"));
  final Association assnMany=m2mPc.getAssociation("many");
  assertTrue("many inverse",assnMany.isInverse());
  assertEquals("many type",BiDirectional.class.getName(),assnMany.getPersistentClass().getName());
}
