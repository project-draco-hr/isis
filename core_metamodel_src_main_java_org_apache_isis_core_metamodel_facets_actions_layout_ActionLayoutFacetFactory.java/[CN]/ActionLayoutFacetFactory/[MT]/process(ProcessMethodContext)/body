{
  final FacetHolder holder=processMethodContext.getFacetHolder();
  Properties properties=processMethodContext.metadataProperties("actionLayout");
  if (properties == null) {
    properties=processMethodContext.metadataProperties("layout");
  }
  final ActionLayout actionLayout=Annotations.getAnnotation(processMethodContext.getMethod(),ActionLayout.class);
  BookmarkPolicyFacet bookmarkableFacet=BookmarkPolicyFacetOnActionFromLayoutProperties.create(properties,holder);
  if (bookmarkableFacet == null) {
    bookmarkableFacet=BookmarkPolicyFacetForActionLayoutAnnotation.create(actionLayout,holder);
  }
  FacetUtil.addFacet(bookmarkableFacet);
  CssClassFacet cssClassFacet=CssClassFacetOnActionFromLayoutProperties.create(properties,holder);
  if (cssClassFacet == null) {
    cssClassFacet=CssClassFacetForActionLayoutAnnotation.create(actionLayout,holder);
  }
  FacetUtil.addFacet(cssClassFacet);
  CssClassFaFacet cssClassFaFacet=CssClassFaFacetOnActionFromLayoutProperties.create(properties,holder);
  if (cssClassFaFacet == null) {
    cssClassFaFacet=CssClassFaFacetForActionLayoutAnnotation.create(actionLayout,holder);
  }
  FacetUtil.addFacet(cssClassFaFacet);
  DescribedAsFacet describedAsFacet=DescribedAsFacetOnActionFromLayoutProperties.create(properties,holder);
  if (describedAsFacet == null) {
    describedAsFacet=DescribedAsFacetForActionLayoutAnnotation.create(actionLayout,holder);
  }
  FacetUtil.addFacet(describedAsFacet);
  HiddenFacet hiddenFacet=HiddenFacetOnActionFromLayoutProperties.create(properties,holder);
  if (hiddenFacet == null) {
    hiddenFacet=HiddenFacetForActionLayoutAnnotation.create(actionLayout,holder);
  }
  FacetUtil.addFacet(hiddenFacet);
  NamedFacet namedFacet=NamedFacetOnActionFromLayoutProperties.create(properties,holder);
  if (namedFacet == null) {
    namedFacet=NamedFacetForActionLayoutAnnotation.create(actionLayout,holder);
  }
  FacetUtil.addFacet(namedFacet);
  ActionPositionFacet actionPositionFacet=ActionPositionFacetOnActionFromLayoutProperties.create(properties,holder);
  if (actionPositionFacet == null) {
    actionPositionFacet=ActionPositionFacetForActionLayoutAnnotation.create(actionLayout,holder);
  }
  if (actionPositionFacet == null) {
    actionPositionFacet=new ActionPositionFacetFallback(holder);
  }
  FacetUtil.addFacet(actionPositionFacet);
  if (isContributingServiceOrMixinObject(processMethodContext)) {
    NotContributedFacet notContributedFacet=NotContributedFacetForLayoutProperties.create(properties,holder);
    if (notContributedFacet == null) {
      notContributedFacet=NotContributedFacetForActionLayoutAnnotation.create(actionLayout,holder);
    }
    FacetUtil.addFacet(notContributedFacet);
  }
}
