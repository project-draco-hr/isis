{
  String objectId=request.getOptionalProperty(OBJECT);
  final String method=request.getOptionalProperty(METHOD);
  final String forwardResultTo=request.getOptionalProperty(VIEW);
  final String forwardVoidTo=request.getOptionalProperty(VOID);
  String resultOverride=request.getOptionalProperty(RESULT_OVERRIDE);
  final String resultName=request.getOptionalProperty(RESULT_NAME);
  final String resultNameSegment=resultName == null ? "" : "&amp;" + RESULT_NAME + "="+ resultName;
  final String scope=request.getOptionalProperty(SCOPE);
  final String scopeSegment=scope == null ? "" : "&amp;" + SCOPE + "="+ scope;
  final String confirm=request.getOptionalProperty(CONFIRM);
  final String completionMessage=request.getOptionalProperty(MESSAGE);
  final String idName=request.getOptionalProperty(ID,method);
  final String className=request.getOptionalProperty(CLASS);
  final String confirmSegment=confirm == null ? "" : "&amp;" + "_" + CONFIRM + "="+ URLEncoder.encode(confirm);
  final String messageSegment=completionMessage == null ? "" : "&amp;" + "_" + MESSAGE + "="+ URLEncoder.encode(completionMessage);
  final RequestContext context=request.getContext();
  final ObjectAdapter object=MethodsUtils.findObject(context,objectId);
  final String version=context.mapVersion(object);
  final ObjectAction action=MethodsUtils.findAction(object,method);
  final ActionContent parameterBlock=new ActionContent(action);
  request.setBlockContent(parameterBlock);
  request.pushNewBuffer();
  request.processUtilCloseTag();
  final String text=request.popBuffer();
  final String[] parameters=parameterBlock.getParameters();
  final String target;
  if (action.isContributed()) {
    System.arraycopy(parameters,0,parameters,1,parameters.length - 1);
    parameters[0]=request.getContext().mapObject(object,Scope.REQUEST);
    target=request.getContext().mapObject(action.realTarget(object),Scope.REQUEST);
    if (!action.hasReturn() && resultOverride == null) {
      resultOverride=parameters[0];
    }
  }
 else {
    target=StringEscapeUtils.escapeHtml(request.getContext().mapObject(object,Scope.INTERACTION));
  }
  if (MethodsUtils.isVisibleAndUsable(object,action,where)) {
    writeLink(request,idName,className,target,version,method,forwardResultTo,forwardVoidTo,resultNameSegment,resultOverride,scopeSegment,confirmSegment,messageSegment,context,action,parameters,text);
  }
  request.popBlockContent();
}
