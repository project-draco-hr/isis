{
  Logger.getRootLogger().setLevel(Level.OFF);
  system=new TestProxySystem();
  system.init();
  Class<TestObjectWithCollection> targetClass=TestObjectWithCollection.class;
  MemberIdentifier identifer=new MemberIdentifierImpl(targetClass.getName());
  Class elementType=TestPojo.class;
  collectionField=new JavaCollectionAssociation(identifer,elementType);
  Method getMethod=targetClass.getMethod("getList",new Class[0]);
  collectionField.addFacet(new JavaBeanPropertyAccessorMethod(getMethod,collectionField));
  Method addToMethod=targetClass.getMethod("addToList",new Class[]{Object.class});
  collectionField.addFacet(new AddToCollectionMethodFacet(addToMethod,collectionField));
  Method removeFromMethod=targetClass.getMethod("removeFromList",new Class[]{Object.class});
  collectionField.addFacet(new RemoveFromCollectionMethodFacet(removeFromMethod,collectionField));
  Method clearMethod=targetClass.getMethod("clearList",new Class[0]);
  collectionField.addFacet(new ClearCollectionMethodFacet(clearMethod,collectionField));
  Method validateAddToMethod=targetClass.getMethod("validateAddToList",new Class[]{Object.class});
  collectionField.addFacet(new AddToCollectionValidMethodFacet(validateAddToMethod,collectionField));
  Method validateRemoveFromMethod=targetClass.getMethod("validateRemoveFromList",new Class[]{Object.class});
  collectionField.addFacet(new RemoveFromCollectionValidMethodFacet(validateRemoveFromMethod,collectionField));
  collection=new Vector();
  testPojo=new TestObjectWithCollection(collection,false);
  testAdapter=system.createPersistentTestObject(testPojo);
}
