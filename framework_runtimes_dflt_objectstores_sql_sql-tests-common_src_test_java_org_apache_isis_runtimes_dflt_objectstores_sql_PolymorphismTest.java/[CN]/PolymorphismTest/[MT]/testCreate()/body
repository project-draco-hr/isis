{
  SqlIntegrationTestSingleton.drop("ISIS_POLYTESTCLASS");
  SqlIntegrationTestSingleton.drop("ISIS_POLYSUBCLASSONE");
  SqlIntegrationTestSingleton.drop("ISIS_POLYSUBCLASSTWO");
  SqlIntegrationTestSingleton.drop("ISIS_POLYINTERFACEIMPLA");
  SqlIntegrationTestSingleton.drop("ISIS_POLYINTERFACEIMPLB");
  SqlIntegrationTestSingleton.drop("ISIS_POLYSELFREFCLASS");
  final SqlDataClassFactory factory=SqlIntegrationTestSingleton.getSqlDataClassFactory();
  final PolyTestClass polyTestClass=factory.newPolyTestClass();
  polyTestClass.setString("polyTestClassString");
  PolySelfRefClass polySelfRefClassParent=factory.newPolySelfRefClass();
  polySelfRefClassParent.setString("Parent");
  PolySelfRefClass polySelfRefClassChild1=factory.newPolySelfRefClass();
  polySelfRefClassChild1.setString(CHILD_1);
  polySelfRefClassParent.addToPolySelfRefClasses(polySelfRefClassChild1);
  PolySelfRefClass polySelfRefClassChild2=factory.newPolySelfRefClass();
  polySelfRefClassChild2.setString("Child 2");
  polySelfRefClassParent.addToPolySelfRefClasses(polySelfRefClassChild2);
  factory.save(polySelfRefClassChild2);
  PolySelfRefClass polySelfRefClassChild3=factory.newPolySelfRefClass();
  polySelfRefClassChild3.setString("Child 1 of Child 1");
  polySelfRefClassChild1.addToPolySelfRefClasses(polySelfRefClassChild3);
  factory.save(polySelfRefClassChild3);
  factory.save(polySelfRefClassChild1);
  factory.save(polySelfRefClassParent);
  polyTestClass.setPolySelfRefClass(polySelfRefClassParent);
  polyIntImpA=factory.newPolyInterfaceImplA();
  polyIntImpA.setString(IMPL_A_STRING);
  polyIntImpA.setSpecial("special");
  factory.save(polyIntImpA);
  polyTestClass.setPolyInterfaceType(polyIntImpA);
  factory.save(polyTestClass);
  if (getProperties().getProperty("isis.persistor") == "in-memory") {
    getSingletonInstance().setState(1);
  }
}
