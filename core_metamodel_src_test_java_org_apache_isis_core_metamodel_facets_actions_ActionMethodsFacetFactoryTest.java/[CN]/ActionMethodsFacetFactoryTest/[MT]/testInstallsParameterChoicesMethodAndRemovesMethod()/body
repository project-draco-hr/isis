{
  final ActionParameterChoicesFacetViaMethodFactory facetFactory=new ActionParameterChoicesFacetViaMethodFactory();
  injectServicesIntoAndAllowingServiceInjectorLookups(facetFactory);
  programmableReflector.setLoadSpecificationStringReturn(voidSpec);
class Customer {
    @SuppressWarnings("unused") public void someAction(    final int x,    final long y,    final long z){
    }
    @SuppressWarnings("unused") public Collection<Integer> choices0SomeAction(){
      return Collections.emptyList();
    }
    @SuppressWarnings("unused") public List<Long> choices1SomeAction(){
      return Collections.emptyList();
    }
    @SuppressWarnings("unused") public Set<Long> choices2SomeAction(){
      return Collections.emptySet();
    }
  }
  final Method actionMethod=findMethod(Customer.class,"someAction",new Class[]{int.class,long.class,long.class});
  final Method choices0Method=findMethod(Customer.class,"choices0SomeAction",new Class[]{});
  final Method choices1Method=findMethod(Customer.class,"choices1SomeAction",new Class[]{});
  final Method choices2Method=findMethod(Customer.class,"choices2SomeAction",new Class[]{});
  final FacetedMethod facetHolderWithParms=FacetedMethod.createForAction(Customer.class,actionMethod);
  facetFactory.process(new ProcessMethodContext(Customer.class,null,null,actionMethod,methodRemover,facetHolderWithParms));
  final Facet facet0=facetHolderWithParms.getParameters().get(0).getFacet(ActionParameterChoicesFacet.class);
  assertNotNull(facet0);
  assertTrue(facet0 instanceof ActionParameterChoicesFacetViaMethod);
  final ActionParameterChoicesFacetViaMethod actionChoicesFacetViaMethod0=(ActionParameterChoicesFacetViaMethod)facet0;
  assertEquals(choices0Method,actionChoicesFacetViaMethod0.getMethods().get(0));
  assertTrue(methodRemover.getRemovedMethodMethodCalls().contains(choices0Method));
  final Facet facet1=facetHolderWithParms.getParameters().get(1).getFacet(ActionParameterChoicesFacet.class);
  assertNotNull(facet1);
  assertTrue(facet1 instanceof ActionParameterChoicesFacetViaMethod);
  final ActionParameterChoicesFacetViaMethod actionChoicesFacetViaMethod1=(ActionParameterChoicesFacetViaMethod)facet1;
  assertEquals(choices1Method,actionChoicesFacetViaMethod1.getMethods().get(0));
  assertTrue(methodRemover.getRemovedMethodMethodCalls().contains(choices1Method));
  final Facet facet2=facetHolderWithParms.getParameters().get(2).getFacet(ActionParameterChoicesFacet.class);
  assertNotNull(facet2);
  assertTrue(facet2 instanceof ActionParameterChoicesFacetViaMethod);
  final ActionParameterChoicesFacetViaMethod actionChoicesFacetViaMethod2=(ActionParameterChoicesFacetViaMethod)facet2;
  assertEquals(choices2Method,actionChoicesFacetViaMethod2.getMethods().get(0));
  assertTrue(methodRemover.getRemovedMethodMethodCalls().contains(choices2Method));
}
