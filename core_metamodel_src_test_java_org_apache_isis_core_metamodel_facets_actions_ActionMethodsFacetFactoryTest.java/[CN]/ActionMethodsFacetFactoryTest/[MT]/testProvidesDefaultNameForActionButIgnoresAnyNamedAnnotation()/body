{
  final ActionNamedDebugExplorationFacetFactory facetFactory=new ActionNamedDebugExplorationFacetFactory();
  facetFactory.setSpecificationLoader(programmableReflector);
  facetFactory.setDeploymentCategory(DeploymentCategory.PRODUCTION);
  facetFactory.setServicesInjector(mockServicesInjector);
  context.checking(new Expectations(){
{
      allowing(mockServicesInjector).lookupService(AuthenticationSessionProvider.class);
      will(returnValue(mockAuthenticationSessionProvider));
    }
  }
);
  programmableReflector.setLoadSpecificationStringReturn(voidSpec);
class Customer {
    @SuppressWarnings("unused") @Named("Renamed an action with a named annotation") public void anActionWithNamedAnnotation(){
    }
  }
  final Method method=findMethod(Customer.class,"anActionWithNamedAnnotation");
  facetFactory.process(new ProcessMethodContext(Customer.class,null,null,method,methodRemover,facetedMethod));
  final Facet facet=facetedMethod.getFacet(NamedFacet.class);
  assertNotNull(facet);
  assertTrue(facet instanceof NamedFacet);
  final NamedFacet namedFacet=(NamedFacet)facet;
  assertEquals("An Action With Named Annotation",namedFacet.value());
}
