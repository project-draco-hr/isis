{
  final HiddenFacetStaticMethodFactory facetFactory=new HiddenFacetStaticMethodFactory();
  facetFactory.setDeploymentCategory(DeploymentCategory.PRODUCTION);
  facetFactory.setServicesInjector(mockServicesInjector);
  context.checking(new Expectations(){
{
      allowing(mockServicesInjector).lookupService(AuthenticationSessionProvider.class);
      will(returnValue(mockAuthenticationSessionProvider));
    }
  }
);
  facetFactory.setSpecificationLoader(programmableReflector);
  final Method actionMethod=findMethod(CustomerStatic.class,"someAction",new Class[]{int.class,Long.class});
  final Method alwaysHideMethod=findMethod(CustomerStatic.class,"alwaysHideSomeAction",new Class[]{});
  programmableReflector.setLoadSpecificationStringReturn(voidSpec);
  facetFactory.process(new ProcessMethodContext(CustomerStatic.class,null,null,actionMethod,methodRemover,facetedMethod));
  final HiddenFacetOnStaticMethod facet=facetedMethod.getFacet(HiddenFacetOnStaticMethod.class);
  assertNotNull(facet);
  assertEquals(When.ALWAYS,facet.when());
  assertTrue(methodRemover.getRemovedMethodMethodCalls().contains(alwaysHideMethod));
}
