{
  final HiddenFacetStaticMethodFactory facetFactory=new HiddenFacetStaticMethodFactory();
  facetFactory.setSpecificationLookup(programmableReflector);
  final Method actionMethod=findMethod(CustomerStatic.class,"someAction",new Class[]{int.class,Long.class});
  final Method alwaysHideMethod=findMethod(CustomerStatic.class,"alwaysHideSomeAction",new Class[]{});
  programmableReflector.setLoadSpecificationStringReturn(voidSpec);
  facetFactory.process(new ProcessMethodContext(CustomerStatic.class,null,null,actionMethod,methodRemover,facetedMethod));
  final Facet facet=facetedMethod.getFacet(HiddenFacet.class);
  assertNotNull(facet);
  assertTrue(facet instanceof HiddenFacetAbstract);
  final HiddenFacetAbstract hiddenFacetAbstract=(HiddenFacetAbstract)facet;
  assertEquals(When.ALWAYS,hiddenFacetAbstract.when());
  assertTrue(methodRemover.getRemovedMethodMethodCalls().contains(alwaysHideMethod));
}
