{
  super.setUp();
  mockServicesInjector=context.mock(ServicesInjector.class);
  mockTranslationService=context.mock(TranslationService.class);
  mockPersistenceSessionServiceInternal=context.mock(PersistenceSessionServiceInternal.class);
  mockDeploymentCategoryProvider=context.mock(DeploymentCategoryProvider.class);
  mockAuthenticationSessionProvider=context.mock(AuthenticationSessionProvider.class);
  stubConfigurationServiceInternal=new IsisConfigurationDefault(null);
  final AuthenticationSession mockAuthenticationSession=context.mock(AuthenticationSession.class);
  context.checking(new Expectations(){
{
      allowing(mockDeploymentCategoryProvider).getDeploymentCategory();
      will(returnValue(DeploymentCategory.PRODUCTION));
      allowing(mockAuthenticationSessionProvider).getAuthenticationSession();
      will(returnValue(mockAuthenticationSession));
      allowing(mockServicesInjector).lookupService(TranslationService.class);
      will(returnValue(mockTranslationService));
      allowing(mockServicesInjector).lookupService(AuthenticationSessionProvider.class);
      will(returnValue(mockAuthenticationSessionProvider));
      allowing(mockServicesInjector).getAuthenticationSessionProvider();
      will(returnValue(mockAuthenticationSessionProvider));
      allowing(mockServicesInjector).getConfigurationServiceInternal();
      will(returnValue(stubConfigurationServiceInternal));
      allowing(mockServicesInjector).lookupService(DeploymentCategoryProvider.class);
      will(returnValue(mockDeploymentCategoryProvider));
      allowing(mockServicesInjector).getDeploymentCategoryProvider();
      will(returnValue(mockDeploymentCategoryProvider));
      allowing(mockServicesInjector).getSpecificationLoader();
      will(returnValue(mockSpecificationLoader));
      allowing(mockDeploymentCategoryProvider).getDeploymentCategory();
      will(returnValue(DeploymentCategory.PRODUCTION));
      allowing(mockServicesInjector).getPersistenceSessionServiceInternal();
      will(returnValue(mockPersistenceSessionServiceInternal));
    }
  }
);
}
