{
  NameCacheEntry name;
  ElementDecl element;
  boolean haveAttributes=false;
  boolean hasContent=true;
  int startLine;
  name=maybeGetNameCacheEntry();
  if (name == null)   return false;
  if (validator != null)   validator.consume(name.name);
  element=(ElementDecl)elements.get(name.name);
  if (supportValidation && isValidating) {
    if (element == null || element.contentType == null) {
      error("V-005",new Object[]{name.name});
      element=new ElementDecl(name.name);
      element.contentType=strANY;
      elements.put(name.name,element);
    }
    if (validator == null && rootElementName != null && !rootElementName.equals(name.name))     error("V-006",new Object[]{name.name,rootElementName});
  }
  startLine=in.getLineNumber();
  boolean sawWhite=in.maybeWhitespace();
  Vector exceptions=null;
  if (namespaces) {
    nsSupport.pushContext();
    seenNSDecl=false;
  }
  for (; ; ) {
    if (in.peekc('>'))     break;
    if (in.peekc('/')) {
      hasContent=false;
      break;
    }
    if (!sawWhite)     fatal("P-030");
    String attQName;
    AttributeDecl info;
    String value;
    attQName=maybeGetName();
    if (attQName == null)     fatal("P-031",new Object[]{new Character(getc())});
    if (attTmp.getValue(attQName) != null)     fatal("P-032",new Object[]{attQName});
    in.maybeWhitespace();
    nextChar('=',"F-026",attQName);
    in.maybeWhitespace();
    doLexicalPE=false;
    parseLiteral(false);
    sawWhite=in.maybeWhitespace();
    info=(element == null) ? null : (AttributeDecl)element.attributes.get(attQName);
    if (info == null) {
      if (supportValidation && isValidating)       error("V-007",new Object[]{attQName,name.name});
      value=strTmp.toString();
    }
 else {
      if (!AttributeDecl.CDATA.equals(info.type)) {
        value=normalize(!info.isFromInternalSubset);
        if (supportValidation && isValidating)         validateAttributeSyntax(info,value);
      }
 else       value=strTmp.toString();
      if (supportValidation && isValidating && info.isFixed&& !value.equals(info.defaultValue))       error("V-008",new Object[]{attQName,name.name,info.defaultValue});
    }
    if (XmlLang.equals(attQName) && !isXmlLang(value))     error("P-033",new Object[]{value});
    String type=(info == null) ? AttributeDecl.CDATA : info.type;
    String defaultValue=(info == null) ? null : info.defaultValue;
    if (namespaces) {
      exceptions=processAttributeNS(attQName,type,value,defaultValue,true,false,exceptions);
    }
 else {
      attTmp.addAttribute("","",attQName,type,value,defaultValue,true);
    }
    haveAttributes=true;
  }
  if (element != null)   attTmp.setIdAttributeName(element.id);
  if (element != null && element.attributes.size() != 0) {
    haveAttributes=defaultAttributes(element) || haveAttributes;
  }
  if (seenNSDecl) {
    int length=attTmp.getLength();
    for (int i=0; i < length; i++) {
      String attQName=attTmp.getQName(i);
      if (attQName.startsWith("xmlns")) {
        if (attQName.length() == 5 || attQName.charAt(5) == ':') {
          continue;
        }
      }
      String attName[]=processName(attQName,true,false);
      attTmp.setURI(i,attName[0]);
      attTmp.setLocalName(i,attName[1]);
    }
  }
 else   if (exceptions != null && errHandler != null) {
    for (int i=0; i < exceptions.size(); i++) {
      errHandler.error((SAXParseException)(exceptions.elementAt(i)));
    }
  }
  if (namespaces) {
    String[] parts=processName(name.name,false,false);
    contentHandler.startElement(parts[0],parts[1],parts[2],attTmp);
  }
 else {
    contentHandler.startElement("","",name.name,attTmp);
  }
  if (haveAttributes) {
    attTmp.clear();
    if (supportValidation && isValidating && namespaces&& !prefixes) {
      nsAttTmp.removeAllElements();
    }
  }
  validator=newValidator(element);
  if (hasContent) {
    content(element,false,validator);
    if (!in.peek(name.name,name.chars))     fatal("P-034",new Object[]{name.name,new Integer(startLine)});
    in.maybeWhitespace();
  }
  nextChar('>',"F-027",name.name);
  validator.done();
  if (namespaces) {
    String[] parts=processName(name.name,false,false);
    contentHandler.endElement(parts[0],parts[1],parts[2]);
    Enumeration prefixes=nsSupport.getDeclaredPrefixes();
    while (prefixes.hasMoreElements()) {
      String prefix=(String)prefixes.nextElement();
      contentHandler.endPrefixMapping(prefix);
    }
    nsSupport.popContext();
  }
 else {
    contentHandler.endElement("","",name.name);
  }
  return true;
}
