{
  AuthenticationSession session=context.getSession();
  if (session == null) {
    throw new NotLoggedInException();
  }
  try {
    String objectId=context.getParameter("_" + OBJECT);
    String version=context.getParameter("_" + VERSION);
    String resultName=context.getParameter("_" + RESULT_NAME);
    resultName=resultName == null ? RequestContext.RESULT : resultName;
    String override=context.getParameter("_" + RESULT_OVERRIDE);
    String message=context.getParameter("_" + MESSAGE);
    ObjectAdapter adapter=context.getMappedObject(objectId);
    if (adapter.isTransient()) {
      List<ObjectAssociation> fields=adapter.getSpecification().getAssociations();
      for (int i=0; i < fields.size(); i++) {
        ObjectAssociation field=fields.get(i);
        String fieldId=field.getId();
        String newEntry=context.getParameter(fieldId);
        if (fields.get(i).isOneToManyAssociation()) {
          continue;
        }
        if (newEntry != null && newEntry.equals("-OTHER-")) {
          newEntry=context.getParameter(fieldId + "-other");
        }
        if (newEntry == null) {
          ObjectSpecification spec=field.getSpecification();
          if (spec.isOfType(IsisContext.getSpecificationLoader().loadSpecification(boolean.class)) || spec.isOfType(IsisContext.getSpecificationLoader().loadSpecification(Boolean.class))) {
            newEntry=FALSE;
          }
 else {
            continue;
          }
        }
        ObjectAdapter originalValue=null;
        if (fields.get(i).getSpecification().containsFacet(ParseableFacet.class)) {
          ParseableFacet facet=fields.get(i).getSpecification().getFacet(ParseableFacet.class);
          ObjectAdapter newValue=facet.parseTextEntry(originalValue,newEntry);
          ((OneToOneAssociation)fields.get(i)).setAssociation(adapter,newValue);
        }
 else {
          ObjectAdapter associate=context.getMappedObject(newEntry);
          if (associate != null) {
            IsisContext.getPersistenceSession().resolveImmediately(associate);
          }
          ((OneToOneAssociation)fields.get(i)).setAssociation(adapter,associate);
        }
      }
    }
    List<ObjectAssociation> fields=adapter.getSpecification().getAssociations(ObjectAssociationFilters.dynamicallyVisible(session,adapter));
    FormState entryState=validateObject(context,adapter,fields);
    Version adapterVersion=adapter.getVersion();
    Version formVersion=context.getVersion(version);
    if (formVersion != null && adapterVersion.different(formVersion)) {
      IsisContext.getMessageBroker().addMessage("The " + adapter.getSpecification().getSingularName() + " was edited "+ "by another user ("+ adapterVersion.getUser()+ "). Please  make your changes based on their changes.");
      String view=context.getParameter("_" + ERRORS);
      context.setRequestPath(view,Dispatcher.EDIT);
      entryState.setForm(objectId);
      context.addVariable(ENTRY_FIELDS,entryState,Scope.REQUEST);
      context.addVariable(resultName,objectId,Scope.REQUEST);
      if (override != null) {
        context.addVariable(resultName,override,Scope.REQUEST);
      }
    }
 else     if (entryState.isValid()) {
      changeObject(context,adapter,entryState,fields);
      if (adapter.isTransient()) {
        IsisContext.getPersistenceSession().makePersistent(adapter);
        context.unmapObject(adapter,Scope.REQUEST);
      }
      String view=context.getParameter("_" + VIEW);
      String id=context.mapObject(adapter,Scope.REQUEST);
      context.addVariable(resultName,id,Scope.REQUEST);
      if (override != null) {
        context.addVariable(resultName,override,Scope.REQUEST);
      }
      int questionMark=view == null ? -1 : view.indexOf("?");
      if (questionMark > -1) {
        String params=view.substring(questionMark + 1);
        int equals=params.indexOf("=");
        context.addVariable(params.substring(0,equals),params.substring(equals + 1),Scope.REQUEST);
        view=view.substring(0,questionMark);
      }
      context.setRequestPath(view);
      if (message == null) {
        message="Saved changes to " + adapter.getSpecification().getSingularName();
      }
 else       if (message.equals("")) {
        message=null;
      }
      if (message != null) {
        MessageBroker messageBroker=IsisContext.getMessageBroker();
        messageBroker.addMessage(message);
      }
    }
 else {
      String view=context.getParameter("_" + ERRORS);
      context.setRequestPath(view,Dispatcher.EDIT);
      entryState.setForm(objectId);
      context.addVariable(ENTRY_FIELDS,entryState,Scope.REQUEST);
      context.addVariable(resultName,objectId,Scope.REQUEST);
      if (override != null) {
        context.addVariable(resultName,override,Scope.REQUEST);
      }
      MessageBroker messageBroker=IsisContext.getMessageBroker();
      messageBroker.addWarning(entryState.getError());
    }
  }
 catch (  RuntimeException e) {
    IsisContext.getMessageBroker().getMessages();
    IsisContext.getMessageBroker().getWarnings();
    IsisContext.getUpdateNotifier().clear();
    IsisContext.getUpdateNotifier().clear();
    throw e;
  }
}
