{
  metadata.visit(new DomainObject.VisitorAdapter(){
    private final Map<String,int[]> propertySequenceByGroup=Maps.newHashMap();
    private int actionDomainObjectSequence=1;
    private int actionPropertyGroupSequence=1;
    private int actionPropertySequence=1;
    private int actionCollectionSequence=1;
    @Override public void visit(    final Action action){
      final ActionHolder actionHolder=action.getOwner();
      final ObjectAction objectAction=objectActionById.get(action.getId());
      final String memberOrderName;
      final int memberOrderSequence;
      if (actionHolder instanceof PropertyGroup) {
        final PropertyGroup propertyGroup=(PropertyGroup)actionHolder;
        final List<Property> properties=propertyGroup.getProperties();
        final Property property=properties.get(0);
        memberOrderName=property.getId();
        memberOrderSequence=actionPropertyGroupSequence++;
      }
 else       if (actionHolder instanceof Property) {
        final Property property=(Property)actionHolder;
        memberOrderName=property.getId();
        memberOrderSequence=actionPropertySequence++;
      }
 else       if (actionHolder instanceof Collection) {
        final Collection collection=(Collection)actionHolder;
        memberOrderName=collection.getId();
        memberOrderSequence=actionCollectionSequence++;
      }
 else {
        memberOrderName=null;
        memberOrderSequence=actionDomainObjectSequence++;
      }
      FacetUtil.addFacet(new MemberOrderFacetXml(memberOrderName,"" + memberOrderSequence,translationService,objectAction));
      if (actionHolder instanceof PropertyGroup) {
        if (action.getPosition() == null || action.getPosition() == org.apache.isis.applib.annotation.ActionLayout.Position.BELOW || action.getPosition() == org.apache.isis.applib.annotation.ActionLayout.Position.RIGHT) {
          action.setPosition(org.apache.isis.applib.annotation.ActionLayout.Position.PANEL);
        }
      }
 else       if (actionHolder instanceof Property) {
        if (action.getPosition() == null || action.getPosition() == org.apache.isis.applib.annotation.ActionLayout.Position.PANEL_DROPDOWN || action.getPosition() == org.apache.isis.applib.annotation.ActionLayout.Position.PANEL) {
          action.setPosition(org.apache.isis.applib.annotation.ActionLayout.Position.BELOW);
        }
      }
 else {
        action.setPosition(null);
      }
      FacetUtil.addFacet(ActionPositionFacetForActionXml.create(action,objectAction));
      FacetUtil.addFacet(BookmarkPolicyFacetForActionXml.create(action,objectAction));
      FacetUtil.addFacet(CssClassFacetForActionXml.create(action,objectAction));
      FacetUtil.addFacet(CssClassFaFacetForActionXml.create(action,objectAction));
      FacetUtil.addFacet(DescribedAsFacetForActionXml.create(action,objectAction));
      FacetUtil.addFacet(HiddenFacetForActionLayoutXml.create(action,objectAction));
      FacetUtil.addFacet(NamedFacetForActionXml.create(action,objectAction));
    }
    @Override public void visit(    final Property property){
      final OneToOneAssociation oneToOneAssociation=oneToOneAssociationById.get(property.getId());
      FacetUtil.addFacet(CssClassFacetForPropertyXml.create(property,oneToOneAssociation));
      FacetUtil.addFacet(DescribedAsFacetForPropertyXml.create(property,oneToOneAssociation));
      FacetUtil.addFacet(HiddenFacetForPropertyXml.create(property,oneToOneAssociation));
      FacetUtil.addFacet(LabelAtFacetForPropertyXml.create(property,oneToOneAssociation));
      FacetUtil.addFacet(MultiLineFacetForPropertyXml.create(property,oneToOneAssociation));
      FacetUtil.addFacet(NamedFacetForPropertyXml.create(property,oneToOneAssociation));
      FacetUtil.addFacet(RenderedAdjustedFacetForPropertyXml.create(property,oneToOneAssociation));
      FacetUtil.addFacet(TypicalLengthFacetForPropertyXml.create(property,oneToOneAssociation));
      final PropertyGroup propertyGroup=property.getOwner();
      final String groupName=propertyGroup.getName();
      final String sequence=nextInSequenceFor(groupName);
      FacetUtil.addFacet(new MemberOrderFacetXml(groupName,sequence,translationService,oneToOneAssociation));
    }
    @Override public void visit(    final Collection collection){
      final OneToManyAssociation oneToManyAssociation=oneToManyAssociationById.get(collection.getId());
      FacetUtil.addFacet(CssClassFacetForCollectionXml.create(collection,oneToManyAssociation));
      FacetUtil.addFacet(DefaultViewFacetForCollectionXml.create(collection,oneToManyAssociation));
      FacetUtil.addFacet(DescribedAsFacetForCollectionXml.create(collection,oneToManyAssociation));
      FacetUtil.addFacet(HiddenFacetForCollectionXml.create(collection,oneToManyAssociation));
      FacetUtil.addFacet(NamedFacetForCollectionXml.create(collection,oneToManyAssociation));
      FacetUtil.addFacet(PagedFacetForCollectionXml.create(collection,oneToManyAssociation));
      FacetUtil.addFacet(SortedByFacetForCollectionXml.create(collection,oneToManyAssociation));
      final String groupName=collection.getId();
      final String sequence=nextInSequenceFor(groupName);
      FacetUtil.addFacet(new MemberOrderFacetXml(groupName,sequence,translationService,oneToManyAssociation));
      final Column column=collection.getOwner();
      final Tab tab=column.getOwner();
      if (tab.getContents().size() == 1) {
        tab.setName(collection.getId());
      }
    }
    private String nextInSequenceFor(    final String propertyGroupName){
synchronized (propertySequenceByGroup) {
        int[] holder=propertySequenceByGroup.get(propertyGroupName);
        if (holder == null) {
          holder=new int[]{0};
          propertySequenceByGroup.put(propertyGroupName,holder);
        }
        holder[0]++;
        return "" + holder[0];
      }
    }
  }
);
}
