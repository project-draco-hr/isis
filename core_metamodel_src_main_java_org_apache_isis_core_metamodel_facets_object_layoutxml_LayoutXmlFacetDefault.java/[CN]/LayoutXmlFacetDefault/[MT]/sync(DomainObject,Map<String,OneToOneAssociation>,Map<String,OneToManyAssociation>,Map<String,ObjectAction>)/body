{
  metadata.visit(new DomainObject.VisitorAdapter(){
    private int domainObjectSequence=1;
    private int propertyGroupSequence=1;
    private int propertySequence=1;
    private int collectionSequence=1;
    private Map<Action,ActionHolder> actionHolderByAction=Maps.newHashMap();
    @Override public void visit(    final Action action,    final ActionHolder actionHolder){
      actionHolderByAction.put(action,actionHolder);
      final ObjectAction objectAction=objectActionById.get(action.getId());
      final String memberOrderName;
      final int memberOrderSequence;
      if (actionHolder instanceof PropertyGroup) {
        final PropertyGroup propertyGroup=(PropertyGroup)actionHolder;
        final List<Property> properties=propertyGroup.getProperties();
        final Property property=properties.get(0);
        memberOrderName=property.getId();
        memberOrderSequence=propertyGroupSequence++;
      }
 else       if (actionHolder instanceof Property) {
        final Property property=(Property)actionHolder;
        memberOrderName=property.getId();
        memberOrderSequence=propertySequence++;
      }
 else       if (actionHolder instanceof Collection) {
        final Collection collection=(Collection)actionHolder;
        memberOrderName=collection.getId();
        memberOrderSequence=collectionSequence++;
      }
 else {
        memberOrderName=null;
        memberOrderSequence=domainObjectSequence++;
      }
      FacetUtil.addFacet(new MemberOrderFacetXml(memberOrderName,"" + memberOrderSequence,translationService,objectAction));
    }
    @Override public void visit(    final ActionLayout actionLayout,    final Action action){
      final ObjectAction objectAction=objectActionById.get(action.getId());
      final ActionHolder actionHolder=actionHolderByAction.get(action);
      final ActionLayout actionLayoutForPosition;
      if (actionHolder instanceof PropertyGroup) {
        actionLayoutForPosition=actionLayout != null ? actionLayout : new ActionLayout();
        if (actionLayoutForPosition.getPosition() == null || actionLayoutForPosition.getPosition() == org.apache.isis.applib.annotation.ActionLayout.Position.BELOW || actionLayoutForPosition.getPosition() == org.apache.isis.applib.annotation.ActionLayout.Position.RIGHT) {
          actionLayoutForPosition.setPosition(org.apache.isis.applib.annotation.ActionLayout.Position.PANEL);
        }
      }
 else       if (actionHolder instanceof Property) {
        actionLayoutForPosition=actionLayout != null ? actionLayout : new ActionLayout();
        if (actionLayoutForPosition.getPosition() == null || actionLayoutForPosition.getPosition() == org.apache.isis.applib.annotation.ActionLayout.Position.PANEL_DROPDOWN || actionLayoutForPosition.getPosition() == org.apache.isis.applib.annotation.ActionLayout.Position.PANEL) {
          actionLayoutForPosition.setPosition(org.apache.isis.applib.annotation.ActionLayout.Position.BELOW);
        }
      }
 else {
        actionLayoutForPosition=null;
      }
      FacetUtil.addFacet(ActionPositionFacetForActionLayoutXml.create(actionLayoutForPosition,objectAction));
      FacetUtil.addFacet(BookmarkPolicyFacetForActionLayoutXml.create(actionLayout,objectAction));
      FacetUtil.addFacet(CssClassFacetForActionLayoutXml.create(actionLayout,objectAction));
      FacetUtil.addFacet(CssClassFaFacetForActionLayoutXml.create(actionLayout,objectAction));
      FacetUtil.addFacet(DescribedAsFacetForActionLayoutXml.create(actionLayout,objectAction));
      FacetUtil.addFacet(HiddenFacetForActionLayoutXml.create(actionLayout,objectAction));
      FacetUtil.addFacet(NamedFacetForActionLayoutXml.create(actionLayout,objectAction));
    }
    @Override public void visit(    final PropertyLayout propertyLayout,    final Property property){
      final OneToOneAssociation oneToOneAssociation=oneToOneAssociationById.get(property.getId());
      FacetUtil.addFacet(CssClassFacetForPropertyLayoutXml.create(propertyLayout,oneToOneAssociation));
      FacetUtil.addFacet(DescribedAsFacetForPropertyLayoutXml.create(propertyLayout,oneToOneAssociation));
      FacetUtil.addFacet(HiddenFacetForPropertyLayoutXml.create(propertyLayout,oneToOneAssociation));
      FacetUtil.addFacet(LabelAtFacetForPropertyLayoutXml.create(propertyLayout,oneToOneAssociation));
      FacetUtil.addFacet(MultiLineFacetForPropertyLayoutXml.create(propertyLayout,oneToOneAssociation));
      FacetUtil.addFacet(NamedFacetForPropertyLayoutXml.create(propertyLayout,oneToOneAssociation));
      FacetUtil.addFacet(RenderedAdjustedFacetForPropertyLayoutXml.create(propertyLayout,oneToOneAssociation));
      FacetUtil.addFacet(TypicalLengthFacetForPropertyLayoutXml.create(propertyLayout,oneToOneAssociation));
    }
    @Override public void visit(    final CollectionLayout collectionLayout,    final Collection collection){
      final OneToManyAssociation oneToManyAssociation=oneToManyAssociationById.get(collection.getId());
      FacetUtil.addFacet(CssClassFacetForCollectionLayoutXml.create(collectionLayout,oneToManyAssociation));
      FacetUtil.addFacet(DefaultViewFacetForCollectionLayoutXml.create(collectionLayout,oneToManyAssociation));
      FacetUtil.addFacet(DescribedAsFacetForCollectionLayoutXml.create(collectionLayout,oneToManyAssociation));
      FacetUtil.addFacet(HiddenFacetForCollectionLayoutXml.create(collectionLayout,oneToManyAssociation));
      FacetUtil.addFacet(NamedFacetForCollectionLayoutXml.create(collectionLayout,oneToManyAssociation));
      FacetUtil.addFacet(PagedFacetForCollectionLayoutXml.create(collectionLayout,oneToManyAssociation));
      FacetUtil.addFacet(SortedByFacetForCollectionLayoutXml.create(collectionLayout,oneToManyAssociation));
    }
  }
);
}
