{
  if (value == null)   return defaultValue;
  int hashIndex=value.indexOf('#');
  if (hashIndex == -1) {
    if ("NULL".equalsIgnoreCase(value)) {
      return null;
    }
 else {
      return (Level)Level.toLevel(value,defaultValue);
    }
  }
  Level result=defaultValue;
  String clazz=value.substring(hashIndex + 1);
  String levelName=value.substring(0,hashIndex);
  if ("NULL".equalsIgnoreCase(levelName)) {
    return null;
  }
  LogLog.debug("toLevel" + ":class=[" + clazz + "]"+ ":pri=["+ levelName+ "]");
  try {
    Class customLevel=Loader.loadClass(clazz);
    Class[] paramTypes=new Class[]{String.class,org.apache.log4j.Level.class};
    java.lang.reflect.Method toLevelMethod=customLevel.getMethod("toLevel",paramTypes);
    Object[] params=new Object[]{levelName,defaultValue};
    Object o=toLevelMethod.invoke(null,params);
    result=(Level)o;
  }
 catch (  ClassNotFoundException e) {
    LogLog.warn("custom level class [" + clazz + "] not found.");
  }
catch (  NoSuchMethodException e) {
    LogLog.warn("custom level class [" + clazz + "]"+ " does not have a constructor which takes one string parameter",e);
  }
catch (  java.lang.reflect.InvocationTargetException e) {
    LogLog.warn("custom level class [" + clazz + "]"+ " could not be instantiated",e);
  }
catch (  ClassCastException e) {
    LogLog.warn("class [" + clazz + "] is not a subclass of org.apache.log4j.Level",e);
  }
catch (  IllegalAccessException e) {
    LogLog.warn("class [" + clazz + "] cannot be instantiated due to access restrictions",e);
  }
catch (  Exception e) {
    LogLog.warn("class [" + clazz + "], level ["+ levelName+ "] conversion failed.",e);
  }
  return result;
}
