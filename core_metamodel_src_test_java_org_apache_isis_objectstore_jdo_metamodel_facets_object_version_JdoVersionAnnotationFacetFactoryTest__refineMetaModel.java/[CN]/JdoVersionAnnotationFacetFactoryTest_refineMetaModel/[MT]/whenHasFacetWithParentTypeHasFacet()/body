{
@Version class Parent {
  }
@Version class Child extends Parent {
  }
  context.checking(new Expectations(){
{
      oneOf(mockChildType).getCorrespondingClass();
      inSequence(sequence);
      will(returnValue(Child.class));
      oneOf(mockChildType).superclass();
      inSequence(sequence);
      will(returnValue(mockParentType));
      oneOf(mockParentType).getCorrespondingClass();
      inSequence(sequence);
      will(returnValue(Parent.class));
      oneOf(mockChildType).getFullIdentifier();
      inSequence(sequence);
      will(returnValue("mockChildType"));
      oneOf(mockParentType).getFullIdentifier();
      inSequence(sequence);
      will(returnValue("mockParentType"));
    }
  }
);
  newValidatorVisitor.visit(mockChildType,validationFailures);
  assertThat(validationFailures.getNumberOfMessages(),is(1));
  assertThat(validationFailures.getMessages().iterator().next(),is("mockChildType: cannot have @Version annotated on this subclass and any of its supertypes; superclass: mockParentType"));
}
