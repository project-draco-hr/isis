{
  final Swagger swagger=new Swagger();
  swagger.info(new Info().version("1.0.0").title("Restful Objects")).path("/",new Path().get(new Operation().description("RO Spec v1.0, section 5.1").consumes("application/json").consumes("application/json;profile=\"urn:org.restfulobjects:repr-types/home-page\"").produces("application/json;profile=\"urn:org.restfulobjects:repr-types/home-page\"").response(200,newResponse(Caching.LONG_TERM).description("OK").schema(new RefProperty("#/definitions/home-page"))))).path("/user",new Path().get(new Operation().description("RO Spec v1.0, section 6.1").consumes("application/json").consumes("application/json;profile=\"urn:org.restfulobjects:repr-types/user\"").produces("application/json;profile=\"urn:org.restfulobjects:repr-types/user\"").response(200,newResponse(Caching.SHORT_TERM).description("OK").schema(new RefProperty("#/definitions/user"))))).path("/version",new Path().get(new Operation().description("RO Spec v1.0, section 8.1").consumes("application/json").consumes("application/json;profile=\"urn:org.restfulobjects:repr-types/version\"").produces("application/json;profile=\"urn:org.restfulobjects:repr-types/version\"").response(200,newResponse(Caching.LONG_TERM).description("OK").schema(new RefProperty("#/definitions/version")))));
  swagger.addDefinition("home-page",new ModelImpl().description("RO Spec v1.0, section 5.2").type("object").property("links",arrayOfLinksGetOnly()).required("links"));
  swagger.addDefinition("user",new ModelImpl().description("RO Spec v1.0, section 6.2").type("object").property("userName",stringProperty()).property("roles",arrayOfStrings()).property("links",arrayOfLinksGetOnly()).required("userName").required("roles").required("links"));
  swagger.addDefinition("version",new ModelImpl().description("RO Spec v1.0, section 8.2").type("object").property("specVersion",stringProperty()).property("implVersion",stringProperty()).property("optionalCapabilities",new ObjectProperty().property("blobsClobs",stringProperty()).property("deleteObjects",stringProperty()).property("domainModel",stringProperty()).property("validateOnly",stringProperty()).property("protoPersistentObjects",stringProperty())).property("links",arrayOfLinksGetOnly()).property("extensions",new ObjectProperty()).required("userName").required("roles").required("links"));
  swagger.addDefinition("link",new ModelImpl().type("object").property("rel",stringProperty()).property("href",stringProperty()).property("title",stringProperty()).property("method",stringPropertyEnum("GET","POST","PUT","DELETE")).property("type",stringProperty()).property("arguments",new ObjectProperty()).required("rel").required("href").required("method"));
  swagger.addDefinition("link-get-only",new ModelImpl().type("object").property("rel",stringProperty()).property("href",stringProperty()).property("title",stringProperty()).property("method",stringPropertyEnum("GET")).property("type",stringProperty()).required("rel").required("href").required("method"));
  final Collection<ObjectSpecification> allSpecs=specificationLoader.allSpecifications();
  for (  ObjectSpecification serviceSpec : allSpecs) {
    final DomainServiceFacet domainServiceFacet=serviceSpec.getFacet(DomainServiceFacet.class);
    if (domainServiceFacet == null) {
      continue;
    }
    if (type.isPublic() && domainServiceFacet.getNatureOfService() != NatureOfService.VIEW_REST_ONLY) {
      continue;
    }
    List<ObjectAction> serviceActions=serviceSpec.getObjectActions(actionTypesFor(type),Contributed.EXCLUDED,Filters.<ObjectAction>any());
    for (    ObjectAction serviceAction : serviceActions) {
    }
  }
  return Json.pretty(swagger);
}
