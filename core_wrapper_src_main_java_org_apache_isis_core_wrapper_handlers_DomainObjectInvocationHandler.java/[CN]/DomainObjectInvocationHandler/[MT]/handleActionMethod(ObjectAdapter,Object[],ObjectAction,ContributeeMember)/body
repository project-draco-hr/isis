{
  final ObjectAdapter contributeeAdapter;
  final Object[] contributeeArgs;
  if (contributeeMember != null) {
    final int contributeeParamPosition=contributeeMember.getContributeeParamPosition();
    final Object contributee=args[contributeeParamPosition];
    contributeeAdapter=adapterFor(contributee);
    final List<Object> argCopy=Lists.newArrayList(args);
    argCopy.remove(contributeeParamPosition);
    contributeeArgs=argCopy.toArray();
  }
 else {
    contributeeAdapter=null;
    contributeeArgs=null;
  }
  if (getExecutionMode().shouldEnforceRules()) {
    if (contributeeMember != null) {
      checkVisibility(contributeeAdapter,contributeeMember);
      checkUsability(contributeeAdapter,contributeeMember);
    }
 else {
      checkVisibility(targetAdapter,objectAction);
      checkUsability(targetAdapter,objectAction);
    }
  }
  final ObjectAdapter[] argAdapters=asObjectAdaptersUnderlying(args);
  if (getExecutionMode().shouldEnforceRules()) {
    if (contributeeMember != null) {
      if (contributeeMember instanceof ObjectActionContributee) {
        final ObjectActionContributee objectActionContributee=(ObjectActionContributee)contributeeMember;
        final ObjectAdapter[] contributeeArgAdapters=asObjectAdaptersUnderlying(contributeeArgs);
        checkValidity(contributeeAdapter,objectActionContributee,contributeeArgAdapters);
      }
    }
 else {
      checkValidity(targetAdapter,objectAction,argAdapters);
    }
  }
  if (getExecutionMode().shouldExecute()) {
    final InteractionInitiatedBy interactionInitiatedBy=getInteractionInitiatedBy();
    final ObjectAdapter mixedInAdapter=null;
    final ObjectAdapter returnedAdapter=objectAction.execute(targetAdapter,mixedInAdapter,argAdapters,interactionInitiatedBy);
    return ObjectAdapter.Util.unwrap(returnedAdapter);
  }
  return null;
}
