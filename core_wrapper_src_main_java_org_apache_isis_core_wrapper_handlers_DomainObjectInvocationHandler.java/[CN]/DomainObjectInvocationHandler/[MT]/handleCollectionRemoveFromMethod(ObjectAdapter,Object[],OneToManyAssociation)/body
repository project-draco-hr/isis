{
  if (args.length != 1) {
    throw new IllegalArgumentException("Invoking a removeFrom should only have a single argument");
  }
  if (getExecutionMode().shouldEnforceRules()) {
    checkVisibility(targetAdapter,collection);
    checkUsability(targetAdapter,collection);
  }
  resolveIfRequired(targetAdapter);
  final Object argumentObj=underlying(args[0]);
  if (argumentObj == null) {
    throw new IllegalArgumentException("Must provide a non-null object to remove");
  }
  final ObjectAdapter argumentAdapter=adapterFor(argumentObj);
  if (getExecutionMode().shouldEnforceRules()) {
    final InteractionResult interactionResult=collection.isValidToRemove(targetAdapter,argumentAdapter,getInteractionInitiatedBy()).getInteractionResult();
    notifyListenersAndVetoIfRequired(interactionResult);
  }
  if (getExecutionMode().shouldExecute()) {
    collection.removeElement(targetAdapter,argumentAdapter,getInteractionInitiatedBy());
  }
  objectChangedIfRequired(targetAdapter);
  return null;
}
