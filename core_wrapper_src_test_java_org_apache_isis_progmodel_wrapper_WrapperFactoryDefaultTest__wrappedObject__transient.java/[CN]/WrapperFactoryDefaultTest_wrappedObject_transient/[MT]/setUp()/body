{
  employeeDO=new Employee();
  employeeDO.setName("Smith");
  getPasswordMethod=Employee.class.getMethod("getPassword");
  setPasswordMethod=Employee.class.getMethod("setPassword",String.class);
  wrapperFactory=createWrapperFactory();
  wrapperFactory.setAdapterManager(mockAdapterManager);
  wrapperFactory.setAuthenticationSessionProvider(mockAuthenticationSessionProvider);
  wrapperFactory.setPersistenceSessionService(mockPersistenceSessionService);
  wrapperFactory.setSpecificationLoader(mockSpecificationLoader);
  context.checking(new Expectations(){
{
      allowing(mockDeploymentCategoryProvider).getDeploymentCategory();
      will(returnValue(DeploymentCategory.PRODUCTION));
      allowing(mockAdapterManager).getAdapterFor(employeeDO);
      will(returnValue(mockEmployeeAdapter));
      allowing(mockAdapterManager).adapterFor(passwordValue);
      will(returnValue(mockPasswordAdapter));
      allowing(mockEmployeeAdapter).getSpecification();
      will(returnValue(mockEmployeeSpec));
      allowing(mockEmployeeAdapter).getObject();
      will(returnValue(employeeDO));
      allowing(mockPasswordAdapter).getObject();
      will(returnValue(passwordValue));
      allowing(mockPasswordMember).getIdentifier();
      will(returnValue(mockPasswordIdentifier));
      allowing(mockSpecificationLoader).loadSpecification(Employee.class);
      will(returnValue(mockEmployeeSpec));
      allowing(mockEmployeeSpec).getMember(with(setPasswordMethod));
      will(returnValue(mockPasswordMember));
      allowing(mockEmployeeSpec).getMember(with(getPasswordMethod));
      will(returnValue(mockPasswordMember));
      allowing(mockPasswordMember).getName();
      will(returnValue("password"));
      allowing(mockAuthenticationSessionProvider).getAuthenticationSession();
      will(returnValue(session));
      allowing(mockPasswordMember).isOneToOneAssociation();
      will(returnValue(true));
      allowing(mockPasswordMember).isOneToManyAssociation();
      will(returnValue(false));
    }
  }
);
  employeeWO=wrapperFactory.wrap(employeeDO);
}
