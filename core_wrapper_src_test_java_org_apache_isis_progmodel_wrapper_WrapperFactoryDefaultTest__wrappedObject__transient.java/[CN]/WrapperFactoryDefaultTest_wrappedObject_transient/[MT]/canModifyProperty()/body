{
  final Consent visibilityConsent=new Allow(new InteractionResult(new PropertyVisibilityEvent(employeeDO,mockPasswordIdentifier)));
  final Consent usabilityConsent=new Allow(new InteractionResult(new PropertyUsabilityEvent(employeeDO,mockPasswordIdentifier)));
  final Consent validityConsent=new Allow(new InteractionResult(new PropertyModifyEvent(employeeDO,mockPasswordIdentifier,passwordValue)));
  context.checking(new Expectations(){
{
      allowing(mockPasswordMember).isVisible(mockEmployeeAdapter,InteractionInitiatedBy.USER,Where.ANYWHERE);
      will(returnValue(visibilityConsent));
      allowing(mockPasswordMember).isUsable(mockEmployeeAdapter,InteractionInitiatedBy.USER,Where.ANYWHERE);
      will(returnValue(usabilityConsent));
      allowing(mockPasswordMember).isAssociationValid(mockEmployeeAdapter,mockPasswordAdapter,InteractionInitiatedBy.USER);
      will(returnValue(validityConsent));
    }
  }
);
  facets=Arrays.asList((Facet)new PropertySetterFacetViaSetterMethod(setPasswordMethod,mockPasswordMember));
  context.checking(new Expectations(){
{
      allowing(mockPasswordMember).getFacets(with(any(Filter.class)));
      will(returnValue(facets));
      oneOf(mockPasswordMember).set(mockEmployeeAdapter,mockPasswordAdapter,InteractionInitiatedBy.USER);
    }
  }
);
  employeeWO.setPassword(passwordValue);
  facets=Arrays.asList((Facet)new PropertyAccessorFacetViaAccessor(getPasswordMethod,mockPasswordMember,mockDeploymentCategoryProvider.getDeploymentCategory(),mockConfiguration,mockSpecificationLoader,mockAuthenticationSessionProvider,mockAdapterManager));
  context.checking(new Expectations(){
{
      allowing(mockPasswordMember).getFacets(with(any(Filter.class)));
      will(returnValue(facets));
      oneOf(mockPasswordMember).get(mockEmployeeAdapter,InteractionInitiatedBy.USER);
      will(returnValue(mockPasswordAdapter));
    }
  }
);
  assertThat(employeeWO.getPassword(),is(passwordValue));
}
