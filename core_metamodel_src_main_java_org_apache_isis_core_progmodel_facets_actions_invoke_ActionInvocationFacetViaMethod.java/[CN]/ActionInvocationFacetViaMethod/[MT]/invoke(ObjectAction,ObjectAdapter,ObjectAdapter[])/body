{
  if (arguments.length != paramCount) {
    LOG.error(method + " requires " + paramCount+ " parameters, not "+ arguments.length);
  }
  final Bulk.InteractionContext bulkInteractionContext=getServicesInjector().lookupService(Bulk.InteractionContext.class);
  final ReifiableActionContext reifiableActionContext=getServicesInjector().lookupService(ReifiableActionContext.class);
  final ReifiableAction reifiableAction=reifiableActionContext != null ? reifiableActionContext.getReifiableAction() : null;
  try {
    final Object[] executionParameters=new Object[arguments.length];
    for (int i=0; i < arguments.length; i++) {
      executionParameters[i]=unwrap(arguments[i]);
    }
    final Object object=unwrap(targetAdapter);
    final BulkFacet bulkFacet=getFacetHolder().getFacet(BulkFacet.class);
    if (bulkFacet != null && bulkInteractionContext != null && bulkInteractionContext.getInvokedAs() == null) {
      bulkInteractionContext.setInvokedAs(InvokedAs.REGULAR);
      bulkInteractionContext.setDomainObjects(Collections.singletonList(object));
    }
    if (reifiableAction != null) {
      if (reifiableAction.getNature() == ReifiableAction.Nature.USER_INITIATED && owningAction != null) {
        final String actionIdentifier=owningAction.getIdentifier().toClassAndNameIdentityString();
        reifiableAction.setActionIdentifier(actionIdentifier);
        String targetClassName=StringExtensions.asNaturalName2(targetAdapter.getSpecification().getSingularName());
        String actionName=owningAction.getName();
        reifiableAction.setTargetClass(targetClassName);
        reifiableAction.setTargetAction(actionName);
        final StringBuilder argsBuf=new StringBuilder();
        List<ObjectActionParameter> parameters=owningAction.getParameters();
        if (parameters.size() == arguments.length) {
          int i=0;
          for (          ObjectActionParameter param : parameters) {
            appendParamArg(argsBuf,param,arguments[i++]);
          }
        }
        reifiableAction.setArguments(argsBuf.toString());
        final boolean reifiable=getFacetHolder().containsDoOpFacet(ReifiedActionFacet.class);
        reifiableAction.setReify(reifiable);
      }
      final Bookmark bookmark=bookmarkFor(targetAdapter);
      reifiableAction.setTarget(bookmark);
    }
    final Object result=method.invoke(object,executionParameters);
    if (LOG.isDebugEnabled()) {
      LOG.debug(" action result " + result);
    }
    if (result == null) {
      return null;
    }
    final ObjectAdapter resultAdapter=getAdapterManager().adapterFor(result);
    final TypeOfFacet typeOfFacet=getFacetHolder().getFacet(TypeOfFacet.class);
    resultAdapter.setElementSpecificationProvider(ElementSpecificationProviderFromTypeOfFacet.createFrom(typeOfFacet));
    if (reifiableAction != null) {
      if (!resultAdapter.getSpecification().containsDoOpFacet(ViewModelFacet.class)) {
        final Bookmark bookmark=bookmarkFor(resultAdapter);
        reifiableAction.setResult(bookmark);
      }
    }
    PublishedActionFacet publishedActionFacet=getIdentified().getFacet(PublishedActionFacet.class);
    ActionInvocationFacet.currentInvocation.set(publishedActionFacet != null ? new CurrentInvocation(targetAdapter,getIdentified(),arguments,resultAdapter) : null);
    return resultAdapter;
  }
 catch (  final IllegalArgumentException e) {
    throw e;
  }
catch (  final InvocationTargetException e) {
    if (e.getTargetException() instanceof IllegalStateException) {
      throw new ReflectiveActionException("IllegalStateException thrown while executing " + method + " "+ e.getTargetException().getMessage(),e.getTargetException());
    }
 else {
      ThrowableExtensions.throwWithinIsisException(e,"Exception executing " + method);
      return null;
    }
  }
catch (  final IllegalAccessException e) {
    throw new ReflectiveActionException("Illegal access of " + method,e);
  }
}
