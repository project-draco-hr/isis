{
  if (arguments.length != paramCount) {
    LOG.error(method + " requires " + paramCount+ " parameters, not "+ arguments.length);
  }
  final Bulk.InteractionContext bulkInteractionContext=getServicesInjector().lookupService(Bulk.InteractionContext.class);
  final CommandContext commandContext=getServicesInjector().lookupService(CommandContext.class);
  final Command command=commandContext != null ? commandContext.getCommand() : null;
  try {
    final Object[] executionParameters=new Object[arguments.length];
    for (int i=0; i < arguments.length; i++) {
      executionParameters[i]=unwrap(arguments[i]);
    }
    final Object object=unwrap(targetAdapter);
    final BulkFacet bulkFacet=getFacetHolder().getFacet(BulkFacet.class);
    if (bulkFacet != null && bulkInteractionContext != null && bulkInteractionContext.getInvokedAs() == null) {
      bulkInteractionContext.setInvokedAs(InvokedAs.REGULAR);
      bulkInteractionContext.setDomainObjects(Collections.singletonList(object));
    }
    if (command != null && command.getNature() == Command.Nature.USER_INITIATED && owningAction != null) {
      command.setStartedAt(command.getTimestamp());
      command.setActionIdentifier(CommandUtil.actionIdentifierFor(owningAction));
      command.setTargetClass(CommandUtil.targetClassNameFor(targetAdapter));
      command.setTargetAction(CommandUtil.targetActionNameFor(owningAction));
      command.setArguments(CommandUtil.argDescriptionFor(owningAction,arguments));
      final Bookmark targetBookmark=CommandUtil.bookmarkFor(targetAdapter);
      command.setTarget(targetBookmark);
      final BackgroundService backgroundService=getServicesInjector().lookupService(BackgroundService.class);
      if (backgroundService != null) {
        final Object targetObject=unwrap(targetAdapter);
        final Object[] args=CommandUtil.objectsFor(arguments);
        ActionInvocationMemento aim=backgroundService.asActionInvocationMemento(method,targetObject,args);
        if (aim != null) {
          command.setMemento(aim.asMementoString());
        }
 else {
          throw new IsisException("Unable to build memento for action " + owningAction.getIdentifier().toClassAndNameIdentityString());
        }
      }
      final boolean hasCommandFacet=getFacetHolder().containsDoOpFacet(CommandFacet.class);
      command.setPersistHint(hasCommandFacet);
    }
    final Object result=method.invoke(object,executionParameters);
    if (LOG.isDebugEnabled()) {
      LOG.debug(" action result " + result);
    }
    if (result == null) {
      return null;
    }
    final ObjectAdapter resultAdapter=getAdapterManager().adapterFor(result);
    final TypeOfFacet typeOfFacet=getFacetHolder().getFacet(TypeOfFacet.class);
    resultAdapter.setElementSpecificationProvider(ElementSpecificationProviderFromTypeOfFacet.createFrom(typeOfFacet));
    if (command != null) {
      if (!resultAdapter.getSpecification().containsDoOpFacet(ViewModelFacet.class)) {
        final Bookmark bookmark=CommandUtil.bookmarkFor(resultAdapter);
        command.setResult(bookmark);
      }
    }
    PublishedActionFacet publishedActionFacet=getIdentified().getFacet(PublishedActionFacet.class);
    ActionInvocationFacet.currentInvocation.set(publishedActionFacet != null ? new CurrentInvocation(targetAdapter,getIdentified(),arguments,resultAdapter) : null);
    return resultAdapter;
  }
 catch (  final IllegalArgumentException e) {
    throw e;
  }
catch (  final InvocationTargetException e) {
    final Throwable targetException=e.getTargetException();
    if (targetException instanceof IllegalStateException) {
      throw new ReflectiveActionException("IllegalStateException thrown while executing " + method + " "+ targetException.getMessage(),targetException);
    }
    if (targetException instanceof RecoverableException) {
      if (!runtimeContext.getTransactionState().canCommit()) {
        final Throwable targetExceptionCause=targetException.getCause();
        Throwable nonRecoverableCause=targetExceptionCause != null ? targetExceptionCause : targetException;
        throw new NonRecoverableException(nonRecoverableCause);
      }
    }
    ThrowableExtensions.throwWithinIsisException(e,"Exception executing " + method);
    return null;
  }
catch (  final IllegalAccessException e) {
    throw new ReflectiveActionException("Illegal access of " + method,e);
  }
}
