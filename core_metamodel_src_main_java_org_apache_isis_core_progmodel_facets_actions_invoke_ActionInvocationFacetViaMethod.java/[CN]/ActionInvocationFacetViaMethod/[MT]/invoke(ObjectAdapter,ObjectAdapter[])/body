{
  if (parameters.length != paramCount) {
    LOG.error(method + " requires " + paramCount+ " parameters, not "+ parameters.length);
  }
  try {
    final Object[] executionParameters=new Object[parameters.length];
    for (int i=0; i < parameters.length; i++) {
      executionParameters[i]=unwrap(parameters[i]);
    }
    final Object object=unwrap(inObject);
    final Object result=method.invoke(object,executionParameters);
    if (LOG.isDebugEnabled()) {
      LOG.debug(" action result " + result);
    }
    if (result == null) {
      return null;
    }
    final ObjectAdapter resultAdapter=getAdapterManager().adapterFor(result);
    final TypeOfFacet typeOfFacet=getFacetHolder().getFacet(TypeOfFacet.class);
    resultAdapter.setElementSpecificationProvider(ElementSpecificationProviderFromTypeOfFacet.createFrom(typeOfFacet));
    PublishedActionFacet publishedActionFacet=getIdentified().getFacet(PublishedActionFacet.class);
    ActionInvocationFacet.currentInvocation.set(publishedActionFacet != null ? new CurrentInvocation(inObject,getIdentified(),parameters,resultAdapter) : null);
    return resultAdapter;
  }
 catch (  final IllegalArgumentException e) {
    throw e;
  }
catch (  final InvocationTargetException e) {
    if (e.getTargetException() instanceof IllegalStateException) {
      throw new ReflectiveActionException("IllegalStateException thrown while executing " + method + " "+ e.getTargetException().getMessage(),e.getTargetException());
    }
 else {
      InvokeUtils.invocationException("Exception executing " + method,e);
      return null;
    }
  }
catch (  final IllegalAccessException e) {
    throw new ReflectiveActionException("Illegal access of " + method,e);
  }
}
