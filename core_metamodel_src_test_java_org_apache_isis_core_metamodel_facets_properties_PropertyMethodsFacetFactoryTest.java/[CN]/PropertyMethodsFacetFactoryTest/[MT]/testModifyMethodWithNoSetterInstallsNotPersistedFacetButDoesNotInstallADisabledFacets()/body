{
  final PropertySetAndClearFacetFactory facetFactory=new PropertySetAndClearFacetFactory();
  facetFactory.setSpecificationLookup(programmableReflector);
  final PropertyModifyFacetFactory facetFactoryForModify=new PropertyModifyFacetFactory();
  facetFactoryForModify.setSpecificationLookup(programmableReflector);
  final DisabledFacetOnPropertyInferredFactory disabledFacetOnPropertyInferredFactory=new DisabledFacetOnPropertyInferredFactory();
  disabledFacetOnPropertyInferredFactory.setSpecificationLookup(programmableReflector);
class Customer {
    @SuppressWarnings("unused") public String getFirstName(){
      return null;
    }
    @SuppressWarnings("unused") public void modifyFirstName(    final String firstName){
    }
  }
  final Method propertyAccessorMethod=findMethod(Customer.class,"getFirstName");
  final ProcessMethodContext processMethodContext=new ProcessMethodContext(Customer.class,null,null,propertyAccessorMethod,methodRemover,facetedMethod);
  facetFactory.process(processMethodContext);
  facetFactoryForModify.process(processMethodContext);
  disabledFacetOnPropertyInferredFactory.process(processMethodContext);
  Facet facet=facetedMethod.getFacet(NotPersistedFacet.class);
  assertNotNull(facet);
  assertTrue(facet instanceof NotPersistableFacetInferred);
  facet=facetedMethod.getFacet(DisabledFacet.class);
  assertNull(facet);
}
