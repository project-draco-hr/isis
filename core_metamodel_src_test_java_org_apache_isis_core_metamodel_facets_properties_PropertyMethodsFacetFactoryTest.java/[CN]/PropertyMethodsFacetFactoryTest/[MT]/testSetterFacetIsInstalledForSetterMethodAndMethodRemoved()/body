{
  final PropertySetAndClearFacetFactory facetFactory=new PropertySetAndClearFacetFactory();
  facetFactory.setSpecificationLoader(programmableReflector);
  facetFactory.setServicesInjector(mockServicesInjector);
  context.checking(new Expectations(){
{
      allowing(mockServicesInjector).lookupService(AuthenticationSessionProvider.class);
      will(returnValue(mockAuthenticationSessionProvider));
    }
  }
);
  facetFactory.setDeploymentCategory(DeploymentCategory.PRODUCTION);
class Customer {
    @SuppressWarnings("unused") public String getFirstName(){
      return null;
    }
    @SuppressWarnings("unused") public void setFirstName(    final String firstName){
    }
  }
  final Method propertyAccessorMethod=findMethod(Customer.class,"getFirstName");
  final Method propertySetterMethod=findMethod(Customer.class,"setFirstName",new Class[]{String.class});
  facetFactory.process(new ProcessMethodContext(Customer.class,null,null,propertyAccessorMethod,methodRemover,facetedMethod));
  final Facet facet=facetedMethod.getFacet(PropertySetterFacet.class);
  assertNotNull(facet);
  assertTrue(facet instanceof PropertySetterFacetViaSetterMethod);
  final PropertySetterFacetViaSetterMethod propertySetterFacet=(PropertySetterFacetViaSetterMethod)facet;
  assertEquals(propertySetterMethod,propertySetterFacet.getMethods().get(0));
  assertTrue(methodRemover.getRemovedMethodMethodCalls().contains(propertySetterMethod));
}
