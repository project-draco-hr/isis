{
  final PropertyAccessorFacetViaAccessorFactory facetFactory=new PropertyAccessorFacetViaAccessorFactory();
  facetFactory.setServicesInjector(mockServicesInjector);
  final HideForContextFacetViaMethodFactory facetFactoryForHide=new HideForContextFacetViaMethodFactory();
  facetFactoryForHide.setServicesInjector(mockServicesInjector);
  final DisableForContextFacetViaMethodFactory facetFactoryForDisable=new DisableForContextFacetViaMethodFactory();
  facetFactoryForDisable.setServicesInjector(mockServicesInjector);
class Customer {
    @SuppressWarnings("unused") public String getFirstName(){
      return null;
    }
  }
class CustomerEx extends Customer {
    @SuppressWarnings("unused") public boolean hideFirstName(){
      return true;
    }
    @SuppressWarnings("unused") public String disableFirstName(){
      return "disabled";
    }
  }
  final Method propertyAccessorMethod=findMethod(Customer.class,"getFirstName");
  final Method propertyHideMethod=findMethod(CustomerEx.class,"hideFirstName");
  final Method propertyDisableMethod=findMethod(CustomerEx.class,"disableFirstName");
  final ProcessMethodContext processMethodContext=new ProcessMethodContext(CustomerEx.class,null,null,propertyAccessorMethod,methodRemover,facetedMethod);
  facetFactory.process(processMethodContext);
  facetFactoryForHide.process(processMethodContext);
  facetFactoryForDisable.process(processMethodContext);
  final Facet facet=facetedMethod.getFacet(HideForContextFacet.class);
  assertNotNull(facet);
  assertTrue(facet instanceof HideForContextFacetViaMethod);
  final HideForContextFacetViaMethod hideForContextFacet=(HideForContextFacetViaMethod)facet;
  assertEquals(propertyHideMethod,hideForContextFacet.getMethods().get(0));
  final Facet facet2=facetedMethod.getFacet(DisableForContextFacet.class);
  assertNotNull(facet2);
  assertTrue(facet2 instanceof DisableForContextFacetViaMethod);
  final DisableForContextFacetViaMethod disableForContextFacet=(DisableForContextFacetViaMethod)facet2;
  assertEquals(propertyDisableMethod,disableForContextFacet.getMethods().get(0));
}
