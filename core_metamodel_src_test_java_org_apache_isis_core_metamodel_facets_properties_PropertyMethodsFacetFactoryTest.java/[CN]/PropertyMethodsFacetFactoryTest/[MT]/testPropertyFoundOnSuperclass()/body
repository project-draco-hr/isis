{
  final PropertyAccessorFacetViaAccessorFactory facetFactory=new PropertyAccessorFacetViaAccessorFactory();
  facetFactory.setSpecificationLoader(programmableReflector);
  facetFactory.setServicesInjector(mockServicesInjector);
  context.checking(new Expectations(){
{
      allowing(mockServicesInjector).lookupService(AuthenticationSessionProvider.class);
      will(returnValue(mockAuthenticationSessionProvider));
    }
  }
);
  facetFactory.setDeploymentCategory(DeploymentCategory.PRODUCTION);
class Customer {
    @SuppressWarnings("unused") public String getFirstName(){
      return null;
    }
  }
class CustomerEx extends Customer {
  }
  final Method propertyAccessorMethod=findMethod(Customer.class,"getFirstName");
  facetFactory.process(new ProcessMethodContext(CustomerEx.class,null,null,propertyAccessorMethod,methodRemover,facetedMethod));
  final Facet facet=facetedMethod.getFacet(PropertyOrCollectionAccessorFacet.class);
  assertNotNull(facet);
  assertTrue(facet instanceof PropertyAccessorFacetViaAccessor);
  final PropertyAccessorFacetViaAccessor accessorFacet=(PropertyAccessorFacetViaAccessor)facet;
  assertEquals(propertyAccessorMethod,accessorFacet.getMethods().get(0));
}
