{
  final HiddenFacetStaticMethodFactory facetFactory=new HiddenFacetStaticMethodFactory();
  facetFactory.setSpecificationLoader(programmableReflector);
  facetFactory.setServicesInjector(mockServicesInjector);
  context.checking(new Expectations(){
{
      allowing(mockServicesInjector).lookupService(AuthenticationSessionProvider.class);
      will(returnValue(mockAuthenticationSessionProvider));
    }
  }
);
  facetFactory.setDeploymentCategory(DeploymentCategory.PRODUCTION);
  final Method propertyAccessorMethod=findMethod(CustomerStatic.class,"getLastName");
  final Method propertyAlwaysHideMethod=findMethod(CustomerStatic.class,"alwaysHideLastName");
  facetFactory.process(new ProcessMethodContext(CustomerStatic.class,null,null,propertyAccessorMethod,methodRemover,facetedMethod));
  assertNull(facetedMethod.getFacet(HiddenFacetOnStaticMethod.class));
  assertTrue(methodRemover.getRemovedMethodMethodCalls().contains(propertyAlwaysHideMethod));
}
