{
  final Method method=processMethodContext.getMethod();
  final FacetHolder holder=processMethodContext.getFacetHolder();
  ActionSemanticsFacet facet;
  final QueryOnly queryOnly=Annotations.getAnnotation(processMethodContext.getMethod(),QueryOnly.class);
  facet=queryOnlyValidator.flagIfPresent(ActionSemanticsFacetFromQueryOnlyAnnotation.create(queryOnly,holder),processMethodContext);
  if (facet == null) {
    final Idempotent idempotent=Annotations.getAnnotation(processMethodContext.getMethod(),Idempotent.class);
    facet=idempotentValidator.flagIfPresent(ActionSemanticsFacetFromIdempotentAnnotation.create(idempotent,holder),processMethodContext);
  }
  if (facet == null) {
    final ActionSemantics actionSemantics=Annotations.getAnnotation(method,ActionSemantics.class);
    facet=actionSemanticsValidator.flagIfPresent(ActionSemanticsFacetForActionSemanticsAnnotation.create(actionSemantics,holder),processMethodContext);
  }
  if (facet == null) {
    final Action action=Annotations.getAnnotation(method,Action.class);
    facet=ActionSemanticsFacetForActionAnnotation.create(action,holder);
  }
  if (facet == null) {
    facet=new ActionSemanticsFacetFallbackToNonIdempotent(holder);
  }
  FacetUtil.addFacet(facet);
}
