{
  final Method method=processMethodContext.getMethod();
  final FacetedMethod holder=processMethodContext.getFacetHolder();
  final Type type=method.getGenericReturnType();
  if (!(type instanceof ParameterizedType)) {
    return null;
  }
  final ParameterizedType methodParameterizedType=(ParameterizedType)type;
  final Type[] methodActualTypeArguments=methodParameterizedType.getActualTypeArguments();
  if (methodActualTypeArguments.length == 0) {
    return null;
  }
  final Object methodActualTypeArgument=methodActualTypeArguments[0];
  if (methodActualTypeArgument instanceof Class) {
    final Class<?> actualType=(Class<?>)methodActualTypeArgument;
    return new TypeOfFacetInferredFromGenerics(actualType,holder,getSpecificationLoader());
  }
  if (methodActualTypeArgument instanceof TypeVariable) {
    final TypeVariable<?> methodTypeVariable=(TypeVariable<?>)methodActualTypeArgument;
    final GenericDeclaration methodGenericClassDeclaration=methodTypeVariable.getGenericDeclaration();
    final Type genericSuperclass=processMethodContext.getCls().getGenericSuperclass();
    if (genericSuperclass instanceof ParameterizedType) {
      final ParameterizedType parameterizedTypeOfSuperclass=(ParameterizedType)genericSuperclass;
      if (parameterizedTypeOfSuperclass.getRawType() == methodGenericClassDeclaration) {
        final Type[] genericSuperClassActualTypeArguments=parameterizedTypeOfSuperclass.getActualTypeArguments();
        if (methodActualTypeArguments.length == 1) {
          final Type actualType=genericSuperClassActualTypeArguments[0];
          if (actualType instanceof Class) {
            final Class<?> actualCls=(Class<?>)actualType;
            return new TypeOfFacetInferredFromGenerics(actualCls,holder,getSpecificationLoader());
          }
        }
      }
    }
  }
  return null;
}
