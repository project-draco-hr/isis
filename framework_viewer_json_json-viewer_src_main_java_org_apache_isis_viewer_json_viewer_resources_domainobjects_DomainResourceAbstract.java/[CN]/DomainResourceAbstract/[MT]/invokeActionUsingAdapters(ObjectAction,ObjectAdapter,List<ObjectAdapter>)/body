{
  List<ObjectActionParameter> parameters=action.getParameters();
  for (int i=0; i < parameters.size(); i++) {
    ObjectActionParameter parameter=parameters.get(i);
    ObjectAdapter paramAdapter=argAdapters.get(i);
    if (paramAdapter.getSpecification().containsFacet(ValueFacet.class)) {
      Object arg=paramAdapter.getObject();
      String reasonNotValid=parameter.isValid(objectAdapter,arg);
      if (reasonNotValid != null) {
        throw JsonApplicationException.create(HttpStatusCode.NOT_ACCEPTABLE,reasonNotValid);
      }
    }
  }
  ObjectAdapter[] argArray=argAdapters.toArray(new ObjectAdapter[0]);
  Consent consent=action.isProposedArgumentSetValid(objectAdapter,argArray);
  if (consent.isVetoed()) {
    throw JsonApplicationException.create(HttpStatusCode.NOT_ACCEPTABLE,consent.getReason());
  }
  final ObjectAdapter returnedAdapter=action.execute(objectAdapter,argArray);
  if (returnedAdapter == null) {
    return responseOfNoContent(objectAdapter.getVersion()).build();
  }
  final CollectionFacet facet=returnedAdapter.getSpecification().getFacet(CollectionFacet.class);
  if (facet != null) {
    final Collection<ObjectAdapter> collectionAdapters=facet.collection(returnedAdapter);
    String json=jsonFor(collectionAdapters);
    return responseOfOk(RepresentationType.LIST,json,Caching.NONE).build();
  }
  return responseWithRepresentationOf(returnedAdapter);
}
