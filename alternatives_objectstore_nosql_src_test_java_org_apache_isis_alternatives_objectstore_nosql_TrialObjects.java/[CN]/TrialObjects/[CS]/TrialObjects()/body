{
  PropertiesConfiguration configuration=new PropertiesConfiguration();
  final AdapterMapAbstract adapterMap=new AdapterMapAbstract(){
    @Override public ObjectAdapter getAdapterFor(    Object pojo){
      throw new UnsupportedOperationException();
    }
    @Override public ObjectAdapter adapterFor(    Object pojo,    ObjectAdapter ownerAdapter,    IdentifiedHolder identifiedHolder){
      if (adapters.get(pojo) != null) {
        return adapters.get(pojo);
      }
 else {
        return factory.createAdapter(pojo,null);
      }
    }
    @Override public ObjectAdapter adapterFor(    Object pattern){
      return adapters.get(pattern);
    }
  }
;
  reflector=new ObjectReflectorDefault(configuration,new TestClassSubstitutor(),new CollectionTypeRegistryDefault(),new SpecificationTraverserDefault(),new MemberLayoutArrangerDefault(),new ProgrammingModelFacetsJava5(),new HashSet<FacetDecorator>(),new MetaModelValidatorNoop());
  reflector.setRuntimeContext(new RuntimeContextNoRuntime(){
    @Override public AdapterMap getAdapterMap(){
      return adapterMap;
    }
  }
);
  reflector.init();
  factory=new AdapterFactoryAbstract(){
    @Override public ObjectAdapter createAdapter(    Object pojo,    Oid oid){
      ObjectSpecification specification=reflector.loadSpecification(pojo.getClass());
      ResolveState state=oid == null ? ResolveState.VALUE : oid.isTransient() ? ResolveState.TRANSIENT : ResolveState.GHOST;
      final TestProxyAdapter objectAdapter=new TestProxyAdapter();
      objectAdapter.setupResolveState(state);
      objectAdapter.setupObject(pojo);
      objectAdapter.setupOid(oid);
      objectAdapter.setupSpecification(specification);
      adapters.put(pojo,objectAdapter);
      return objectAdapter;
    }
  }
;
}
