{
  if (parameters.isEmpty()) {
    return;
  }
  final Method actionMethod=processMethodContext.getMethod();
  final Class<?>[] paramTypes=actionMethod.getParameterTypes();
  for (int i=0; i < paramTypes.length; i++) {
    final Class<?> arrayOfParamType=(Array.newInstance(paramTypes[i],0)).getClass();
    final Method choicesMethod=findChoicesNumMethodReturning(processMethodContext,i);
    if (choicesMethod == null) {
      continue;
    }
    processMethodContext.removeMethod(choicesMethod);
    final FacetedMethod facetedMethod=processMethodContext.getFacetHolder();
    if (facetedMethod.containsDoOpFacet(ActionChoicesFacet.class)) {
      final Class<?> cls=processMethodContext.getCls();
      throw new MetaModelException(cls + " uses both old and new choices syntax - must use one or other");
    }
    final FacetedMethodParameter paramAsHolder=parameters.get(i);
    FacetUtil.addFacet(new ActionParameterChoicesFacetViaMethod(choicesMethod,arrayOfParamType,paramAsHolder,getDeploymentCategory(),getSpecificationLoader(),getAuthenticationSessionProvider(),getAdapterManager()));
  }
}
