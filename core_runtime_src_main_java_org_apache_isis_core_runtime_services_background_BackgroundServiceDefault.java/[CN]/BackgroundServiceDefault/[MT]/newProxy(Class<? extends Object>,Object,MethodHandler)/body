{
  final ProxyFactory proxyFactory=new ProxyFactory();
  proxyFactory.setSuperclass(cls);
  proxyFactory.setInterfaces(ArrayExtensions.combine(cls.getInterfaces(),new Class<?>[]{JavassistEnhanced.class}));
  proxyFactory.setFilter(new MethodFilter(){
    @Override public boolean isHandled(    final Method m){
      return !m.getName().equals("finalize");
    }
  }
);
  final Class<T> proxySubclass=proxyFactory.createClass();
  try {
    final T newInstance;
    if (mixedInIfAny == null) {
      newInstance=proxySubclass.newInstance();
    }
 else {
      Constructor constructor=findConstructor(proxySubclass,mixedInIfAny);
      newInstance=(T)constructor.newInstance(mixedInIfAny);
    }
    final ProxyObject proxyObject=(ProxyObject)newInstance;
    proxyObject.setHandler(methodHandler);
    return newInstance;
  }
 catch (  final InstantiationException|IllegalAccessException|InvocationTargetException e) {
    throw new IsisException(e);
  }
}
