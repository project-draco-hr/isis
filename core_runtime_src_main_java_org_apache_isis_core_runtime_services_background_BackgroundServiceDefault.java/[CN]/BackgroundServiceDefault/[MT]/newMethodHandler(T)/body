{
  return new MethodHandler(){
    @Override public Object invoke(    final Object proxied,    final Method proxyMethod,    final Method proxiedMethod,    final Object[] args) throws Throwable {
      final boolean inheritedFromObject=proxyMethod.getDeclaringClass().equals(Object.class);
      if (inheritedFromObject) {
        return proxyMethod.invoke(domainObject,args);
      }
      final ObjectAdapter targetAdapter=getAdapterManager().adapterFor(domainObject);
      final ObjectSpecificationDefault targetObjSpec=getJavaSpecificationOfOwningClass(proxyMethod);
      final ObjectMember member=targetObjSpec.getMember(proxyMethod);
      if (member == null) {
        return proxyMethod.invoke(domainObject,args);
      }
      if (!(member instanceof ObjectAction)) {
        throw new UnsupportedOperationException("Only actions can be executed in the background " + "(method " + proxiedMethod.getName() + " represents a "+ member.getFeatureType().name()+ "')");
      }
      final ObjectAction action=(ObjectAction)member;
      final String targetClassName=CommandUtil.targetClassNameFor(targetAdapter);
      final String targetActionName=CommandUtil.targetActionNameFor(action);
      final ObjectAdapter[] argAdapters=adaptersFor(args);
      final String targetArgs=CommandUtil.argDescriptionFor(action,argAdapters);
      final Command command=commandContext.getCommand();
      if (backgroundCommandService instanceof BackgroundCommandService2) {
        final BackgroundCommandService2 bcs2=(BackgroundCommandService2)backgroundCommandService;
        final CommandMementoDto dto=commandMementoService.asCommandMemento(Collections.singletonList(targetAdapter),action,argAdapters);
        bcs2.schedule(dto,command,targetClassName,targetActionName,targetArgs);
        return null;
      }
      final ActionInvocationMemento aim=commandMementoService.asActionInvocationMemento(proxyMethod,domainObject,args);
      backgroundCommandService.schedule(aim,command,targetClassName,targetActionName,targetArgs);
      return null;
    }
    ObjectAdapter[] adaptersFor(    final Object[] args){
      final AdapterManager adapterManager=getAdapterManager();
      return CommandUtil.adaptersFor(args,adapterManager);
    }
  }
;
}
