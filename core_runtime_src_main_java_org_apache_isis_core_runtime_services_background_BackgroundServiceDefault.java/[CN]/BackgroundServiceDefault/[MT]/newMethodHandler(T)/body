{
  return new MethodHandler(){
    @Override public Object invoke(    final Object proxied,    final Method proxyMethod,    final Method proxiedMethod,    final Object[] args) throws Throwable {
      final boolean inheritedFromObject=proxyMethod.getDeclaringClass().equals(Object.class);
      if (inheritedFromObject) {
        return proxyMethod.invoke(domainObject,args);
      }
      final ObjectAdapter targetAdapter=getAdapterManager().adapterFor(domainObject);
      final ObjectSpecificationDefault targetObjSpec=getJavaSpecificationOfOwningClass(proxyMethod);
      final ObjectMember member=targetObjSpec.getMember(proxyMethod);
      if (member == null) {
        return proxyMethod.invoke(domainObject,args);
      }
      if (!(member instanceof ObjectAction)) {
        throw new UnsupportedOperationException("Only actions can be executed in the background " + "(method " + proxiedMethod.getName() + " represents a "+ member.getFeatureType().name()+ "')");
      }
      final ObjectAction action=(ObjectAction)member;
      final String actionIdentifier=ReifiableActionUtil.actionIdentifierFor(action);
      final String targetClassName=ReifiableActionUtil.targetClassNameFor(targetAdapter);
      final String targetActionName=ReifiableActionUtil.targetActionNameFor(action);
      final String targetArgs=ReifiableActionUtil.argDescriptionFor(action,adaptersFor(args));
      final Bookmark domainObjectBookmark=bookmarkService.bookmarkFor(domainObject);
      final List<Class<?>> argTypes=Lists.newArrayList();
      final List<Object> argObjs=Lists.newArrayList();
      ReifiableActionUtil.buildMementoArgLists(mementoService,bookmarkService,proxiedMethod,args,argTypes,argObjs);
      final ReifiableAction reifiableAction=reifiableActionContext.getReifiableAction();
      final ActionInvocationMemento aim=new ActionInvocationMemento(mementoService,actionIdentifier,domainObjectBookmark,argTypes,argObjs);
      backgroundTaskService.schedule(aim,reifiableAction,targetClassName,targetActionName,targetArgs);
      return null;
    }
    ObjectAdapter[] adaptersFor(    final Object[] args){
      final AdapterManager adapterManager=getAdapterManager();
      return ReifiableActionUtil.adaptersFor(args,adapterManager);
    }
  }
;
}
