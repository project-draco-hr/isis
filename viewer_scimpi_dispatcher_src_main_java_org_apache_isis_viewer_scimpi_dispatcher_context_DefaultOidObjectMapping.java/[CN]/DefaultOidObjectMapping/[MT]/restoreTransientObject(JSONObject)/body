{
  final String cls=jsonObject.getString("_class");
  final String id=jsonObject.getString("_id");
  ObjectAdapter object;
  final ObjectSpecification specification=IsisContext.getSpecificationLoader().loadSpecification(cls);
  if (specification.isAggregated() && !specification.isCollection()) {
    final String[] split=id.split("@");
    final SerialOid parentOid=SerialOid.createTransient(Long.parseLong(split[0],16));
    final AggregatedOid oid=new AggregatedOid(parentOid,split[1]);
    object=IsisContext.getPersistenceSession().recreateAdapter(oid,specification);
  }
 else {
    object=mappedObject("T" + cls + "@"+ id);
  }
  for (  final ObjectAssociation association : specification.getAssociations()) {
    final String fieldName=association.getId();
    final Object fieldValue=jsonObject.has(fieldName) ? jsonObject.get(fieldName) : null;
    if (association.getSpecification().isEncodeable()) {
      if (fieldValue == null) {
        ((OneToOneAssociation)association).initAssociation(object,null);
      }
 else {
        final EncodableFacet encodeableFacet=association.getSpecification().getFacet(EncodableFacet.class);
        final ObjectAdapter fromEncodedString=encodeableFacet.fromEncodedString((String)fieldValue);
        ((OneToOneAssociation)association).initAssociation(object,fromEncodedString);
      }
    }
 else     if (association instanceof OneToManyAssociation) {
      final JSONArray collection=(JSONArray)fieldValue;
      for (int i=0; i < collection.length(); i++) {
        JSONObject jsonElement=(JSONObject)collection.get(i);
        ObjectAdapter objectToAdd=restoreTransientObject(jsonElement);
        ((OneToManyAssociation)association).addElement(object,objectToAdd);
      }
    }
 else {
      if (fieldValue == null) {
        ((OneToOneAssociation)association).initAssociation(object,null);
      }
 else {
        if (fieldValue instanceof JSONObject) {
          final ObjectAdapter fieldObject=restoreTransientObject((JSONObject)fieldValue);
          ((OneToOneAssociation)association).initAssociation(object,fieldObject);
        }
 else {
          final ObjectAdapter field=mappedObject((String)fieldValue);
          ((OneToOneAssociation)association).initAssociation(object,field);
        }
      }
    }
  }
  return object;
}
