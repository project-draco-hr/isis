{
  editButton=new AjaxButton(ID_EDIT_BUTTON,Model.of("Edit")){
    private static final long serialVersionUID=1L;
    @Override public void onSubmit(    AjaxRequestTarget target,    Form<?> form){
      toEditMode(target);
    }
    @Override protected void onError(    AjaxRequestTarget target,    Form<?> form){
      toEditMode(target);
    }
  }
;
  add(editButton);
  okButton=new Button(ID_OK_BUTTON,Model.of("OK")){
    private static final long serialVersionUID=1L;
    @Override public void onSubmit(){
      if (!getForm().hasError()) {
        ObjectAdapter object=getEntityModel().getObject();
        Memento snapshotToRollbackToIfInvalid=new Memento(object);
        getEntityModel().apply();
        String invalidReasonIfAny=getEntityModel().getReasonInvalidIfAny();
        if (invalidReasonIfAny != null) {
          getForm().error(invalidReasonIfAny);
          snapshotToRollbackToIfInvalid.recreateObject();
          return;
        }
 else {
          toViewMode(null);
        }
      }
 else {
      }
    }
  }
;
  add(okButton);
  cancelButton=new AjaxButton(ID_CANCEL_BUTTON,Model.of("Cancel")){
    private static final long serialVersionUID=1L;
{
      setDefaultFormProcessing(false);
    }
    @Override protected void onSubmit(    AjaxRequestTarget target,    Form<?> form){
      Session.get().getFeedbackMessages().clear();
      getForm().clearInput();
      getForm().visitFormComponentsPostOrder(new IVisitor(){
        @Override public Object formComponent(        IFormVisitorParticipant formComponent){
          if (formComponent instanceof CancelHintRequired) {
            CancelHintRequired cancelHintRequired=(CancelHintRequired)formComponent;
            cancelHintRequired.onCancel();
          }
          return null;
        }
      }
);
      getEntityModel().resetPropertyModels();
      toViewMode(target);
    }
    @Override protected void onError(    AjaxRequestTarget target,    Form<?> form){
      toViewMode(target);
    }
  }
;
  add(cancelButton);
  editButton.setOutputMarkupPlaceholderTag(true);
  cancelButton.setOutputMarkupPlaceholderTag(true);
}
