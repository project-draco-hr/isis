{
  if (!cache.isInitialized()) {
    return;
  }
  final Class<?> substitutedType=classSubstitutor.getClass(cls);
  if (substitutedType.isAnonymousClass()) {
    return;
  }
  ObjectSpecification spec=loadSpecification(substitutedType);
  while (spec != null) {
    final Class<?> type=spec.getCorrespondingClass();
    cache.remove(type.getName());
    if (spec.containsDoOpFacet(ObjectSpecIdFacet.class)) {
      recache(spec);
    }
    spec=spec.superclass();
  }
}
