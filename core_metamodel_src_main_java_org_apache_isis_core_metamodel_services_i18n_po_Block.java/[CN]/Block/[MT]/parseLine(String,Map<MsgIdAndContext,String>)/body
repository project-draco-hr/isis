{
  if (state == State.CONTEXT) {
    final Matcher contextMatcher=state.pattern.matcher(line);
    if (contextMatcher.matches()) {
      final String context=contextMatcher.group("value");
      contextList.add(context);
      return this;
    }
 else {
      state=State.MSGID;
    }
  }
  if (state == State.MSGID) {
    final Matcher msgidMatcher=state.pattern.matcher(line);
    if (msgidMatcher.matches()) {
      msgid=msgidMatcher.group("value");
      state=State.MSGID_PLURAL;
    }
 else {
      return new Block();
    }
    return this;
  }
  if (state == State.MSGID_PLURAL) {
    final Matcher msgIdPluralMatcher=state.pattern.matcher(line);
    if (msgIdPluralMatcher.matches()) {
      msgid_plural=msgIdPluralMatcher.group("value");
      state=State.MSGSTR0;
      return this;
    }
 else {
      state=State.MSGSTR;
    }
  }
  if (state == State.MSGSTR) {
    final Matcher msgStrMatcher=state.pattern.matcher(line);
    if (msgStrMatcher.matches()) {
      msgstr=msgStrMatcher.group("value");
    }
    append(translationsByKey);
    return new Block();
  }
  if (state == State.MSGSTR0) {
    final Matcher msgStr0Matcher=state.pattern.matcher(line);
    if (msgStr0Matcher.matches()) {
      msgstr=msgStr0Matcher.group("value");
      state=State.MSGSTR1;
    }
 else {
      append(translationsByKey);
      return new Block();
    }
    return this;
  }
  if (state == State.MSGSTR1) {
    final Matcher msgStr1Matcher=state.pattern.matcher(line);
    if (msgStr1Matcher.matches()) {
      msgstr_plural=msgStr1Matcher.group("value");
    }
    append(translationsByKey);
    return new Block();
  }
  return this;
}
