{
  super(id);
  final BootstrapThemeTheme bootstrapTheme=new BootstrapThemeTheme();
  List<BootswatchTheme> bootswatchThemes=Arrays.asList(BootswatchTheme.values());
  List<VegibitTheme> vegibitThemes=Arrays.asList(VegibitTheme.values());
  List<ITheme> allThemes=new ArrayList<>();
  allThemes.addAll(bootswatchThemes);
  allThemes.addAll(vegibitThemes);
  allThemes.add(bootstrapTheme);
  ListView<ITheme> themesView=new ListView<ITheme>("themes",allThemes){
    ActiveThemeProvider activeThemeProvider=Bootstrap.getSettings().getActiveThemeProvider();
    @Override protected void populateItem(    ListItem<ITheme> item){
      final ITheme theme=item.getModelObject();
      if (theme.equals(activeThemeProvider.getActiveTheme())) {
        item.add(AttributeModifier.append("class","active"));
      }
      item.add(new AjaxLink<Void>("themeLink"){
        @Override public void onClick(        AjaxRequestTarget target){
          IBootstrapSettings bootstrapSettings=Bootstrap.getSettings();
          ActiveThemeProvider activeThemeProvider=bootstrapSettings.getActiveThemeProvider();
          activeThemeProvider.setActiveTheme(theme);
          if (theme instanceof BootstrapThemeTheme) {
            bootstrapSettings.setThemeProvider(new SingleThemeProvider(theme));
          }
 else           if (theme instanceof BootswatchTheme) {
            bootstrapSettings.setThemeProvider(new BootswatchThemeProvider((BootswatchTheme)theme));
          }
 else           if (theme instanceof VegibitTheme) {
            bootstrapSettings.setThemeProvider(new VegibitThemeProvider((VegibitTheme)theme));
          }
          target.add(getPage());
        }
      }
.setBody(Model.of(theme.name())));
    }
  }
;
  add(themesView);
}
