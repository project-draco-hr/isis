{
  BasicConfigurator.configure();
  Configuration configuration=new Configuration(new ConfigurationPropertiesLoader(DEFAULT_CONFIG,false));
  PropertyConfigurator.configure(configuration.getProperties("log4j"));
  if (configuration.getString(SHOW_EXPLORATION_OPTIONS) == null) {
    configuration.add(SHOW_EXPLORATION_OPTIONS,"yes");
  }
  NakedObjectsClient nakedObjects=new NakedObjectsClient();
  nakedObjects.setConfiguration(configuration);
  Logger log=Logger.getLogger("Naked Objects");
  log.info(AboutNakedObjects.getName());
  log.info(AboutNakedObjects.getVersion());
  log.info(AboutNakedObjects.getBuildId());
  SplashWindow splash=null;
  boolean noSplash=configuration.getBoolean("nosplash",false);
  if (!noSplash) {
    splash=new SplashWindow();
  }
  File directory=new File(XmlDataManager.directory());
  String[] files=directory.list(new FilenameFilter(){
    public boolean accept(    File dir,    String name){
      return name.endsWith(".xml");
    }
  }
);
  for (int i=0; files != null && i < files.length; i++) {
    new File(directory,files[i]).delete();
  }
  try {
    JavaBusinessObjectContainer container=new JavaBusinessObjectContainer();
    JavaObjectFactory objectFactory=new JavaObjectFactory();
    objectFactory.setContainer(container);
    XmlObjectStore objectStore=new XmlObjectStore();
    objectStore.setDataManager(new XmlDataManager());
    OidGenerator oidGenerator=new SimpleOidGenerator();
    LocalObjectManager objectManager=new LocalObjectManager();
    objectManager.setObjectStore(objectStore);
    objectManager.setOidGenerator(oidGenerator);
    objectManager.setCheckObjectsForDirtyFlag(true);
    nakedObjects.setObjectManager(objectManager);
    NakedObjectSpecificationLoaderImpl specificationLoader=new NakedObjectSpecificationLoaderImpl();
    nakedObjects.setSpecificationLoader(specificationLoader);
    LocalReflectionFactory reflectionFactory=new LocalReflectionFactory();
    JavaReflectorFactory reflectorFactory=new JavaReflectorFactory();
    nakedObjects.setReflectionFactory(reflectionFactory);
    nakedObjects.setReflectorFactory(reflectorFactory);
    new SystemClock();
    nakedObjects.setSession(new SimpleSession());
    ObjectLoaderImpl objectLoader=new ObjectLoaderImpl();
    objectLoader.setPojoAdapterMap(new PojoAdapterHashImpl());
    objectLoader.setObjectFactory(objectFactory);
    nakedObjects.setObjectLoader(objectLoader);
    nakedObjects.init();
    JavaFixtureBuilder fb=new JavaFixtureBuilder();
    CitiesFixture cities;
    fb.addFixture(cities=new CitiesFixture());
    fb.addFixture(new BookingsFixture(cities));
    fb.addFixture(new ClassesFixture());
    fb.installFixtures();
    System.out.println("\n\nLoaded objects");
    System.out.println(objectLoader.getDebugData());
    System.out.println("\n\nState of ObjectManager");
    System.out.println(objectManager.getDebugData());
  }
  finally {
    if (splash != null) {
      splash.toFront();
      splash.removeAfterDelay(3);
    }
  }
}
