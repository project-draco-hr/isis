{
  final ActionModel actionModel=getActionModel();
  final String invalidReasonIfAny=actionModel.getReasonInvalidIfAny();
  if (invalidReasonIfAny != null) {
    raiseWarning(target,feedbackForm,invalidReasonIfAny);
    return false;
  }
  final CommandContext commandContext=getServicesInjector().lookupService(CommandContext.class);
  final Command command;
  if (commandContext != null) {
    command=commandContext.getCommand();
    command.setExecutor(Executor.USER);
  }
 else {
    command=null;
  }
  try {
    final ObjectAdapter resultAdapter=getActionModel().executeHandlingApplicationExceptions();
    getTransactionManager().flushTransaction();
    ActionResultResponse resultResponse=ActionResultResponseType.determineAndInterpretResult(this.getActionModel(),target,resultAdapter);
    resultResponse.getHandlingStrategy().handleResults(this,resultResponse);
    if (actionModel.isBookmarkable()) {
      bookmarkPage(actionModel);
    }
    if (actionPrompt != null) {
      actionPrompt.closePrompt(target);
      actionModel.clearArguments();
    }
    return true;
  }
 catch (  RuntimeException ex) {
    String message=recognizeException(ex,target,feedbackForm);
    if (message != null) {
      if (feedbackForm == null) {
        ActionResultResponseHandlingStrategy.REDIRECT_TO_VOID.handleResults(this,null);
      }
      return false;
    }
    if (command != null) {
      command.setException(Throwables.getStackTraceAsString(ex));
    }
    throw ex;
  }
}
