{
  if (facetedMethodsBuilder == null) {
    throw new MetaModelException("Introspection already taken place, cannot introspect again");
  }
  facetedMethodsBuilder.introspectClass();
  addNamedFacetAndPluralFacetIfRequired();
  if (this.containsFacet(ValueFacet.class)) {
    if (LOG.isDebugEnabled()) {
      LOG.debug("skipping full introspection for value type " + getFullIdentifier());
    }
    return;
  }
  final Class<?> superclass=getCorrespondingClass().getSuperclass();
  setSuperclass(superclass);
  final Class<?>[] interfaceTypes=getCorrespondingClass().getInterfaces();
  final List<ObjectSpecification> interfaceSpecList=Lists.newArrayList();
  for (  final Class<?> interfaceType : interfaceTypes) {
    final Class<?> substitutedInterfaceType=getClassSubstitutor().getClass(interfaceType);
    if (substitutedInterfaceType != null) {
      final ObjectSpecification interfaceSpec=getSpecificationLookup().loadSpecification(substitutedInterfaceType);
      interfaceSpecList.add(interfaceSpec);
    }
  }
  addAsSubclassTo(interfaceSpecList);
  addInterfaces(interfaceSpecList);
  final List<FacetedMethod> associationFacetedMethods=facetedMethodsBuilder.getAssociationFacetedMethods();
  final List<FacetedMethod> actionFacetedMethods=facetedMethodsBuilder.getActionFacetedMethods();
  final OrderSet associationOrderSet=getMemberLayoutArranger().createAssociationOrderSetFor(this,associationFacetedMethods);
  addAssociations(asAssociations(associationOrderSet));
  final OrderSet actionOrderSet=getMemberLayoutArranger().createActionOrderSetFor(this,actionFacetedMethods);
  addObjectActions(asObjectActions(actionOrderSet));
  facetedMethodsBuilder.introspectClassPostProcessing();
  updateFromFacetValues();
  facetedMethodsBuilder=null;
  setIntrospected(true);
}
