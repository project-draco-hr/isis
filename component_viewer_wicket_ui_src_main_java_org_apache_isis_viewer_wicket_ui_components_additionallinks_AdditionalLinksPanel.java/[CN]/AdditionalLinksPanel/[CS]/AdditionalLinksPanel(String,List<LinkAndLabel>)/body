{
  super(id,new ListOfLinksModel(links));
  this.linkAndLabels=getModel().getObject();
  final WebMarkupContainer container=new WebMarkupContainer(ID_ADDITIONAL_LINK_LIST);
  addOrReplace(container);
  container.setOutputMarkupId(true);
  setOutputMarkupId(true);
  final ListView<LinkAndLabel> listView=new ListView<LinkAndLabel>(ID_ADDITIONAL_LINK_ITEM,this.linkAndLabels){
    private static final long serialVersionUID=1L;
    @Override protected void populateItem(    ListItem<LinkAndLabel> item){
      final LinkAndLabel linkAndLabel=item.getModelObject();
      final AbstractLink link=linkAndLabel.getLink();
      Label viewTitleLabel=new Label(ID_ADDITIONAL_LINK_TITLE,linkAndLabel.getLabel());
      String disabledReasonIfAny=linkAndLabel.getDisabledReasonIfAny();
      if (disabledReasonIfAny != null) {
        viewTitleLabel.add(new AttributeAppender("title",disabledReasonIfAny));
      }
      if (linkAndLabel.isBlobOrClob()) {
        link.add(new CssClassAppender("noVeil"));
      }
      if (linkAndLabel.isPrototype()) {
        link.add(new CssClassAppender("prototype"));
      }
      link.add(new CssClassAppender(linkAndLabel.getActionIdentifier()));
      String cssClass=linkAndLabel.getCssClass();
      if (cssClass != null) {
        item.add(new CssClassAppender(cssClass));
      }
      viewTitleLabel.add(new CssClassAppender(StringUtils.toLowerDashed(linkAndLabel.getLabel())));
      link.addOrReplace(viewTitleLabel);
      item.addOrReplace(link);
    }
  }
;
  container.addOrReplace(listView);
}
