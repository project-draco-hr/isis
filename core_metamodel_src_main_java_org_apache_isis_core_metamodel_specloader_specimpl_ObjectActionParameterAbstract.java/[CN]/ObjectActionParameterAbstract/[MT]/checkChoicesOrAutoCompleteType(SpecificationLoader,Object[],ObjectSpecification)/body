{
  for (  final Object object : objects) {
    if (object == null) {
      continue;
    }
    final Class<? extends Object> choiceClass=object.getClass();
    final Class<?> paramClass=paramSpec.getCorrespondingClass();
    final Class<? extends Object> choiceWrappedClass=ClassExtensions.asWrappedIfNecessary(choiceClass);
    final Class<? extends Object> paramWrappedClass=ClassExtensions.asWrappedIfNecessary(paramClass);
    final ObjectSpecification choiceWrappedSpec=specificationLookup.loadSpecification(choiceWrappedClass);
    final ObjectSpecification paramWrappedSpec=specificationLookup.loadSpecification(paramWrappedClass);
    if (!choiceWrappedSpec.isOfType(paramWrappedSpec)) {
      throw new DomainModelException("Type incompatible with parameter type; expected " + paramSpec.getFullIdentifier() + ", but was "+ choiceClass.getName());
    }
  }
}
