{
  context.checking(new Expectations(){
{
      allowing(mockDeploymentCategoryProvider).getDeploymentCategory();
      will(returnValue(DeploymentCategory.PRODUCTION));
      ignoring(mockGridService).existsFor(with(any(Class.class)));
      ignoring(mockPersistenceSessionServiceInternal);
      ignoring(mockTransactionStateProviderInternal);
      ignoring(mockMessageBrokerServiceInternal);
      ignoring(mockLocalizationProviderInternal);
    }
  }
);
  stubConfiguration=new IsisConfigurationDefault(null);
  stubServicesInjector=new ServicesInjector(Lists.newArrayList(mockAuthenticationSessionProvider,stubConfiguration,mockDeploymentCategoryProvider,mockPersistenceSessionServiceInternal,mockLocalizationProviderInternal,mockMessageBrokerServiceInternal,mockTransactionStateProviderInternal,mockGridService,mockDeploymentCategoryProvider),stubConfiguration);
  final SpecificationLoader specificationLoader=new SpecificationLoader(new ProgrammingModelFacetsJava5(stubConfiguration),new MetaModelValidatorDefault(),Lists.<LayoutMetadataReader>newArrayList(new LayoutMetadataReaderFromJson()),stubServicesInjector);
  stubServicesInjector.addFallbackIfRequired(SpecificationLoader.class,specificationLoader);
  specificationLoader.init();
  specification=loadSpecification(specificationLoader);
}
