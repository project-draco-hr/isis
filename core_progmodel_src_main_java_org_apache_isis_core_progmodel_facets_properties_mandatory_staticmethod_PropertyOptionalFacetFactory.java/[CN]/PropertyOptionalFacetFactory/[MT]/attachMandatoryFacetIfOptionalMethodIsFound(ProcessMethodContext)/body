{
  final Method method=processMethodContext.getMethod();
  final String capitalizedName=NameUtils.javaBaseName(method.getName());
  final Class<?> returnType=method.getReturnType();
  Class<?> cls=processMethodContext.getCls();
  final Method optionalMethod=MethodFinderUtils.findMethod(cls,MethodScope.CLASS,MethodPrefixConstants.OPTIONAL_PREFIX + capitalizedName,boolean.class,NO_PARAMETERS_TYPES);
  processMethodContext.removeMethod(optionalMethod);
  if (!indicatesOptional(optionalMethod)) {
    return;
  }
  if (returnType.isPrimitive()) {
    throw new MetaModelException(cls.getName() + "#" + capitalizedName+ " cannot be an optional property as it is of a primitive type");
  }
  final FacetHolder property=processMethodContext.getFacetHolder();
  FacetUtil.addFacet(new MandatoryFacetOptionalViaMethodForProperty(property));
}
