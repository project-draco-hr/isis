{
  return new MetaModelValidatorVisiting.SummarizingVisitor(){
    private final List<String> annotated=Lists.newArrayList();
    @Override public boolean visit(    ObjectSpecification objectSpec,    ValidationFailures validationFailures){
      final List<ObjectAction> objectActions=objectSpec.getObjectActions(Contributed.EXCLUDED);
      if (objectSpec.getCorrespondingClass() == AbstractHomePageDashboardService.class) {
        return true;
      }
      for (      ObjectAction objectAction : objectActions) {
        if (objectAction.containsFacet(HomePageFacet.class)) {
          final String fullIdentifier=objectAction.getIdentifier().toClassAndNameIdentityString();
          annotated.add(fullIdentifier);
        }
      }
      return true;
    }
    @Override public void summarize(    ValidationFailures validationFailures){
      if (annotated.size() > 1) {
        final String nonServiceNamesStr=Joiner.on(", ").join(annotated);
        validationFailures.add("Only one service action can be specified as the dashboard; " + "found HomePageFacet on these actions: %s",nonServiceNamesStr);
      }
    }
  }
;
}
