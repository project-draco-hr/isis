{
  getViewManager().getSpy().addTrace(this,"mouse location within view",location);
  getViewManager().getSpy().addTrace(this,"view location within parent",getLocation());
  Bounds bounds=new Bounds(getView().getSize());
  getViewManager().getSpy().addTrace(this,"view area",bounds);
  Padding padding=getView().getPadding();
  getViewManager().getSpy().addTrace(this,"padding",padding);
  bounds.contract(padding);
  getViewManager().getSpy().addTrace(this,"contents area",bounds);
  if (bounds.contains(location)) {
    Location locationWithinContent=new Location(location);
    locationWithinContent.move(-padding.getLeft(),-padding.getTop());
    getViewManager().getSpy().addTrace(this,"mouse location within content area",locationWithinContent);
    View views[]=getSubviews();
    for (int i=views.length - 1; i >= 0; i--) {
      View subview=views[i];
      if (subview.getBounds().contains(locationWithinContent)) {
        getViewManager().getSpy().addTrace(this,"identified subview",subview);
        locationWithinContent.move(-subview.getLocation().getX(),-subview.getLocation().getY());
        getViewManager().getSpy().addTrace(this,"mouse location within subview",locationWithinContent);
        IdentifiedView identified=subview.identify2(locationWithinContent);
        identified.translate(getLocation());
        getViewManager().getSpy().addTrace(this,"offset by (parent location)",getLocation());
        identified.translate(padding.getLeft(),padding.getTop());
        getViewManager().getSpy().addTrace(this,"offset by (parent padding)",padding);
        return identified;
      }
    }
  }
  getViewManager().getSpy().addTrace("----");
  getViewManager().getSpy().addTrace(this,"mouse location within composite view",location);
  return new IdentifiedView(getView(),location,getLocation());
}
