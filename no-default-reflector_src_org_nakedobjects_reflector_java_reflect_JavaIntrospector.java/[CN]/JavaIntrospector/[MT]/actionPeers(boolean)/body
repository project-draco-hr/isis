{
  LOG.debug("  looking for action methods");
  Method defaultAboutMethod=findMethod(forClass,"aboutActionDefault",null,new Class[]{ActionAbout.class});
  LOG.debug(defaultAboutMethod == null ? "  no default about method for actions" : defaultAboutMethod.toString());
  Vector actions=new Vector();
  for (int i=0; i < methods.length; i++) {
    if (methods[i] == null) {
      continue;
    }
    Method method=methods[i];
    if (Modifier.isStatic(method.getModifiers()) != forClass) {
      continue;
    }
    String fullMethodName=method.getName();
    String[] prefixes={"action","explorationAction","debugAction"};
    int actionPrefix=-1;
    for (int j=0; j < prefixes.length; j++) {
      if (fullMethodName.startsWith(prefixes[j])) {
        actionPrefix=j;
        break;
      }
    }
    if (actionPrefix == -1) {
      continue;
    }
    Class[] params=method.getParameterTypes();
    LOG.info("  identified action " + method);
    methods[i]=null;
    String actionName=fullMethodName.substring(prefixes[actionPrefix].length());
    Action.Target target=Action.DEFAULT;
    if (actionName.startsWith("Local")) {
      target=Action.LOCAL;
      actionName=actionName.substring(5);
    }
 else     if (actionName.startsWith("Remote")) {
      target=Action.REMOTE;
      actionName=actionName.substring(6);
    }
    Class[] longParams=new Class[params.length + 1];
    longParams[0]=ActionAbout.class;
    System.arraycopy(params,0,longParams,1,params.length);
    String aboutName="about" + fullMethodName.substring(0,1).toUpperCase() + fullMethodName.substring(1);
    Method aboutMethod=findMethod(forClass,aboutName,null,longParams);
    if (aboutMethod == null) {
      aboutMethod=defaultAboutMethod;
    }
 else {
      LOG.debug("  with about method " + aboutMethod);
    }
    Action.Type action;
    action=new Action.Type[]{Action.USER,Action.EXPLORATION,Action.DEBUG}[actionPrefix];
    ActionPeer local=createAction(method,actionName,aboutMethod,action,target);
    actions.addElement(local);
  }
  return convertToArray(actions);
}
