{
  Vector v=findPrefixedMethods(OBJECT,GET_PREFIX,type,0);
  for (Enumeration e=v.elements(); e.hasMoreElements(); ) {
    Method getMethod=(Method)e.nextElement();
    Class returnType=getMethod.getReturnType();
    boolean valueHolder=BusinessValueHolder.class.isAssignableFrom(returnType);
    String name=javaBaseName(getMethod.getName());
    Method aboutMethod=findMethod(OBJECT,ABOUT_PREFIX + name,null,new Class[]{FieldAbout.class,returnType});
    if (aboutMethod == null) {
      aboutMethod=defaultAboutFieldMethod;
    }
    Method setMethod=findMethod(OBJECT,SET_PREFIX + name,null,new Class[]{returnType});
    Class[] params=new Class[]{returnType};
    if ((findMethod(OBJECT,SET_PREFIX + name,void.class,params) != null) || (findMethod(OBJECT,"set_" + name,void.class,params) != null)) {
      LOG.error("the method set" + name + " is not needed for the NakedValue class "+ className());
    }
    if (findMethod(OBJECT,"associate" + name,void.class,params) != null) {
      LOG.error("the method associate" + name + " is not needed for the NakedValue class "+ className());
    }
    boolean isHidden=false;
    if (name.startsWith(HIDDEN_PREFIX)) {
      isHidden=true;
      name=name.substring(HIDDEN_PREFIX.length());
    }
    LOG.debug("  identified value " + name + " -> "+ getMethod);
    MemberIdentifier identifier=new MemberIdentifierImpl(className,name);
    JavaOneToOneAssociation association=new JavaOneToOneAssociation(false,identifier,getMethod.getReturnType(),getMethod,setMethod,null,null,aboutMethod,isHidden,setMethod == null && !valueHolder);
    fields.addElement(association);
  }
  return fields;
}
