{
  String action=request.getParameter("action");
  if ("object".equals(action)) {
    String idParam=request.getParameter("id");
    if (idParam == null) {
      response.sendError(HttpResponse.__400_Bad_Request);
      return;
    }
    Vector history=(Vector)session.getAttribute("history");
    if (history.contains(idParam)) {
      history.remove(idParam);
    }
 else     if (history.size() > 15) {
      history.remove(history.size() - 1);
    }
    history.insertElementAt(idParam,0);
    long id=Long.valueOf(idParam).longValue();
    NakedObject object;
    object=NakedObjects.getObjectManager().getObject(new SerialOid(id),null);
    view(out,object);
  }
 else   if ("list".equals(action)) {
    String cls=request.getParameter("class");
    NakedObjectSpecification nc=NakedObjects.getSpecificationLoader().loadSpecification(cls);
    out.println("<h2>" + nc.getPluralName() + "</h2>");
    c=nc.explorationActionInstances();
    Enumeration e=c.displayElements();
    while (e.hasMoreElements()) {
      NakedObject instance=(NakedObject)e.nextElement();
      out.println("<p> <a href=\"?action=object&id=" + serialNumber(instance) + "\">"+ image(instance,16)+ instance.titleString().toString()+ "</a> ");
    }
  }
 else   if ("table".equals(action)) {
    String cls=request.getParameter("class");
    NakedObjectSpecification nc=NakedObjectSpecificationLoader.getInstance().loadSpecification(cls);
    FieldSpecification[] fields;
    out.println("<h2>" + nc.getPluralName() + "</h2>");
    NakedCollection c=nc.explorationActionInstances();
    Enumeration e=c.elements();
    out.println("<table border=2 cellspacing=1 cellpadding=6><thead align=left>");
    NakedObject firstInstance=(NakedObject)e.nextElement();
    fields=nc.getVisibleFields(firstInstance,session);
    out.println("<th>&nbsp;</th>");
    for (int i=0; i < fields.length; i++) {
      FieldSpecification field=fields[i];
      out.println("<th>" + field.getName() + "</th>");
    }
    out.println("</thead>");
    e=c.displayElements();
    while (e.hasMoreElements()) {
      NakedObject instance=(NakedObject)e.nextElement();
      out.println("<tr align=left>");
      out.println("<th>" + objectLink(instance) + "</th>");
      for (int i=0; i < fields.length; i++) {
        FieldSpecification field=fields[i];
        NakedObjectSpecification type=field.getType();
        Naked content=field.get(instance);
        out.println("<td>");
        if (content instanceof InternalCollection) {
          out.println(((NakedCollection)content).size());
        }
 else         if (Logical.class.isAssignableFrom(type)) {
          out.println(content.title().toString());
        }
 else         if (NakedValue.class.isAssignableFrom(type)) {
          out.print(content.title().toString());
        }
 else {
          if (content != null) {
            out.print(objectLink((NakedObject)content));
          }
        }
        out.println("</td>");
      }
      out.println("</tr>");
    }
    out.println("</table>");
  }
}
