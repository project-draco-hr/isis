{
  if (field.isOneToManyAssociation()) {
    final String noColumnsString=request.getOptionalProperty("no-columns","3");
    final String tableClass=request.getOptionalProperty("table-class");
    final String rowClassesList=request.getOptionalProperty("row-classes",ODD_ROW_CLASS + "|" + EVEN_ROW_CLASS);
    String[] rowClasses=new String[0];
    if (rowClassesList != null) {
      rowClasses=rowClassesList.split("[,|/]");
    }
    int noColumns;
    IsisContext.getPersistenceSession().resolveField(object,field);
    final ObjectAdapter collection=field.get(object);
    final ObjectSpecification elementSpec=collection.getElementSpecification();
    final List<ObjectAssociation> fields=elementSpec.getAssociations(Contributed.EXCLUDED,ObjectAssociation.Filters.VISIBLE_AT_LEAST_SOMETIMES);
    if (noColumnsString.equalsIgnoreCase("all")) {
      noColumns=fields.size();
    }
 else {
      noColumns=Math.min(fields.size(),Integer.valueOf(noColumnsString));
    }
    final String summary="Table of elements in " + field.getName();
    final String headers[]=new String[fields.size()];
    int h=0;
    for (int i=0; i < noColumns; i++) {
      if (fields.get(i).isOneToManyAssociation()) {
        continue;
      }
      headers[h++]=fields.get(i).getName();
    }
    final LinkedObject[] linkedFields=new LinkedObject[fields.size()];
    final TableContentWriter rowBuilder=new SimpleTableBuilder(object.titleString(),true,false,"",noColumns,headers,fields,false,showIcons,false,false,false,field.getName(),linkedFields,null);
    TableView.write(request,collection,summary,rowBuilder,null,tableClass,rowClasses);
  }
 else {
    super.addField(request,object,field,linkedObject,showIcons);
  }
}
