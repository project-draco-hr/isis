{
  ClassLoader classLoader=findClassLoader();
  try {
    String systemProp=System.getProperty(factoryId);
    if (systemProp != null) {
      debugPrintln("found system property" + systemProp);
      return newInstance(systemProp,classLoader);
    }
  }
 catch (  SecurityException se) {
  }
  try {
    String javah=System.getProperty("java.home");
    String configFile=javah + File.separator + "lib"+ File.separator+ "jaxp.properties";
    File f=new File(configFile);
    if (f.exists()) {
      Properties props=new Properties();
      props.load(new FileInputStream(f));
      String factoryClassName=props.getProperty(factoryId);
      debugPrintln("found java.home property " + factoryClassName);
      return newInstance(factoryClassName,classLoader);
    }
  }
 catch (  Exception ex) {
    if (debug)     ex.printStackTrace();
  }
  String serviceId="META-INF/services/" + factoryId;
  try {
    InputStream is=null;
    if (classLoader == null) {
      is=ClassLoader.getSystemResourceAsStream(serviceId);
    }
 else {
      is=classLoader.getResourceAsStream(serviceId);
    }
    if (is != null) {
      debugPrintln("found " + serviceId);
      BufferedReader rd=new BufferedReader(new InputStreamReader(is,"UTF-8"));
      String factoryClassName=rd.readLine();
      rd.close();
      if (factoryClassName != null && !"".equals(factoryClassName)) {
        debugPrintln("loaded from services: " + factoryClassName);
        return newInstance(factoryClassName,classLoader);
      }
    }
  }
 catch (  Exception ex) {
    if (debug)     ex.printStackTrace();
  }
  if (fallbackClassName == null) {
    throw new ConfigurationError("Provider for " + factoryId + " cannot be found",null);
  }
  debugPrintln("loaded from fallback value: " + fallbackClassName);
  return newInstance(fallbackClassName,classLoader);
}
