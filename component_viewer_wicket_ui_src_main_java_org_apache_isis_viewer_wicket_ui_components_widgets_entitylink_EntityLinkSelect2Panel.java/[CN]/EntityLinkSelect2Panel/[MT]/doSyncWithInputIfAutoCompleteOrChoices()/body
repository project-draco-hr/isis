{
  if (!isEditableWithEitherAutoCompleteOrChoices()) {
    permanentlyHide(ID_AUTO_COMPLETE);
    return;
  }
  final ChoiceProvider<ObjectAdapterMemento> provider;
  if (hasChoices()) {
    provider=providerForChoices(getEntityModel());
  }
 else   if (hasParamOrPropertyAutoComplete()) {
    provider=providerForParamOrPropertyAutoComplete(getEntityModel());
  }
 else {
    provider=providerForObjectAutoComplete(getEntityModel());
  }
  final ModelAbstract<ObjectAdapterMemento> model=new ModelAbstract<ObjectAdapterMemento>(){
    private static final long serialVersionUID=1L;
    @Override protected ObjectAdapterMemento load(){
      return ObjectAdapterMemento.createOrNull(getPendingElseCurrentAdapter());
    }
  }
;
  autoCompleteField=new Select2Choice<ObjectAdapterMemento>(ID_AUTO_COMPLETE,model,provider);
  final Settings settings=autoCompleteField.getSettings();
  settings.setMinimumInputLength(MIN_INPUT_LENGTH);
  addOrReplace(autoCompleteField);
  permanentlyHide(ID_ENTITY_ICON_AND_TITLE);
  permanentlyHide(ID_ENTITY_TITLE_NULL);
}
