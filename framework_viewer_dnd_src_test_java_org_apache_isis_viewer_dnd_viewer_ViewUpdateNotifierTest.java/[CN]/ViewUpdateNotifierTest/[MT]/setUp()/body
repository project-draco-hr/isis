{
  Logger.getRootLogger().setLevel(Level.OFF);
  servicesList=Collections.emptyList();
  context.checking(new Expectations(){
{
      ignoring(mockTemplateImageLoader);
      ignoring(mockSpecificationLoader);
      ignoring(mockAuthenticationManager);
      ignoring(mockAuthorizationManager);
      one(mockUserProfileLoader).getProfile(with(any(AuthenticationSession.class)));
      will(returnValue(new UserProfile()));
      ignoring(mockUserProfileLoader);
      allowing(mockPersistenceSessionFactory).createPersistenceSession();
      will(returnValue(mockPersistenceSession));
      ignoring(mockPersistenceSessionFactory);
      allowing(mockPersistenceSession).getTransactionManager();
      will(returnValue(mockTransactionManager));
      ignoring(mockPersistenceSession);
      allowing(mockTransactionManager).getTransaction();
      will(returnValue(mockTransaction));
      ignoring(mockTransaction);
    }
  }
);
  final IsisSessionFactory sessionFactory=new IsisSessionFactoryDefault(DeploymentType.EXPLORATION,new IsisConfigurationDefault(),mockTemplateImageLoader,mockSpecificationLoader,mockAuthenticationManager,mockAuthorizationManager,mockUserProfileLoader,mockPersistenceSessionFactory,servicesList);
  sessionFactory.init();
  IsisContextStatic.createRelaxedInstance(sessionFactory);
  IsisContext.openSession(new ExplorationSession());
  notifier=new ExposedViewUpdateNotifier();
}
