{
  List<? extends ObjectAssociation> fields=specification.getAssociations();
  int simpleFieldCount=0;
  int collectionFieldCount=0;
  for (int i=0; i < fields.size(); i++) {
    if (fields.get(i).isNotPersisted()) {
      continue;
    }
 else     if (fields.get(i).isOneToManyAssociation()) {
      collectionFieldCount++;
    }
 else {
      simpleFieldCount++;
    }
  }
  ObjectAssociation[] oneToOneProperties=new ObjectAssociation[simpleFieldCount];
  ObjectAssociation[] oneToManyProperties=new ObjectAssociation[collectionFieldCount];
  collectionMappers=new CollectionMapper[collectionFieldCount];
  IsisConfiguration subset=IsisContext.getConfiguration().createSubset(parameterBase + ".mapper.");
  for (int i=0, simpleFieldNo=0, collectionFieldNo=0; i < fields.size(); i++) {
    ObjectAssociation field=fields.get(i);
    if (field.isNotPersisted()) {
      continue;
    }
 else     if (field.isOneToManyAssociation()) {
      oneToManyProperties[collectionFieldNo]=field;
      String type=subset.getString(field.getId());
      if (type == null || type.equals("association-table")) {
        collectionMappers[collectionFieldNo]=new MultiColumnCombinedCollectionMapper(oneToManyProperties[collectionFieldNo],parameterBase,lookup,objectMapperLookup);
      }
 else       if (type.equals("fk-table")) {
        String property=parameterBase + field.getId() + ".element-type";
        String elementType=configParameters.getString(property);
        if (elementType == null) {
          throw new SqlObjectStoreException("Expected property " + property);
        }
      }
 else {
        throw new NotYetImplementedException("for " + type);
      }
      collectionFieldNo++;
    }
 else     if (field.isOneToOneAssociation()) {
      oneToOneProperties[simpleFieldNo]=field;
      simpleFieldNo++;
    }
 else {
      oneToOneProperties[simpleFieldNo]=field;
      simpleFieldNo++;
    }
  }
  for (int f=0; f < oneToOneProperties.length; f++) {
    ObjectAssociation field=oneToOneProperties[f];
    FieldMapping mapping=lookup.createMapping(field);
    fieldMappings.add(mapping);
    fieldMappingLookup.put(field,mapping);
  }
}
