{
  options.add(MenuOptionSet.VIEW,new MenuOption("Quit"){
    public void execute(    Workspace workspace,    View view,    Location at){
      viewer.close();
    }
  }
);
  options.add(MenuOptionSet.DEBUG,new MenuOption("Vew context details..."){
    public void execute(    Workspace workspace,    View view,    Location at){
      InfoDebugFrame f=new InfoDebugFrame();
      f.setInfo(NakedObjects.getCurrentSession());
      f.show(at.x + 50,workspace.getBounds().y + 6);
    }
  }
);
  options.add(MenuOptionSet.DEBUG,loggingOption("Off",Level.OFF));
  options.add(MenuOptionSet.DEBUG,loggingOption("Error",Level.ERROR));
  options.add(MenuOptionSet.DEBUG,loggingOption("Warn",Level.WARN));
  options.add(MenuOptionSet.DEBUG,loggingOption("Info",Level.INFO));
  options.add(MenuOptionSet.DEBUG,loggingOption("Debug",Level.DEBUG));
  String debug="Debug graphics " + (AbstractView.debug ? "off" : "on");
  options.add(MenuOptionSet.DEBUG,new MenuOption(debug){
    public void execute(    Workspace workspace,    View view,    Location at){
      AbstractView.debug=!AbstractView.debug;
      view.markDamaged();
    }
  }
);
  String action=viewer.isShowingMouseSpy() ? "Hide" : "Show";
  options.add(MenuOptionSet.DEBUG,new MenuOption(action + " mouse spy"){
    public void execute(    Workspace workspace,    View view,    Location at){
      viewer.setShowMouseSpy(!viewer.isShowingMouseSpy());
    }
  }
);
  options.add(MenuOptionSet.DEBUG,new MenuOption("Restart object manager"){
    public void execute(    Workspace workspace,    View view,    Location at){
      NakedObjects.getObjectManager().reset();
    }
  }
);
  options.add(MenuOptionSet.DEBUG,new MenuOption("Debug notification receivers..."){
    public void execute(    Workspace workspace,    View view,    Location at){
      InfoDebugFrame f=new InfoDebugFrame();
      f.setInfo(updateNotifier);
      f.show(at.x + 50,workspace.getBounds().y + 6);
    }
  }
);
  options.add(MenuOptionSet.DEBUG,new MenuOption("Debug object manager"){
    public void execute(    Workspace workspace,    View view,    Location at){
      NakedObjectManager om=NakedObjects.getObjectManager();
      InfoDebugFrame f=new InfoDebugFrame();
      f.setInfo(om);
      f.show(at.x + 50,workspace.getBounds().y + 6);
    }
  }
);
  options.add(MenuOptionSet.DEBUG,new MenuOption("Dump all"){
    public void execute(    Workspace workspace,    View view,    Location at){
      DebugFileDump.dump(NakedObjects.debug());
    }
  }
);
  options.add(MenuOptionSet.DEBUG,new MenuOption("Debug overlay..."){
    public void execute(    Workspace workspace,    View view,    Location at){
      DebugFrame f=new OverlayDebugFrame(viewer);
      f.show(at.x + 50,workspace.getBounds().y + 6);
    }
  }
);
  options.add(MenuOptionSet.DEBUG,new MenuOption("Debug prototypes..."){
    public void execute(    Workspace workspace,    View view,    Location at){
      InfoDebugFrame f=new InfoDebugFrame();
      f.setInfo(Skylark.getViewFactory());
      f.show(at.x + 50,workspace.getBounds().y + 6);
    }
  }
);
}
