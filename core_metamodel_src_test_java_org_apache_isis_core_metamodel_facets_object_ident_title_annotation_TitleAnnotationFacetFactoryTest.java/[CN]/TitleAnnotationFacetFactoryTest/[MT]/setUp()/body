{
  context.allowing(mockSpecificationLoader);
  facetFactory=new TitleAnnotationFacetFactory();
  facetFactory.setServicesInjector(mockServicesInjector);
  context.checking(new Expectations(){
{
      allowing(mockServicesInjector).lookupService(AuthenticationSessionProvider.class);
      will(returnValue(mockAuthenticationSessionProvider));
      allowing(mockServicesInjector).lookupService(DeploymentCategoryProvider.class);
      will(returnValue(mockDeploymentCategoryProvider));
      allowing(mockDeploymentCategoryProvider).getDeploymentCategory();
      will(returnValue(DeploymentCategory.PRODUCTION));
      allowing(mockAuthenticationSessionProvider).getAuthenticationSession();
      will(returnValue(mockAuthenticationSession));
      allowing(mockServicesInjector).getSpecificationLoader();
      will(returnValue(mockSpecificationLoader));
      allowing(mockServicesInjector).getPersistenceSessionServiceInternal();
      will(returnValue(mockPersistenceSessionServiceInternal));
    }
  }
);
  facetFactory.setServicesInjector(mockServicesInjector);
}
