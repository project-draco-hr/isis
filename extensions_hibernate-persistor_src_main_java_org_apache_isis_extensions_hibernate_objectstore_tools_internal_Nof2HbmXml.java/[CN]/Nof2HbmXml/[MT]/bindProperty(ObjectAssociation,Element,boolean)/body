{
  LOG.debug("Binding persistent property [" + field.getId() + "]");
  final Element property=classElement.addElement("property");
  setType(field,property,"type",true,valueFieldAccess);
  final Attribute access=property.attribute("access");
  final boolean fieldAccess=access != null && access.getStringValue().equals("field");
  property.addAttribute("name",getPropertyName(field,fieldAccess));
  final org.hibernate.type.Type type=TypeFactory.heuristicType(property.attribute("type").getValue(),null);
  if (type instanceof CompositeCustomType) {
    final String[] names=((CompositeCustomType)type).getPropertyNames();
    for (int i=0; i < names.length; i++) {
      final String compositeColumnName=deconflictColumnName(columnName(field.getId()) + "_" + names[i]);
      property.addElement("column").addAttribute("name",compositeColumnName);
    }
  }
 else {
    addColumnAttribute(property,columnName(field.getId()));
  }
}
