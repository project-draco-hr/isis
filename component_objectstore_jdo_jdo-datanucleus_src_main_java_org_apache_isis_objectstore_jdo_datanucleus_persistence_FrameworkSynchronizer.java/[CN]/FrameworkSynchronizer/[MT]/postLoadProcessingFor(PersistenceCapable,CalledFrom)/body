{
  withLogging(pojo,new Runnable(){
    @Override public void run(){
      final Version datastoreVersion=getVersionIfAny(pojo);
      final RootOid originalOid;
      ObjectAdapter originalAdapter=getAdapterManager().getAdapterFor(pojo);
      if (originalAdapter != null) {
        ensureRootObject(pojo);
        originalOid=(RootOid)originalAdapter.getOid();
        final Version originalVersion=originalAdapter.getVersion();
        getPersistenceSession().remapRecreatedPojo(originalAdapter,pojo);
        final RootOid thisOid=originalOid;
        final Version thisVersion=originalVersion;
        final Version otherVersion=datastoreVersion;
        if (thisVersion != null && otherVersion != null && thisVersion.different(otherVersion)) {
          if (ConcurrencyException.concurrencyChecking.get().isChecking()) {
            LOG.info("concurrency conflict detected on " + thisOid + " ("+ otherVersion+ ")");
            final String currentUser=getAuthenticationSession().getUserName();
            final ConcurrencyException abortCause=new ConcurrencyException(currentUser,thisOid,thisVersion,otherVersion);
            getCurrentTransaction().setAbortCause(abortCause);
          }
 else {
            LOG.warn("concurrency conflict detected but suppressed, on " + thisOid + " ("+ otherVersion+ ")");
          }
        }
      }
 else {
        final OidGenerator oidGenerator=getOidGenerator();
        originalOid=oidGenerator.createPersistent(pojo,null);
        originalAdapter=getAdapterManager().getAdapterFor(originalOid);
        if (originalAdapter != null) {
          getPersistenceSession().remapRecreatedPojo(originalAdapter,pojo);
        }
 else {
          originalAdapter=getPersistenceSession().mapRecreatedPojo(originalOid,pojo);
        }
      }
      if (!originalAdapter.isResolved()) {
        PersistorUtil.startResolving(originalAdapter);
        PersistorUtil.toEndState(originalAdapter);
      }
      originalAdapter.setVersion(datastoreVersion);
      if (pojo.jdoIsDeleted()) {
        originalAdapter.changeState(ResolveState.DESTROYED);
      }
      ensureFrameworksInAgreement(pojo);
    }
  }
,calledFrom);
}
