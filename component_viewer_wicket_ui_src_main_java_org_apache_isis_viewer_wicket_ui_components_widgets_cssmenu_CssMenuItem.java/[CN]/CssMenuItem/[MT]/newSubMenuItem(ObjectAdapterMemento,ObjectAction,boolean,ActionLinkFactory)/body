{
  final AuthenticationSession session=getAuthenticationSession();
  final ObjectAdapter adapter=targetAdapterMemento.getObjectAdapter(ConcurrencyChecking.CHECK);
  final Consent visibility=objectAction.isVisible(session,adapter,ActionModel.WHERE_FOR_ACTION_INVOCATION);
  if (visibility.isVetoed()) {
    return null;
  }
  final LinkAndLabel linkAndLabel=actionLinkFactory.newLink(targetAdapterMemento,objectAction,PageAbstract.ID_MENU_LINK);
  if (linkAndLabel == null) {
    return null;
  }
  final AbstractLink link=linkAndLabel.getLink();
  final String actionLabel=linkAndLabel.getLabel();
  final Consent usability=objectAction.isUsable(session,adapter,ActionModel.WHERE_FOR_ACTION_INVOCATION);
  final String reasonDisabledIfAny=usability.getReason();
  final DescribedAsFacet describedAsFacet=objectAction.getFacet(DescribedAsFacet.class);
  final String descriptionIfAny=describedAsFacet != null ? describedAsFacet.value() : null;
  Builder builder=newSubMenuItem(actionLabel).link(link).describedAs(descriptionIfAny).enabled(reasonDisabledIfAny).returnsBlobOrClob(ObjectAction.Utils.returnsBlobOrClob(objectAction)).prototyping(ObjectAction.Utils.isExplorationOrPrototype(objectAction)).separator(separator).withActionIdentifier(ObjectAction.Utils.actionIdentifierFor(objectAction)).withCssClass(ObjectAction.Utils.cssClassFor(objectAction)).withCssClassFa(ObjectAction.Utils.cssClassFaFor(objectAction));
  return builder;
}
