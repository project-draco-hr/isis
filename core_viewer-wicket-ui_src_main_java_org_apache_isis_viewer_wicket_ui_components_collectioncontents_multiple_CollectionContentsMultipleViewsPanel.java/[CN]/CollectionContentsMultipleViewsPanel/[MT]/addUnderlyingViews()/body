{
  final EntityCollectionModel model=getModel();
  final List<ComponentFactory> componentFactories=selectorHelper.getComponentFactories();
  final CollectionSelectorPanel selectorDropdownPanelIfAny=CollectionSelectorProvider.Util.getCollectionSelectorProvider(this);
  final String selected;
  selected=selectorDropdownPanelIfAny != null ? selectorHelper.honourViewHintElseDefault(selectorDropdownPanelIfAny) : componentFactories.get(0).getName();
  int i=0;
  int selectedIdx=0;
  underlyingViews=new Component[MAX_NUM_UNDERLYING_VIEWS];
  final EntityCollectionModel emptyModel=model.asDummy();
  for (  ComponentFactory componentFactory : componentFactories) {
    final String underlyingId=underlyingIdPrefix + "-" + i;
    final boolean isSelected=selected.equals(componentFactory.getName());
    final Component underlyingView=componentFactory.createComponent(underlyingId,isSelected ? model : emptyModel);
    if (isSelected) {
      selectedIdx=i;
    }
    underlyingViews[i++]=underlyingView;
    this.addOrReplace(underlyingView);
  }
  while (i < MAX_NUM_UNDERLYING_VIEWS) {
    String underlyingId=underlyingIdPrefix + "-" + i;
    permanentlyHide(underlyingId);
    i++;
  }
  this.setOutputMarkupId(true);
  for (i=0; i < MAX_NUM_UNDERLYING_VIEWS; i++) {
    Component component=underlyingViews[i];
    if (component != null) {
      if (i != selectedIdx) {
        component.add(new CssClassAppender(INVISIBLE_CLASS));
      }
 else {
        selectedComponent=component;
      }
    }
  }
}
