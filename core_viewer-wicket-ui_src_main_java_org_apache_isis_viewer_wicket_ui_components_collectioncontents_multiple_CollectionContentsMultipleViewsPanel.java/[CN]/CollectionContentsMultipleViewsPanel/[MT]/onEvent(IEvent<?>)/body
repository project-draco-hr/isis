{
  super.onEvent(event);
  final IsisUiHintEvent uiHintEvent=IsisEnvelopeEvent.openLetter(event,IsisUiHintEvent.class);
  if (uiHintEvent == null) {
    return;
  }
  final CollectionSelectorPanel selectorDropdownPanel=CollectionSelectorProvider.Util.getCollectionSelectorProvider(this);
  if (selectorDropdownPanel == null) {
    return;
  }
  String viewStr=null;
  final UiHintContainer uiHintContainer=uiHintEvent.getUiHintContainer();
  if (uiHintContainer != null) {
    viewStr=uiHintContainer.getHint(selectorDropdownPanel,UIHINT_VIEW);
  }
  if (viewStr == null) {
    viewStr=uiHintEvent.hintFor(selectorDropdownPanel,UIHINT_VIEW);
  }
  if (viewStr == null) {
    return;
  }
  int underlyingViewNum=selectorHelper.lookup(viewStr);
  final EntityCollectionModel dummyModel=getModel().asDummy();
  for (int i=0; i < MAX_NUM_UNDERLYING_VIEWS; i++) {
    final Component component=underlyingViews[i];
    if (component == null) {
      continue;
    }
    final boolean isSelected=i == underlyingViewNum;
    applyCssVisibility(component,isSelected);
    component.setDefaultModel(isSelected ? getModel() : dummyModel);
  }
  this.selectedComponent=underlyingViews[underlyingViewNum];
  final AjaxRequestTarget target=uiHintEvent.getTarget();
  if (target != null) {
    target.add(this,selectorDropdownPanel);
  }
}
