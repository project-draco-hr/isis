{
  Color color;
  if (getState().canDrop()) {
    color=Style.VALID;
  }
 else   if (getState().cantDrop()) {
    color=Style.INVALID;
  }
 else   if (getState().isObjectIdentified()) {
    color=Style.PRIMARY1;
  }
 else {
    color=Style.BLACK;
  }
  int maxWidth=view.getSize().getWidth() - view.getPadding().getLeft() - view.getPadding().getRight();
  String text=title();
  int xt=x + View.HPADDING;
  int yt=baseline;
  if (style.stringWidth(text) > maxWidth) {
    int elip=style.stringWidth("...");
    do {
      int last=text.lastIndexOf(' ');
      if (last == -1) {
        for (int i=text.length() - 1; i > 5; i--) {
          if ((style.stringWidth(text.substring(0,i)) + elip) < maxWidth) {
            text=text.substring(0,i);
            break;
          }
        }
        break;
      }
      text=text.substring(0,last);
    }
 while ((style.stringWidth(text) + elip) > maxWidth);
    text+="...";
  }
  canvas.drawText(text,xt,yt,color,style);
  if (AbstractView.debug) {
    int x2=style.stringWidth(text) - 1;
    canvas.drawRectangle(xt,yt - style.getAscent(),x2,style.getHeight() - 1,Color.DEBUG_DRAW_BOUNDS);
    canvas.drawLine(xt,yt - style.getAscent() - style.getHeight() / 2,xt + x2,yt - style.getAscent() - style.getHeight() / 2,Color.DEBUG_DRAW_BOUNDS);
    canvas.drawLine(xt,baseline,xt + x2,baseline,Color.DEBUG_BASELINE);
  }
}
