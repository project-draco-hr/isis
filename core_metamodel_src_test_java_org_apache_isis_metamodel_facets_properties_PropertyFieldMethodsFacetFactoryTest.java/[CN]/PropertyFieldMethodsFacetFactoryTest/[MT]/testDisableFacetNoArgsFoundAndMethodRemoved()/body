{
@edu.umd.cs.findbugs.annotations.SuppressWarnings("UMAC_UNCALLABLE_METHOD_OF_ANONYMOUS_CLASS") class Customer {
    @SuppressWarnings("unused") public String getFirstName(){
      return null;
    }
    @SuppressWarnings("unused") public String disableFirstName(){
      return "disabled";
    }
  }
  final Method propertyAccessorMethod=findMethod(Customer.class,"getFirstName");
  final Method propertyDisableMethod=findMethod(Customer.class,"disableFirstName");
  facetFactory.process(Customer.class,propertyAccessorMethod,methodRemover,facetHolder);
  final Facet facet=facetHolder.getFacet(DisableForContextFacet.class);
  assertNotNull(facet);
  assertTrue(facet instanceof DisableForContextFacetViaMethod);
  final DisableForContextFacetViaMethod disableForContextFacet=(DisableForContextFacetViaMethod)facet;
  assertEquals(propertyDisableMethod,disableForContextFacet.getMethods().get(0));
  assertTrue(methodRemover.getRemoveMethodMethodCalls().contains(propertyDisableMethod));
}
