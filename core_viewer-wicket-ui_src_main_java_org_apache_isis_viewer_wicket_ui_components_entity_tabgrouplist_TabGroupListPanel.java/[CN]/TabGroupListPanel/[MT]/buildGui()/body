{
  final EntityModel model=getModel();
  final List<TabGroup> tabGroups=model.getTabGroupListMetadata();
  final ListView<TabGroup> tabGroupsList=new ListView<TabGroup>(ID_TAB_GROUPS,tabGroups){
    @Override protected void populateItem(    final ListItem<TabGroup> item){
      final TabGroup tabGroup=item.getModelObject();
      final EntityModel entityModelWithHints=model.cloneWithTabGroupMetadata(tabGroup);
      final AjaxBootstrapTabbedPanel ajaxBootstrapTabbedPanel=newTabbedPanel(entityModelWithHints);
      item.add(ajaxBootstrapTabbedPanel);
    }
    private AjaxBootstrapTabbedPanel newTabbedPanel(    final EntityModel entityModel){
      final TabGroup tabGroup=entityModel.getTabGroupMetadata();
      final List<ITab> tabs=Lists.newArrayList();
      final List<Tab> tabList=FluentIterable.from(tabGroup.getTabs()).filter(Tab.Predicates.notEmpty()).toList();
      for (      final Tab tab : tabList) {
        tabs.add(new AbstractTab(Model.of(tab.getName())){
          private static final long serialVersionUID=1L;
          @Override public Panel getPanel(          String panelId){
            return new TabPanel(panelId,model,tab);
          }
        }
);
      }
      final AjaxBootstrapTabbedPanel tabbedPanel=new AjaxBootstrapTabbedPanel(ID_TAB_GROUP,tabs){
        @Override public TabbedPanel setSelectedTab(        final int index){
          saveSelectedTabInSession(tabGroup,index,entityModel);
          return super.setSelectedTab(index);
        }
      }
;
      setSelectedTabFromSessionIfAny(tabGroup,tabbedPanel,entityModel);
      return tabbedPanel;
    }
    private void setSelectedTabFromSessionIfAny(    final TabGroup tabGroup,    final AjaxBootstrapTabbedPanel ajaxBootstrapTabbedPanel,    final EntityModel entityModel){
      final String key=buildKey(tabGroup,entityModel);
      final String value=(String)getSession().getAttribute(key);
      if (value != null) {
        final int tabIndex=Integer.parseInt(value);
        final int numTabs=ajaxBootstrapTabbedPanel.getTabs().size();
        if (tabIndex < numTabs) {
          ajaxBootstrapTabbedPanel.setSelectedTab(tabIndex);
        }
      }
    }
    private void saveSelectedTabInSession(    final TabGroup tabGroup,    final int tabIndex,    final EntityModel entityModel){
      final String key=buildKey(tabGroup,entityModel);
      getSession().setAttribute(key,"" + tabIndex);
    }
    private String buildKey(    final TabGroup tabGroup,    final EntityModel entityModel){
      final ObjectAdapterMemento objectAdapterMemento=entityModel.getObjectAdapterMemento();
      final RootOid oid=(RootOid)objectAdapterMemento.getObjectAdapter(AdapterManager.ConcurrencyChecking.NO_CHECK).getOid();
      final String key=IsisContext.getOidMarshaller().marshalNoVersion(oid) + ":" + tabGroup.getPath()+ "#selectedTab";
      return key;
    }
  }
;
  add(tabGroupsList);
}
