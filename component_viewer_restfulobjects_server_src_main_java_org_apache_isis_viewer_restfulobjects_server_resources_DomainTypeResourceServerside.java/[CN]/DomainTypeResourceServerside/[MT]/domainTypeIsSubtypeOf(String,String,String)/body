{
  init(Where.ANYWHERE);
  final String supertype=domainTypeFor(superTypeStr,args,"supertype");
  final ObjectSpecification domainTypeSpec=getSpecificationLoader().loadSpecification(domainType);
  final ObjectSpecification supertypeSpec=getSpecificationLoader().loadSpecification(supertype);
  final TypeActionResultReprRenderer renderer=new TypeActionResultReprRenderer(getResourceContext(),null,JsonRepresentation.newMap());
  final String url="domainTypes/" + domainTypeSpec.getFullIdentifier() + "/typeactions/isSubtypeOf/invoke";
  final LinkBuilder linkBuilder=LinkBuilder.newBuilder(getResourceContext(),Rel.SELF.getName(),RepresentationType.TYPE_ACTION_RESULT,url);
  final JsonRepresentation arguments=DomainTypeReprRenderer.argumentsTo(getResourceContext(),"supertype",supertypeSpec);
  final JsonRepresentation selfLink=linkBuilder.withArguments(arguments).build();
  final boolean value=domainTypeSpec.isOfType(supertypeSpec);
  renderer.with(domainTypeSpec).withSelf(selfLink).withValue(value);
  return responseOfOk(renderer,Caching.ONE_DAY).build();
}
