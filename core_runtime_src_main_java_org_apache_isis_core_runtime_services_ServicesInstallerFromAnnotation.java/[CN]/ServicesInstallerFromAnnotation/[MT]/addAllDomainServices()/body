{
  final SortedMap<Integer,List<Object>> positionedServices=Maps.newTreeMap();
  for (  final String packagePrefix : Iterables.transform(Splitter.on(",").split(packagePrefixes),trim())) {
    Reflections reflections=new Reflections(packagePrefix);
    final Iterable<Class<?>> classes=Iterables.filter(reflections.getTypesAnnotatedWith(DomainService.class),instantiatable());
    for (    final Class<?> cls : classes) {
      final DomainService domainService=cls.getAnnotation(DomainService.class);
      final int order=domainService.value();
      final String serviceName=cls.getName();
      List<Object> list=positionedServices.get(order);
      if (list == null) {
        list=Lists.newArrayList();
        positionedServices.put(order,list);
      }
      LOG.info("creating service " + serviceName + (order != Integer.MAX_VALUE ? " at position " + order : ""));
      Object service=instantiateService(cls);
      if (service != null) {
        list.add(service);
      }
    }
  }
  final List<Object> serviceList=Lists.newArrayList();
  for (  Integer position : positionedServices.keySet()) {
    final List<Object> list=positionedServices.get(position);
    serviceList.addAll(list);
  }
  return serviceList;
}
