{
  org.apache.log4j.Logger.getRootLogger().setLevel(org.apache.log4j.Level.OFF);
  context.ignoring(mockRuntimeContext);
  context.ignoring(mockConfiguration);
  context.ignoring(mockAuditingService3);
  isisMetaModel=new IsisMetaModel(mockRuntimeContext,new ProgrammingModelFacetsJava5(),new CustomerRepository());
  isisMetaModel.init();
  context.checking(new Expectations(){
{
      ignoring(mockObjectStore).open();
      ignoring(mockObjectStore).close();
      ignoring(mockObjectStore).name();
      ignoring(mockConfiguration);
      ignoring(createObjectCommand);
      ignoring(saveObjectCommand);
      ignoring(destroyObjectCommand);
      ignoring(mockVersion);
      allowing(mockAuthenticationSession).getMessageBroker();
      will(returnValue(mockMessageBroker));
    }
  }
);
  final RuntimeContextFromSession runtimeContext=new RuntimeContextFromSession();
  final DomainObjectContainerDefault container=new DomainObjectContainerDefault();
  runtimeContext.injectInto(container);
  servicesInjector=new ServicesInjectorDefault(new InjectorMethodEvaluatorDefault());
  adapterManager=new AdapterManagerDefault(new PojoRecreatorUnified(mockConfiguration));
  adapterFactory=new PojoAdapterFactory();
  persistenceSession=new PersistenceSession(mockPersistenceSessionFactory,servicesInjector,mockObjectStore,mockConfiguration){
    @Override protected SpecificationLoaderSpi getSpecificationLoader(){
      return isisMetaModel.getSpecificationLoader();
    }
  }
;
  servicesInjector.setServices(Collections.<Object>singletonList(container));
  context.checking(new Expectations(){
{
      allowing(mockAuthenticationSession).getUserName();
      will(returnValue("sven"));
    }
  }
);
  transactionManager=new IsisTransactionManager(persistenceSession,mockObjectStore,servicesInjector){
    @Override public AuthenticationSession getAuthenticationSession(){
      return mockAuthenticationSession;
    }
  }
;
  persistenceSession.setTransactionManager(transactionManager);
  persistentAdapter=PojoAdapterBuilder.create().withOid("CUS|1").withPojo(new Customer()).with(Persistence.PERSISTENT).with(mockVersion).with(isisMetaModel.getSpecificationLoader()).build();
  transientAdapter=PojoAdapterBuilder.create().withOid("CUS|2").withPojo(new Customer()).with(Persistence.TRANSIENT).with(isisMetaModel.getSpecificationLoader()).build();
}
