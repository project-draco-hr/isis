{
  backgroundService=new BackgroundServiceDefault(){
    @Override protected SpecificationLoaderSpi getSpecificationLoader(){
      return mockSpecificationLoaderSpi;
    }
  }
;
  backgroundService.injectBookmarkService(mockBookmarkService);
  backgroundService.injectReifiableActionContext(mockReifiableActionContext);
  backgroundService.injectBackgroundTaskService(mockBackgroundTaskService);
  reifiableAction=new ReifiableActionDefault();
  reifiableAction.setTransactionId(transactionId);
  reifiableAction.setUser("fbloggs");
  reifiableAction.setTransactionId(transactionId);
  context.checking(new Expectations(){
{
      allowing(mockSpecificationLoaderSpi).loadSpecification(with(IsisMatchers.anySubclassOf(Customer.class)));
      will(returnValue(mockSpec));
      allowing(mockSpec).getFullIdentifier();
      will(returnValue(Customer.class.getName()));
      allowing(mockReifiableActionContext).getReifiableAction();
      will(returnValue(reifiableAction));
    }
  }
);
  customer=new Customer();
  product=new Product();
  actionIdentifier=Identifier.actionIdentifier(Customer.class,"placeOrder",Product.class,int.class);
}
