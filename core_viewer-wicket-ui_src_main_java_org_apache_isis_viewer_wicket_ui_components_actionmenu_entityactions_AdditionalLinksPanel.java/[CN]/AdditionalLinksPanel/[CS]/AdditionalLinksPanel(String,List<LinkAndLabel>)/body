{
  super(id,new ListOfLinksModel(links));
  final List<LinkAndLabel> linkAndLabels=getModel().getObject();
  final WebMarkupContainer container=new WebMarkupContainer(ID_ADDITIONAL_LINK_LIST);
  addOrReplace(container);
  container.setOutputMarkupId(true);
  setOutputMarkupId(true);
  final ListView<LinkAndLabel> listView=new ListView<LinkAndLabel>(ID_ADDITIONAL_LINK_ITEM,linkAndLabels){
    private static final long serialVersionUID=1L;
    @Override protected void populateItem(    ListItem<LinkAndLabel> item){
      final LinkAndLabel linkAndLabel=item.getModelObject();
      final AbstractLink link=linkAndLabel.getLink();
      final String itemTitle=first(linkAndLabel.getDisabledReasonIfAny(),linkAndLabel.getDescriptionIfAny());
      if (itemTitle != null) {
        item.add(new AttributeAppender("title",itemTitle));
      }
      final Label viewTitleLabel=new Label(ID_ADDITIONAL_LINK_TITLE,linkAndLabel.getLabel());
      if (linkAndLabel.isBlobOrClob()) {
        link.add(new CssClassAppender("noVeil"));
      }
      if (linkAndLabel.isPrototype()) {
        link.add(new CssClassAppender("prototype"));
      }
      link.add(new CssClassAppender(linkAndLabel.getActionIdentifier()));
      SemanticsOf semantics=linkAndLabel.getSemantics();
      if (semantics.isAreYouSure() && linkAndLabel.getParameters().isNoParameters()) {
        ConfirmationConfig confirmationConfig=new ConfirmationConfig();
        final TranslationService translationService=getPersistenceSession().getServicesInjector().lookupService(TranslationService.class);
        final String areYouSure=translationService.translate(IsisSystem.class.getName(),IsisSystem.MSG_ARE_YOU_SURE);
        final String confirm=translationService.translate(IsisSystem.class.getName(),IsisSystem.MSG_CONFIRM);
        final String cancel=translationService.translate(IsisSystem.class.getName(),IsisSystem.MSG_CANCEL);
        confirmationConfig.withTitle(areYouSure);
        confirmationConfig.withBtnOkLabel(confirm);
        confirmationConfig.withBtnCancelLabel(cancel);
        confirmationConfig.withBtnOkClass("btn btn-danger");
        confirmationConfig.withBtnCancelClass("btn btn-default");
        link.add(new ConfirmationBehavior(confirmationConfig));
      }
      final String cssClass=linkAndLabel.getCssClass();
      CssClassAppender.appendCssClassTo(link,cssClass);
      viewTitleLabel.add(new CssClassAppender(StringExtensions.asLowerDashed(linkAndLabel.getLabel())));
      link.addOrReplace(viewTitleLabel);
      final String cssClassFa=linkAndLabel.getCssClassFa();
      if (!Strings.isNullOrEmpty(cssClassFa)) {
        final CssClassFaPosition position=linkAndLabel.getCssClassFaPosition();
        viewTitleLabel.add(new CssClassFaBehavior(cssClassFa,position));
      }
      item.addOrReplace(link);
    }
  }
;
  container.addOrReplace(listView);
}
