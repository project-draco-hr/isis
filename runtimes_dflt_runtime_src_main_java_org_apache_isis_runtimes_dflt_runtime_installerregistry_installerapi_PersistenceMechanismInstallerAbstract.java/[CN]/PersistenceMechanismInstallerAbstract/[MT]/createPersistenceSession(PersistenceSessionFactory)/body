{
  if (LOG.isInfoEnabled()) {
    LOG.info("installing " + this.getClass().getName());
  }
  final AdapterManagerExtended adapterManager=createAdapterManager(getConfiguration());
  final ObjectAdapterFactory adapterFactory=createAdapterFactory(getConfiguration());
  final ObjectFactory objectFactory=createObjectFactory(getConfiguration());
  final OidGenerator oidGenerator=createOidGenerator(getConfiguration());
  final RuntimeContext runtimeContext=createRuntimeContext(getConfiguration());
  final DomainObjectContainer container=createContainer(getConfiguration());
  final ServicesInjector servicesInjector=createServicesInjector(getConfiguration());
  final List<Object> serviceList=persistenceSessionFactory.getServices();
  ensureThatArg(adapterManager,is(not(nullValue())));
  ensureThatArg(adapterFactory,is(not(nullValue())));
  ensureThatArg(objectFactory,is(not(nullValue())));
  ensureThatArg(oidGenerator,is(not(nullValue())));
  ensureThatArg(runtimeContext,is(not(nullValue())));
  ensureThatArg(container,is(not(nullValue())));
  ensureThatArg(serviceList,is(not(nullValue())));
  ensureThatArg(servicesInjector,is(not(nullValue())));
  runtimeContext.injectInto(container);
  runtimeContext.setContainer(container);
  servicesInjector.setContainer(container);
  servicesInjector.setServices(serviceList);
  persistenceSessionFactory.getSpecificationLoader().injectInto(runtimeContext);
  PersistenceSession persistenceSession=createPersistenceSession(persistenceSessionFactory,adapterManager,adapterFactory,objectFactory,oidGenerator,servicesInjector);
  if (getConfiguration().getBoolean(LOGGING_PROPERTY,false)) {
    String level=getConfiguration().getString(LOGGING_PROPERTY + ".level","info");
    persistenceSession=new PersistenceSessionLogger(persistenceSession,level);
  }
  return persistenceSession;
}
