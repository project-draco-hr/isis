{
  final Method actionMethod=processMethodContext.getMethod();
  try {
    final Class<?> returnType=actionMethod.getReturnType();
    final ObjectSpecification returnSpec=getSpecificationLoader().loadSpecification(returnType);
    if (returnSpec == null) {
      return;
    }
    final Class<?> cls=processMethodContext.getCls();
    final ObjectSpecification typeSpec=getSpecificationLoader().loadSpecification(cls);
    final FacetHolder holder=processMethodContext.getFacetHolder();
    final InteractionWithAction interactionWithAction=Annotations.getAnnotation(actionMethod,InteractionWithAction.class);
    final PostsActionInvokedEvent postsActionInvokedEvent=Annotations.getAnnotation(actionMethod,PostsActionInvokedEvent.class);
    if (interactionWithAction != null) {
      Class<? extends ActionInteractionEvent<?>> eventType=interactionWithAction.value();
      FacetUtil.addFacet(new InteractionWithActionFacetAnnotation(actionMethod,typeSpec,returnSpec,holder,getRuntimeContext(),getAdapterManager(),getServicesInjector(),eventType));
    }
 else     if (postsActionInvokedEvent != null) {
      Class<? extends ActionInteractionEvent<?>> eventType=postsActionInvokedEvent.value();
      FacetUtil.addFacet(new InteractionWithActionFacetPostsActionInvokedEventAnnotation(actionMethod,typeSpec,returnSpec,holder,getRuntimeContext(),getAdapterManager(),getServicesInjector(),eventType));
    }
 else {
      Class<? extends ActionInteractionEvent<?>> eventType=ActionInteractionEvent.Default.class;
      FacetUtil.addFacet(new InteractionWithActionFacetDefault(actionMethod,typeSpec,returnSpec,holder,getRuntimeContext(),getAdapterManager(),getServicesInjector(),eventType));
    }
  }
  finally {
    processMethodContext.removeMethod(actionMethod);
  }
}
