{
  IsisContext.testReset();
  servicesList=Collections.emptyList();
  mockTemplateImageLoader=mockery.mock(TemplateImageLoader.class);
  mockPersistenceSessionFactory=mockery.mock(PersistenceSessionFactory.class);
  mockUserProfileLoader=mockery.mock(UserProfileLoader.class);
  mockAuthenticationManager=mockery.mock(AuthenticationManager.class);
  mockAuthorizationManager=mockery.mock(AuthorizationManager.class);
  configuration=new IsisConfigurationDefault();
  reflector=new TestProxyReflector();
  persistenceSession=new TestProxyPersistenceSession(mockPersistenceSessionFactory);
  mockery.checking(new Expectations(){
{
      one(mockPersistenceSessionFactory).createPersistenceSession();
      will(returnValue(persistenceSession));
      ignoring(mockPersistenceSessionFactory);
      one(mockUserProfileLoader).getProfile(with(any(AuthenticationSession.class)));
      will(returnValue(new UserProfile()));
      ignoring(mockUserProfileLoader);
      ignoring(mockAuthenticationManager);
      ignoring(mockAuthorizationManager);
      ignoring(mockTemplateImageLoader);
    }
  }
);
  reflector.setRuntimeContext(new RuntimeContextFromSession());
  IsisContext.setConfiguration(configuration);
  final IsisSessionFactory sessionFactory=new IsisSessionFactoryDefault(DeploymentType.EXPLORATION,configuration,mockTemplateImageLoader,reflector,mockAuthenticationManager,mockAuthorizationManager,mockUserProfileLoader,mockPersistenceSessionFactory,servicesList);
  IsisContextStatic.createRelaxedInstance(sessionFactory);
  sessionFactory.init();
  session=new TestProxySession();
  IsisContext.openSession(session);
}
