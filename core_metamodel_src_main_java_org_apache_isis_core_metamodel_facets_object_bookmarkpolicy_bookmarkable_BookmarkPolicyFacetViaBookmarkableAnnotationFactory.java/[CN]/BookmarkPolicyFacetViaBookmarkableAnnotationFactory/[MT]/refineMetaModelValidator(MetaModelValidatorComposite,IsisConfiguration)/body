{
  metaModelValidator.add(new MetaModelValidatorVisiting(new MetaModelValidatorVisiting.Visitor(){
    @Override public boolean visit(    ObjectSpecification objectSpec,    ValidationFailures validationFailures){
      final Class<?> cls=objectSpec.getCorrespondingClass();
      final List<ObjectAction> objectActions=objectSpec.getObjectActions(Contributed.EXCLUDED);
      for (      final ObjectAction objectAction : objectActions) {
        final BookmarkPolicyFacet bookmarkFacet=objectAction.getFacet(BookmarkPolicyFacet.class);
        if (bookmarkFacet == null || bookmarkFacet.isNoop() || bookmarkFacet.value() == BookmarkPolicy.NEVER) {
          continue;
        }
        final ActionSemanticsFacet semanticsFacet=objectAction.getFacet(ActionSemanticsFacet.class);
        if (semanticsFacet == null || semanticsFacet.isNoop() || !semanticsFacet.value().isSafeInNature()) {
          validationFailures.add("%s: action is bookmarkable but action semantics are not explicitly indicated as being safe.  " + "Either add @Action(semantics=SemanticsOf.SAFE) or @Action(semantics=SemanticsOf.SAFE_AND_REQUEST_CACHEABLE), or remove @ActionLayout(bookmarking=...).",objectAction.getIdentifier().toClassAndNameIdentityString());
        }
      }
      return true;
    }
  }
));
  metaModelValidator.add(validator);
}
