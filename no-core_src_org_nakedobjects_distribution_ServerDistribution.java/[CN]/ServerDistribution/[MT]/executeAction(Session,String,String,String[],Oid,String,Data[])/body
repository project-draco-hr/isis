{
  NakedObject object=getNakedObject(session,objectOid,objectType);
  NakedObjectSpecification[] parameterSpecifiactions=new NakedObjectSpecification[parameterTypes.length];
  for (int i=0; i < parameterSpecifiactions.length; i++) {
    parameterSpecifiactions[i]=getSpecification(parameterTypes[i]);
  }
  Type type=Action.getType(actionType);
  Action action=(Action)object.getSpecification().getObjectAction(type,actionIdentifier,parameterSpecifiactions);
  Hint about=getActionHint(session,actionType,actionIdentifier,parameterTypes,objectOid,objectType,parameterData);
  if (about.canAccess().isVetoed() || about.canUse().isVetoed()) {
    throw new NakedObjectRuntimeException();
  }
  Naked[] parameters=new Naked[parameterData.length];
  for (int i=0; i < parameters.length; i++) {
    Data data=parameterData[i];
    if (data == null) {
      continue;
    }
    if (data instanceof ObjectData) {
      ObjectData objectData=(ObjectData)data;
      if (objectData.getOid() != null) {
        parameters[i]=getNakedObject(session,objectData.getOid(),objectData.getType());
        Assert.assertEquals(parameters[i],NakedObjects.getPojoAdapterFactory().createAdapter(parameters[i].getObject()));
      }
 else {
        parameters[i]=DataHelper.recreate(data);
      }
    }
 else     if (data instanceof ValueData) {
      ValueData valueData=(ValueData)data;
      parameters[i]=NakedObjects.getPojoAdapterFactory().createAdapter(valueData.getValue());
    }
 else {
      throw new NakedObjectRuntimeException();
    }
  }
  ((LocalObjectManager)objectManager()).tempResetDirty();
  try {
    NakedObject result=(NakedObject)object.execute(action,parameters);
    return objectDataFactory.createObjectData(result,OBJECT_DATA_DEPTH);
  }
 catch (  RuntimeException e) {
    LOG.error(e.getMessage(),e);
    String exceptionType=e.getClass().getName();
    String message=e.getMessage();
    String trace;
    try {
      ByteArrayOutputStream baos=new ByteArrayOutputStream();
      e.printStackTrace(new PrintStream(baos));
      trace=baos.toString();
      baos.close();
    }
 catch (    IOException ex) {
      LOG.error(ex);
      trace="failed to get trace - see log";
    }
    return objectDataFactory.createExceptionData(exceptionType,message,trace);
  }
}
