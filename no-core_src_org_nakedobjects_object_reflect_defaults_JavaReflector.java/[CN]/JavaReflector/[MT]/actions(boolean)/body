{
  LOG.debug("looking for action methods");
  Method defaultAboutMethod=findMethod(forClass,"aboutActionDefault",null,new Class[]{ActionAbout.class});
  LOG.debug(defaultAboutMethod == null ? "no default about method for actions" : defaultAboutMethod.toString());
  Vector validMethods=new Vector();
  Vector actions=new Vector();
  for (int i=0; i < methods.length; i++) {
    if (methods[i] == null) {
      continue;
    }
    Method method=methods[i];
    if (Modifier.isStatic(method.getModifiers()) != forClass) {
      continue;
    }
    String[] prefixes={"action","explorationAction","debugAction"};
    int prefix=-1;
    for (int j=0; j < prefixes.length; j++) {
      if (method.getName().startsWith(prefixes[j])) {
        prefix=j;
        break;
      }
    }
    Class returnType=method.getReturnType();
    boolean returnIsValid=returnType == void.class || NakedObject.class.isAssignableFrom(returnType);
    if (prefix >= 0 && returnIsValid) {
      validMethods.addElement(method);
      LOG.debug("identified action " + method);
      Class[] params=method.getParameterTypes();
      String methodName=method.getName();
      methods[i]=null;
      String name=methodName.substring(prefixes[prefix].length());
      Class[] longParams=new Class[params.length + 1];
      longParams[0]=ActionAbout.class;
      System.arraycopy(params,0,longParams,1,params.length);
      Method aboutMethod=findMethod(forClass,"aboutAction" + name,null,longParams);
      if (aboutMethod == null) {
        aboutMethod=defaultAboutMethod;
      }
 else {
        LOG.debug("  with about method " + aboutMethod);
      }
      ActionSpecification.Type action;
      action=new ActionSpecification.Type[]{ActionSpecification.USER,ActionSpecification.EXPLORATION,ActionSpecification.DEBUG}[prefix];
      Action local=new JavaAction(naturalName(name),action,method,aboutMethod);
      actions.addElement(local);
    }
  }
  return convertToArray(actions);
}
