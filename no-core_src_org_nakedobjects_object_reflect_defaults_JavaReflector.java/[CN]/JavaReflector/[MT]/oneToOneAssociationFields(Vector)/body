{
  Vector v=findPrefixedMethods(OBJECT,GET_PREFIX,NakedObject.class,0);
  Enumeration e=v.elements();
  while (e.hasMoreElements()) {
    Method getMethod=(Method)e.nextElement();
    LOG.debug("identified 1-1 association method " + getMethod);
    if (getMethod.getName().equals("getNakedClass")) {
      continue;
    }
    String name=javaBaseName(getMethod.getName());
    Class[] params=new Class[]{getMethod.getReturnType()};
    Method aboutMethod=findMethod(OBJECT,ABOUT_PREFIX + name,null,new Class[]{FieldAbout.class,getMethod.getReturnType()});
    if (aboutMethod == null) {
      aboutMethod=defaultAboutFieldMethod;
    }
    Method addMethod=findMethod(OBJECT,"associate" + name,void.class,params);
    if (addMethod == null) {
      addMethod=findMethod(OBJECT,"add" + name,void.class,params);
    }
    Method removeMethod=findMethod(OBJECT,"dissociate" + name,void.class,null);
    if (removeMethod == null) {
      removeMethod=findMethod(OBJECT,"remove" + name,void.class,null);
    }
    Method setMethod=findMethod(OBJECT,SET_PREFIX + name,void.class,params);
    if (setMethod == null) {
      setMethod=findMethod(OBJECT,"set_" + name,void.class,params);
    }
    if (setMethod == null) {
      throw new ReflectionException("A set" + name + " method is required in the class "+ className()+ " that corresponds to the "+ getMethod.getName()+ " method.");
    }
    JavaOneToOneAssociation association=new JavaOneToOneAssociation(name,getMethod.getReturnType(),getMethod,setMethod,addMethod,removeMethod,aboutMethod);
    associations.addElement(association);
  }
}
