{
  int first;
  int last;
  boolean sawContent;
  char c;
  for (first=last=start, sawContent=false; ; last++) {
    if (last >= finish) {
      if (last > first) {
        validator.text();
        contentHandler.characters(buf,first,last - first);
        sawContent=true;
        start=last;
      }
      if (isEOF())       return sawContent;
      first=start;
      last=first - 1;
      continue;
    }
    c=buf[last];
    if ((c > 0x005D && c <= 0xD7FF) || (c < 0x0026 && c >= 0x0020) || (c > 0x003C && c < 0x005D)|| (c > 0x0026 && c < 0x003C)|| c == 0x0009 || (c >= 0xE000 && c <= 0xFFFD))     continue;
    if (c == '<' || c == '&')     break;
    if (c == '\n') {
      if (!isInternal())       lineNumber++;
      continue;
    }
    if (c == '\r') {
      if (isInternal())       continue;
      contentHandler.characters(buf,first,last - first);
      contentHandler.characters(newline,0,1);
      sawContent=true;
      lineNumber++;
      if (finish > (last + 1)) {
        if (buf[last + 1] == '\n')         last++;
      }
 else {
      }
      first=start=last + 1;
      continue;
    }
    if (c == ']') {
switch (finish - last) {
case 2:
        if (buf[last + 1] != ']')         continue;
case 1:
      if (reader == null || isClosed)       continue;
    if (last == first)     throw new InternalError("fillbuf");
  last--;
if (last > first) {
  validator.text();
  contentHandler.characters(buf,first,last - first);
  sawContent=true;
  start=last;
}
fillbuf();
first=last=start;
continue;
default :
if (buf[last + 1] == ']' && buf[last + 2] == '>') fatal("P-072",null);
continue;
}
}
if (c >= 0xd800 && c <= 0xdfff) {
if ((last + 1) >= finish) {
if (last > first) {
validator.text();
contentHandler.characters(buf,first,last - first);
sawContent=true;
start=last + 1;
}
if (isEOF()) {
fatal("P-081",new Object[]{Integer.toHexString(c)});
}
first=start;
last=first;
continue;
}
if (checkSurrogatePair(last)) last++;
 else {
last--;
break;
}
continue;
}
fatal("P-071",new Object[]{Integer.toHexString(c)});
}
if (last == first) return sawContent;
validator.text();
contentHandler.characters(buf,first,last - first);
start=last;
return true;
}
