{
  SqlIntegrationTestSingleton.drop(getPersonTableName());
  SqlIntegrationTestSingleton.drop(getSimpleClassTableName());
  SqlIntegrationTestSingleton.drop(getSimpleClassTwoTableName());
  final SqlDataClassFactory factory=SqlIntegrationTestSingleton.getSqlDataClassFactory();
  final SqlDataClass sqlDataClass=factory.newDataClass();
  sqlDataClass.setString("Test String");
  sqlDataClass.setDate(applibDate);
  sqlDataClass.setSqlDate(sqlDate);
  sqlDataClass.setMoney(money);
  sqlDataClass.setDateTime(dateTime);
  sqlDataClass.setTimeStamp(timeStamp);
  sqlDataClass.setTime(time);
  sqlDataClass.setColor(color);
  sqlDataClass.setImage(image);
  sqlDataClass.setPassword(password);
  sqlDataClass.setPercentage(percentage);
  simpleClassTwoA=factory.newSimpleClassTwo();
  simpleClassTwoA.setText("A");
  simpleClassTwoA.setIntValue(999);
  simpleClassTwoA.setBooleanValue(true);
  sqlDataClass.setSimpleClassTwo(simpleClassTwoA);
  numericTestClassMin=factory.newNumericTestClass();
  LOG.log(Level.INFO,"Bits to represent Double: " + Double.SIZE);
  numericTestClassMin.setIntValue(intMinValue);
  numericTestClassMin.setShortValue(shortMinValue);
  numericTestClassMin.setLongValue(longMinValue);
  numericTestClassMin.setDoubleValue(doubleMinValue);
  numericTestClassMin.setFloatValue(floatMinValue);
  sqlDataClass.setNumericTestClassMin(numericTestClassMin);
  numericTestClassMax=factory.newNumericTestClass();
  numericTestClassMax.setIntValue(intMaxValue);
  numericTestClassMax.setShortValue(shortMaxValue);
  numericTestClassMax.setLongValue(longMaxValue);
  numericTestClassMax.setDoubleValue(doubleMaxValue);
  numericTestClassMax.setFloatValue(floatMaxValue);
  sqlDataClass.setNumericTestClassMax(numericTestClassMax);
  boolean bMustAdd=false;
  if (simpleClassList1.size() == 0) {
    bMustAdd=true;
  }
  for (  final String string : SqlIntegrationTestCommon.stringList1) {
    final SimpleClass simpleClass=factory.newSimpleClass();
    simpleClass.setString(string);
    simpleClass.setSimpleClassTwoA(simpleClassTwoA);
    sqlDataClass.addToSimpleClasses1(simpleClass);
    if (bMustAdd) {
      simpleClassList1.add(simpleClass);
    }
  }
  for (  final String string : SqlIntegrationTestCommon.stringList2) {
    final SimpleClass simpleClass=factory.newSimpleClass();
    simpleClass.setString(string);
    simpleClass.setSimpleClassTwoA(simpleClassTwoA);
    sqlDataClass.addToSimpleClasses2(simpleClass);
    if (bMustAdd) {
      simpleClassList2.add(simpleClass);
    }
  }
  factory.save(sqlDataClass);
  if (getProperties().getProperty("isis.persistor") == "in-memory") {
    getSingletonInstance().setState(1);
  }
}
