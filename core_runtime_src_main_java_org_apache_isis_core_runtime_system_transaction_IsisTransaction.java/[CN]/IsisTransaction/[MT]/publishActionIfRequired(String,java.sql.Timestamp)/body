{
  if (publishingService == null) {
    return;
  }
  try {
    final CurrentInvocation currentInvocation=ActionInvocationFacet.currentInvocation.get();
    if (currentInvocation == null) {
      return;
    }
    IdentifiedHolder action=currentInvocation.getAction();
    final PublishedActionFacet publishedActionFacet=action.getFacet(PublishedActionFacet.class);
    if (publishedActionFacet == null) {
      return;
    }
    final PublishedAction.PayloadFactory payloadFactory=publishedActionFacet.value();
    final RootOid adapterOid=(RootOid)currentInvocation.getTarget().getOid();
    final String oidStr=getOidMarshaller().marshal(adapterOid);
    final Identifier actionIdentifier=action.getIdentifier();
    final String title=oidStr + ": " + actionIdentifier.toNameParmsIdentityString();
    final Command command=currentInvocation.getCommand();
    final String targetClass=command.getTargetClass();
    final String targetAction=command.getTargetAction();
    final Bookmark target=command.getTarget();
    final String memberIdentifier=command.getMemberIdentifier();
    final List<String> parameterNames;
    final List<Class<?>> parameterTypes;
    final Class<?> returnType;
    if (action instanceof FacetedMethod) {
      final FacetedMethod facetedMethod=(FacetedMethod)action;
      returnType=facetedMethod.getType();
      final List<FacetedMethodParameter> parameters=facetedMethod.getParameters();
      parameterNames=immutableList(Iterables.transform(parameters,FacetedMethodParameter.Functions.GET_NAME));
      parameterTypes=immutableList(Iterables.transform(parameters,FacetedMethodParameter.Functions.GET_TYPE));
    }
 else {
      parameterNames=null;
      parameterTypes=null;
      returnType=null;
    }
    final EventMetadata metadata=newEventMetadata(EventType.ACTION_INVOCATION,currentUser,timestamp,title,targetClass,targetAction,target,memberIdentifier,parameterNames,parameterTypes,returnType);
    publishingService.publishAction(payloadFactory,metadata,currentInvocation,objectStringifier());
  }
  finally {
    ActionInvocationFacet.currentInvocation.set(null);
  }
}
