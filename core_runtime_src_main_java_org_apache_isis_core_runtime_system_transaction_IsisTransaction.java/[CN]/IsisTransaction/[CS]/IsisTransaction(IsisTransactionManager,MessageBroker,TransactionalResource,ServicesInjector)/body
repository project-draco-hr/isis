{
  ensureThatArg(transactionManager,is(not(nullValue())),"transaction manager is required");
  ensureThatArg(messageBroker,is(not(nullValue())),"message broker is required");
  ensureThatArg(servicesInjector,is(not(nullValue())),"services injector is required");
  this.transactionManager=transactionManager;
  this.messageBroker=messageBroker;
  this.servicesInjector=servicesInjector;
  this.commandContext=servicesInjector.lookupService(CommandContext.class);
  this.auditingService3=servicesInjector.lookupService(AuditingService3.class);
  this.publishingService=getPublishingServiceIfAny(servicesInjector);
  UUID previousTransactionId=null;
  if (commandContext != null) {
    command=commandContext.getCommand();
    previousTransactionId=command.getTransactionId();
  }
 else {
    command=null;
  }
  if (previousTransactionId != null) {
    this.transactionId=previousTransactionId;
  }
 else {
    this.transactionId=UUID.randomUUID();
  }
  this.state=State.IN_PROGRESS;
  this.objectStore=objectStore;
  if (LOG.isDebugEnabled()) {
    LOG.debug("new transaction " + this);
  }
}
