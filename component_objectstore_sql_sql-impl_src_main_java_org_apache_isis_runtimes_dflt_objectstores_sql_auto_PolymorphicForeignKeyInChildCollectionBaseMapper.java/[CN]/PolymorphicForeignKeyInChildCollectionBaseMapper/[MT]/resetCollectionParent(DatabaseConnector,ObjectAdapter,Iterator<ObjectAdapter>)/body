{
  LOG.debug("Saving polymorphic list");
  ObjectSpecification elementSpecification;
  while (elements.hasNext()) {
    final ObjectAdapter thisAdapter=elements.next();
    elementSpecification=thisAdapter.getSpecification();
    final StringBuffer update=new StringBuffer();
    update.append("INSERT INTO ");
    update.append(table);
    update.append(" (");
    super.getIdMapping().appendColumnNames(update);
    update.append("," + getForeignKeyName());
    update.append(", " + itemIdColumnName);
    update.append("," + classColumnName);
    update.append(") VALUES (");
    final Object pojo=thisAdapter.getObject();
    final RootOid transientRootOid=oidGenerator.createTransientOid(pojo);
    final RootOid persistentRootOid=oidGenerator.createPersistent(pojo,transientRootOid);
    polyIdMapper.appendObjectId(connector,update,persistentRootOid);
    update.append(",");
    getForeignKeyMapping().appendInsertValues(connector,update,parent);
    update.append(",");
    final RootOid oid=(RootOid)thisAdapter.getOid();
    getIdMapping().appendObjectId(connector,update,oid);
    update.append(",?)");
    connector.addToQueryValues(elementSpecification.getFullIdentifier());
    connector.insert(update.toString());
  }
}
