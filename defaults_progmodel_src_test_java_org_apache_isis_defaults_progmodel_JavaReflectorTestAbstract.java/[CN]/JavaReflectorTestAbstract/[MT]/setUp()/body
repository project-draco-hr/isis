{
  Logger.getRootLogger().setLevel(Level.OFF);
  IsisConfigurationDefault configuration=new IsisConfigurationDefault();
  mockTemplateImageLoader=mockery.mock(TemplateImageLoader.class);
  mockPersistenceSessionFactory=mockery.mock(PersistenceSessionFactory.class);
  mockUserProfileLoader=mockery.mock(UserProfileLoader.class);
  mockAuthenticationManager=mockery.mock(AuthenticationManager.class);
  mockAuthorizationManager=mockery.mock(AuthorizationManager.class);
  servicesList=Collections.emptyList();
  mockery.checking(new Expectations(){
{
      ignoring(mockTemplateImageLoader);
      ignoring(mockPersistenceSessionFactory);
      ignoring(mockUserProfileLoader);
      ignoring(mockAuthenticationManager);
      ignoring(mockAuthorizationManager);
    }
  }
);
  final ObjectReflectorDefault reflector=new ObjectReflectorDefault(configuration,new TestClassSubstitutor(),new CollectionTypeRegistryDefault(),new SpecificationTraverserDefault(),new MemberLayoutArrangerDefault(),new ProgrammingModelFacetsJava5(),new HashSet<FacetDecorator>(),new MetaModelValidatorNoop());
  reflector.setRuntimeContext(new RuntimeContextFromSession());
  reflector.init();
  IsisSessionFactory executionContextFactory=new IsisSessionFactoryDefault(DeploymentType.EXPLORATION,configuration,mockTemplateImageLoader,reflector,mockAuthenticationManager,mockAuthorizationManager,mockUserProfileLoader,mockPersistenceSessionFactory,servicesList);
  IsisContextStatic.createRelaxedInstance(executionContextFactory);
  IsisContextStatic.getInstance().getSessionInstance();
  specification=loadSpecification(reflector);
}
