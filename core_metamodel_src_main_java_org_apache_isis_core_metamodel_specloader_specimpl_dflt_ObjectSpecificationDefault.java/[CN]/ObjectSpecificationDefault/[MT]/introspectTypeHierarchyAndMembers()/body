{
  Properties properties=null;
  if (isNotIntrospected()) {
    properties=facetedMethodsBuilder.introspectClass();
  }
  if (isNotIntrospected()) {
    addNamedFacetAndPluralFacetIfRequired();
  }
  if (this.containsFacet(ValueFacet.class)) {
    if (LOG.isDebugEnabled()) {
      LOG.debug("skipping full introspection for value type " + getFullIdentifier());
    }
    return;
  }
  if (isNotIntrospected()) {
    final Class<?> superclass=getCorrespondingClass().getSuperclass();
    updateSuperclass(superclass);
  }
  final Class<?>[] interfaceTypes=getCorrespondingClass().getInterfaces();
  final List<ObjectSpecification> interfaceSpecList=Lists.newArrayList();
  for (  final Class<?> interfaceType : interfaceTypes) {
    final Class<?> substitutedInterfaceType=getClassSubstitutor().getClass(interfaceType);
    if (substitutedInterfaceType != null) {
      final ObjectSpecification interfaceSpec=getSpecificationLookup().loadSpecification(substitutedInterfaceType);
      interfaceSpecList.add(interfaceSpec);
    }
  }
  if (isNotIntrospected()) {
    updateAsSubclassTo(interfaceSpecList);
  }
  if (isNotIntrospected()) {
    updateInterfaces(interfaceSpecList);
  }
  final List<FacetedMethod> associationFacetedMethods=facetedMethodsBuilder.getAssociationFacetedMethods(properties);
  final List<FacetedMethod> actionFacetedMethods=facetedMethodsBuilder.getActionFacetedMethods(properties);
  if (isNotIntrospected()) {
    final DeweyOrderSet orderSet=DeweyOrderSet.createOrderSet(associationFacetedMethods);
    final MemberGroupLayoutFacet memberGroupLayoutFacet=this.getFacet(MemberGroupLayoutFacet.class);
    if (memberGroupLayoutFacet != null) {
      final List<String> groupOrder=Lists.newArrayList();
      groupOrder.addAll(memberGroupLayoutFacet.getLeft());
      groupOrder.addAll(memberGroupLayoutFacet.getMiddle());
      groupOrder.addAll(memberGroupLayoutFacet.getRight());
      orderSet.reorderChildren(groupOrder);
    }
    final List<ObjectAssociation> associations=Lists.newArrayList();
    convertToAssociations(orderSet,associations);
    updateAssociations(associations);
  }
  if (isNotIntrospected()) {
    final DeweyOrderSet orderSet=DeweyOrderSet.createOrderSet(actionFacetedMethods);
    final List<ObjectAction> actions=Lists.newArrayList();
    convertToObjectActions(orderSet,actions);
    updateObjectActions(actions);
  }
  if (isNotIntrospected()) {
    facetedMethodsBuilder.introspectClassPostProcessing(properties);
  }
  if (isNotIntrospected()) {
    updateFromFacetValues();
  }
}
