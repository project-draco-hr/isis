{
  metadataProperties=null;
  if (isNotIntrospected()) {
    metadataProperties=facetedMethodsBuilder.introspectClass();
  }
  if (isNotIntrospected()) {
    addNamedFacetAndPluralFacetIfRequired();
  }
  if (this.containsFacet(ValueFacet.class)) {
    if (LOG.isDebugEnabled()) {
      LOG.debug("skipping full introspection for value type " + getFullIdentifier());
    }
    return;
  }
  if (isNotIntrospected()) {
    final Class<?> superclass=getCorrespondingClass().getSuperclass();
    updateSuperclass(superclass);
  }
  final Class<?>[] interfaceTypes=getCorrespondingClass().getInterfaces();
  final List<ObjectSpecification> interfaceSpecList=Lists.newArrayList();
  for (  final Class<?> interfaceType : interfaceTypes) {
    final Class<?> substitutedInterfaceType=getClassSubstitutor().getClass(interfaceType);
    if (substitutedInterfaceType != null) {
      final ObjectSpecification interfaceSpec=getSpecificationLookup().loadSpecification(substitutedInterfaceType);
      interfaceSpecList.add(interfaceSpec);
    }
  }
  if (isNotIntrospected()) {
    updateAsSubclassTo(interfaceSpecList);
  }
  if (isNotIntrospected()) {
    updateInterfaces(interfaceSpecList);
  }
  if (isNotIntrospected()) {
    final List<ObjectAssociation> associations=createAssociations(metadataProperties);
    sortAndUpdateAssociations(associations);
  }
  if (isNotIntrospected()) {
    final List<ObjectAction> actions=createActions(metadataProperties);
    sortCacheAndUpdateActions(actions);
  }
  if (isNotIntrospected()) {
    facetedMethodsBuilder.introspectClassPostProcessing(metadataProperties);
  }
  if (isNotIntrospected()) {
    updateFromFacetValues();
  }
}
