{
  final LinkedFieldsBlock tag=new LinkedFieldsBlock();
  if (object != null) {
    final String id=request.getOptionalProperty(ID,object.getSpecification().getShortIdentifier());
    final String cls=request.getOptionalProperty(CLASS,"form");
    final String classString=" id=\"" + id + "\" class=\""+ cls+ "\"";
    String title=request.getOptionalProperty(FORM_TITLE);
    final String oddRowClass=request.getOptionalProperty(ODD_ROW_CLASS);
    final String evenRowClass=request.getOptionalProperty(EVEN_ROW_CLASS);
    final boolean showIcons=request.isRequested(SHOW_ICON,showIconByDefault());
    request.setBlockContent(tag);
    request.processUtilCloseTag();
    final AuthenticationSession session=IsisContext.getAuthenticationSession();
    List<ObjectAssociation> associations=object.getSpecification().getAssociations(ObjectAssociationFilters.dynamicallyVisible(session,object));
    final List<ObjectAssociation> fields=tag.includedFields(associations);
    final LinkedObject[] linkFields=tag.linkedFields(fields);
    String linkAllView=request.getOptionalProperty(LINK_VIEW);
    if (linkAllView != null) {
      linkAllView=request.getContext().fullUriPath(linkAllView);
      for (int i=0; i < linkFields.length; i++) {
        final boolean isObject=fields.get(i).isOneToOneAssociation();
        final boolean isNotParseable=!fields.get(i).getSpecification().containsFacet(ParseableFacet.class);
        linkFields[i]=isObject && isNotParseable ? new LinkedObject(linkAllView) : null;
      }
    }
    if (title == null) {
      title=object.getSpecification().getSingularName();
    }
 else     if (title.equals("")) {
      title=null;
    }
    write(request,object,fields,linkFields,classString,title,oddRowClass,evenRowClass,showIcons);
  }
 else {
    request.skipUntilClose();
  }
}
