{
  super.setUp();
  programmableReflector=new ProgrammableReflector();
  facetHolder=new IdentifiedHolderImpl(Identifier.propertyOrCollectionIdentifier(Customer.class,"firstName"));
  facetedMethod=FacetedMethod.createForProperty(Customer.class,"firstName");
  facetedMethodParameter=new FacetedMethodParameter(facetedMethod.getOwningType(),facetedMethod.getMethod(),String.class);
  methodRemover=new ProgrammableMethodRemover();
  mockDeploymentCategoryProvider=context.mock(DeploymentCategoryProvider.class);
  mockAuthenticationSessionProvider=context.mock(AuthenticationSessionProvider.class);
  mockServicesInjector=context.mock(ServicesInjector.class);
  mockTranslationService=context.mock(TranslationService.class);
  stubConfiguration=new IsisConfigurationDefault();
  mockAuthenticationSession=context.mock(AuthenticationSession.class);
  context.checking(new Expectations(){
{
      allowing(mockServicesInjector).lookupService(TranslationService.class);
      will(returnValue(mockTranslationService));
      allowing(mockServicesInjector).lookupService(ConfigurationServiceInternal.class);
      will(returnValue(stubConfiguration));
      allowing(mockServicesInjector).lookupService(AuthenticationSessionProvider.class);
      will(returnValue(mockAuthenticationSessionProvider));
      allowing(mockServicesInjector).lookupService(DeploymentCategoryProvider.class);
      will(returnValue(mockDeploymentCategoryProvider));
      allowing(mockDeploymentCategoryProvider).getDeploymentCategory();
      will(returnValue(DeploymentCategory.PRODUCTION));
      allowing(mockAuthenticationSessionProvider).getAuthenticationSession();
      will(returnValue(mockAuthenticationSession));
    }
  }
);
}
