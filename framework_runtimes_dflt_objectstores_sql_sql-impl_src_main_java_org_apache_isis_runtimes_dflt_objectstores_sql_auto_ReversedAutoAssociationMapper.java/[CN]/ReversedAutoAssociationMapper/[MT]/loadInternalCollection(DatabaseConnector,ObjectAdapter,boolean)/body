{
  final ObjectAdapter collectionAdapter=field.get(parentAdapter);
  if (!collectionAdapter.canTransitionToResolving()) {
    return;
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug("loading internal collection " + field);
  }
  final StringBuffer sql=new StringBuffer();
  sql.append("select ");
  idMapping.appendColumnNames(sql);
  sql.append(", ");
  sql.append(columnList(fieldMappingByField));
  sql.append(" from ");
  sql.append(table);
  sql.append(" where ");
  idMapping.appendUpdateValues(connector,sql,parentAdapter);
  final Results rs=connector.select(sql.toString());
  final List<ObjectAdapter> list=new ArrayList<ObjectAdapter>();
  while (rs.next()) {
    final Oid oid=idMapping.recreateOid(rs,specification);
    final ObjectAdapter element=getAdapter(specification,oid);
    loadFields(element,rs,makeResolved);
    if (LOG.isDebugEnabled()) {
      LOG.debug("  element  " + element.getOid());
    }
    list.add(element);
  }
  final CollectionFacet collectionFacet=collectionAdapter.getSpecification().getFacet(CollectionFacet.class);
  collectionFacet.init(collectionAdapter,list.toArray(new ObjectAdapter[list.size()]));
  rs.close();
  PersistorUtil.endStateTransition(collectionAdapter);
}
