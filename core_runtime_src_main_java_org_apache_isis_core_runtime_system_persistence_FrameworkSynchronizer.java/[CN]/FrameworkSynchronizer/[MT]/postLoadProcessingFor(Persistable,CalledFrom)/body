{
  withLogging(pojo,new Runnable(){
    @Override public void run(){
      final Persistable pc=pojo;
      servicesInjector.injectServicesInto(pojo);
      final Version datastoreVersion=getVersionIfAny(pc);
      final RootOid originalOid;
      ObjectAdapter adapter=persistenceSession.getAdapterFor(pojo);
      if (adapter != null) {
        ensureRootObject(pojo);
        originalOid=(RootOid)adapter.getOid();
        final Version originalVersion=adapter.getVersion();
        persistenceSession.remapRecreatedPojo(adapter,pojo);
        final RootOid thisOid=originalOid;
        final Version thisVersion=originalVersion;
        final Version otherVersion=datastoreVersion;
        if (thisVersion != null && otherVersion != null && thisVersion.different(otherVersion)) {
          if (ConcurrencyChecking.isCurrentlyEnabled()) {
            LOG.info("concurrency conflict detected on " + thisOid + " ("+ otherVersion+ ")");
            final String currentUser=getAuthenticationSession().getUserName();
            final ConcurrencyException abortCause=new ConcurrencyException(currentUser,thisOid,thisVersion,otherVersion);
            getCurrentTransaction().setAbortCause(abortCause);
          }
 else {
            LOG.warn("concurrency conflict detected but suppressed, on " + thisOid + " ("+ otherVersion+ ")");
          }
        }
      }
 else {
        originalOid=persistenceSession.createPersistentOrViewModelOid(pojo);
        adapter=persistenceSession.getAdapterFor(originalOid);
        if (adapter != null) {
          persistenceSession.remapRecreatedPojo(adapter,pojo);
        }
 else {
          adapter=persistenceSession.mapRecreatedPojo(originalOid,pojo);
          CallbackFacet.Util.callCallback(adapter,LoadedCallbackFacet.class);
        }
      }
      adapter.setVersion(datastoreVersion);
    }
  }
,calledFrom);
}
