{
  context.checking(new Expectations(){
{
      never(mockAuthenticationSessionProvider);
      never(mockAdapterManager);
      allowing(mockFacetHolder).containsFacet(ValueFacet.class);
      will(returnValue(Boolean.FALSE));
      allowing(mockDependencyInjector).injectServicesInto(with(any(Object.class)));
    }
  }
);
  final Parser<String> parser=new Parser<String>(){
    @Override public String parseTextEntry(    final Object contextPojo,    final String entry,    Localization localization){
      if (entry.equals("invalid")) {
        throw new ParsingException();
      }
      if (entry.equals("number")) {
        throw new NumberFormatException();
      }
      if (entry.equals("format")) {
        throw new IllegalFormatWidthException(2);
      }
      return entry.toUpperCase();
    }
    @Override public int typicalLength(){
      return 0;
    }
    @Override public String displayTitleOf(    final String object,    final Localization localization){
      return null;
    }
    @Override public String displayTitleOf(    final String object,    final String usingMask){
      return null;
    }
    @Override public String parseableTitleOf(    final String existing){
      return null;
    }
  }
;
  parseableFacetUsingParser=new ParseableFacetUsingParser(parser,mockFacetHolder,DeploymentCategory.PRODUCTION,mockAuthenticationSessionProvider,mockDependencyInjector,mockAdapterManager);
}
