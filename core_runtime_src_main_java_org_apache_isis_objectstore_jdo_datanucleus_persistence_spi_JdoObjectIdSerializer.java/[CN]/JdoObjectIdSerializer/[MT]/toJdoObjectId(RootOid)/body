{
  final String idStr=oid.getIdentifier();
  final int separatorIdx=idStr.indexOf(SEPARATOR);
  final ObjectSpecification spec=getSpecificationLoader().lookupBySpecId(oid.getObjectSpecId());
  final JdoPersistenceCapableFacet jdoPcFacet=spec.getFacet(JdoPersistenceCapableFacet.class);
  if (separatorIdx != -1) {
    final String distinguisher=idStr.substring(0,separatorIdx);
    final String keyStr=idStr.substring(separatorIdx + 1);
    final boolean isApplicationIdentity=isApplicationIdentity(jdoPcFacet);
    if ("s".equals(distinguisher)) {
      if (isApplicationIdentity) {
        return keyStr;
      }
 else {
        return new StringIdentity(objectTypeClassFor(oid),keyStr);
      }
    }
 else     if ("i".equals(distinguisher)) {
      if (isApplicationIdentity) {
        return Integer.parseInt(keyStr);
      }
 else {
        return new IntIdentity(objectTypeClassFor(oid),keyStr);
      }
    }
 else     if ("l".equals(distinguisher)) {
      if (isApplicationIdentity) {
        return Long.parseLong(keyStr);
      }
 else {
        return new LongIdentity(objectTypeClassFor(oid),keyStr);
      }
    }
 else     if ("b".equals(distinguisher)) {
      if (isApplicationIdentity) {
        return Byte.parseByte(keyStr);
      }
 else {
        return new ByteIdentity(objectTypeClassFor(oid),keyStr);
      }
    }
 else     if ("u".equals(distinguisher)) {
      if (isApplicationIdentity) {
        return UUID.fromString(keyStr);
      }
 else {
        return new ObjectIdentity(objectTypeClassFor(oid),UUID.fromString(keyStr));
      }
    }
    if (dnPrefixes.contains(distinguisher)) {
      return keyStr + "[OID]" + spec.getFullIdentifier();
    }
    final String clsName=distinguisher;
    try {
      final Class<?> cls=Thread.currentThread().getContextClassLoader().loadClass(clsName);
      final Constructor<?> cons=cls.getConstructor(String.class);
      final Object dnOid=cons.newInstance(keyStr);
      return dnOid.toString();
    }
 catch (    ClassNotFoundException|IllegalArgumentException|InstantiationException|IllegalAccessException|SecurityException|InvocationTargetException|NoSuchMethodException e) {
      throw new JdoObjectIdSerializer.Exception(e);
    }
  }
 else {
    return idStr + "[OID]" + spec.getFullIdentifier();
  }
}
