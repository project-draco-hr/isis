{
  final BulkInteractionContext bulkInteractionContext=getServicesInjector().lookupService(BulkInteractionContext.class);
  try {
    final Object[] executionParameters=new Object[arguments.length];
    for (int i=0; i < arguments.length; i++) {
      executionParameters[i]=unwrap(arguments[i]);
    }
    final Object targetPojo=unwrap(targetAdapter);
    final BulkFacet bulkFacet=getFacetHolder().getFacet(BulkFacet.class);
    if (bulkFacet != null && bulkInteractionContext != null && bulkInteractionContext.getInvokedAs() == null) {
      bulkInteractionContext.setInvokedAs(BulkInteractionContext.InvokedAs.REGULAR);
      bulkInteractionContext.setDomainObjects(Collections.singletonList(targetPojo));
    }
    if (command != null && command.getExecutor() == Command.Executor.USER && owningAction != null) {
      if (command.getTarget() != null) {
      }
 else {
        command.setTargetClass(CommandUtil.targetClassNameFor(targetAdapter));
        command.setTargetAction(CommandUtil.targetActionNameFor(owningAction));
        command.setArguments(CommandUtil.argDescriptionFor(owningAction,arguments));
        final Bookmark targetBookmark=CommandUtil.bookmarkFor(targetAdapter);
        command.setTarget(targetBookmark);
      }
      command.setMemberIdentifier(CommandUtil.actionIdentifierFor(owningAction));
      final BackgroundService backgroundService=getServicesInjector().lookupService(BackgroundService.class);
      if (backgroundService != null) {
        final Object targetObject=unwrap(targetAdapter);
        final Object[] args=CommandUtil.objectsFor(arguments);
        ActionInvocationMemento aim=backgroundService.asActionInvocationMemento(method,targetObject,args);
        if (aim != null) {
          command.setMemento(aim.asMementoString());
        }
 else {
          throw new IsisException("Unable to build memento for action " + owningAction.getIdentifier().toClassAndNameIdentityString());
        }
      }
      final CommandFacet commandFacet=getFacetHolder().getFacet(CommandFacet.class);
      if (commandFacet != null && !commandFacet.isDisabled()) {
        command.setExecuteIn(commandFacet.executeIn());
        command.setPersistence(commandFacet.persistence());
      }
 else {
        command.setExecuteIn(org.apache.isis.applib.annotation.Command.ExecuteIn.FOREGROUND);
        command.setPersistence(org.apache.isis.applib.annotation.Command.Persistence.IF_HINTED);
      }
    }
    if (command != null && command.getExecutor() == Command.Executor.USER && command.getExecuteIn() == org.apache.isis.applib.annotation.Command.ExecuteIn.BACKGROUND) {
      final CommandService commandService=getServicesInjector().lookupService(CommandService.class);
      if (commandService.persistIfPossible(command)) {
        final ObjectAdapter resultAdapter=getAdapterManager().adapterFor(command);
        return InvocationResult.forActionThatReturned(resultAdapter);
      }
 else {
        throw new IsisException("Unable to schedule action '" + owningAction.getIdentifier().toClassAndNameIdentityString() + "' to run in background: "+ "CommandService does not support persistent commands ");
      }
    }
 else {
      if (command != null) {
        command.setStartedAt(Clock.getTimeAsJavaSqlTimestamp());
      }
      Object result=method.invoke(targetPojo,executionParameters);
      if (LOG.isDebugEnabled()) {
        LOG.debug(" action result " + result);
      }
      if (result == null) {
        if (targetAdapter.getSpecification().isViewModelCloneable(targetAdapter)) {
          final ViewModel.Cloneable cloneable=(ViewModel.Cloneable)targetAdapter.getObject();
          final Object clone=cloneable.clone();
          final ObjectAdapter clonedAdapter=getAdapterManager().adapterFor(clone);
          return InvocationResult.forActionThatReturned(clonedAdapter);
        }
        return InvocationResult.forActionThatReturned(null);
      }
      ObjectAdapter resultAdapter=getAdapterManager().adapterFor(result);
      if (resultAdapter.getSpecification().isViewModelCloneable(resultAdapter)) {
        final ViewModel.Cloneable cloneable=(ViewModel.Cloneable)result;
        result=cloneable.clone();
        resultAdapter=getAdapterManager().adapterFor(result);
      }
      final TypeOfFacet typeOfFacet=getFacetHolder().getFacet(TypeOfFacet.class);
      resultAdapter.setElementSpecificationProvider(ElementSpecificationProviderFromTypeOfFacet.createFrom(typeOfFacet));
      if (command != null) {
        if (!resultAdapter.getSpecification().containsDoOpFacet(ViewModelFacet.class)) {
          final Bookmark bookmark=CommandUtil.bookmarkFor(resultAdapter);
          command.setResult(bookmark);
        }
      }
      final PublishedActionFacet publishedActionFacet=getIdentified().getFacet(PublishedActionFacet.class);
      ActionInvocationFacet.currentInvocation.set(publishedActionFacet != null ? new CurrentInvocation(targetAdapter,getIdentified(),arguments,resultAdapter,command) : null);
      return InvocationResult.forActionThatReturned(resultAdapter);
    }
  }
 catch (  final IllegalArgumentException e) {
    throw e;
  }
catch (  final InvocationTargetException e) {
    final Throwable targetException=e.getTargetException();
    if (targetException instanceof IllegalStateException) {
      throw new ReflectiveActionException("IllegalStateException thrown while executing " + method + " "+ targetException.getMessage(),targetException);
    }
    if (targetException instanceof RecoverableException) {
      if (!runtimeContext.getTransactionState().canCommit()) {
        final Throwable targetExceptionCause=targetException.getCause();
        Throwable nonRecoverableCause=targetExceptionCause != null ? targetExceptionCause : targetException;
        throw new NonRecoverableException(nonRecoverableCause);
      }
    }
    ThrowableExtensions.throwWithinIsisException(e,"Exception executing " + method);
    return InvocationResult.forActionNotInvoked();
  }
catch (  final IllegalAccessException e) {
    throw new ReflectiveActionException("Illegal access of " + method,e);
  }
}
