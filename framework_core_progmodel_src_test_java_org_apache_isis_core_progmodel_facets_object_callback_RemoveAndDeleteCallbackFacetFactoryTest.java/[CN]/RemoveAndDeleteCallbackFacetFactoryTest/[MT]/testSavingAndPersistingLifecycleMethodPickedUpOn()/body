{
class Customer {
    @SuppressWarnings("unused") public void deleting(){
    }
    @SuppressWarnings("unused") public void removing(){
    }
  }
  final Method deleteMethod=findMethod(Customer.class,"deleting");
  final Method removeMethod=findMethod(Customer.class,"removing");
  removeFacetFactory.process(new ProcessClassContext(Customer.class,methodRemover,facetedMethod));
  deleteFacetFactory.process(new ProcessClassContext(Customer.class,methodRemover,facetedMethod));
  final Facet facet=facetedMethod.getFacet(RemovingCallbackFacet.class);
  assertNotNull(facet);
  assertTrue(facet instanceof RemovingCallbackFacetViaMethod);
  final RemovingCallbackFacetViaMethod removingCallbackFacetViaMethod=(RemovingCallbackFacetViaMethod)facet;
  final List<Method> methods=removingCallbackFacetViaMethod.getMethods();
  assertTrue(methods.contains(deleteMethod));
  assertTrue(methods.contains(removeMethod));
  assertTrue(methodRemover.getRemovedMethodMethodCalls().contains(deleteMethod));
}
