{
  editButton=new AjaxButtonWithPreSubmitHook(ID_EDIT_BUTTON,Model.of("Edit")){
    private static final long serialVersionUID=1L;
    @Override public void preSubmit(){
      getEntityModel().getObjectAdapterMemento().getObjectAdapter(ConcurrencyChecking.NO_CHECK);
    }
    @Override public void onSubmit(    final AjaxRequestTarget target,    final Form<?> form){
      getEntityModel().resetPropertyModels();
      toEditMode(target);
    }
    @Override protected void onError(    final AjaxRequestTarget target,    final Form<?> form){
      toEditMode(target);
    }
  }
;
  add(editButton);
  okButton=new ButtonWithPreSubmitHook(ID_OK_BUTTON,Model.of("OK")){
    private static final long serialVersionUID=1L;
    @Override public void preSubmit(){
      try {
        getEntityModel().getObjectAdapterMemento().getObjectAdapter(ConcurrencyChecking.CHECK);
      }
 catch (      ConcurrencyException ex) {
        Session.get().getFeedbackMessages().add(new FeedbackMessage(EntityPropertiesForm.this,ex.getMessage(),FeedbackMessage.ERROR));
      }
    }
    @Override public void onSubmit(){
      if (!getForm().hasError()) {
        final ObjectAdapter object=getEntityModel().getObject();
        final Memento snapshotToRollbackToIfInvalid=new Memento(object);
        getEntityModel().apply();
        final String invalidReasonIfAny=getEntityModel().getReasonInvalidIfAny();
        if (invalidReasonIfAny != null) {
          getForm().error(invalidReasonIfAny);
          snapshotToRollbackToIfInvalid.recreateObject();
          return;
        }
 else {
          getEntityModel().resetPropertyModels();
          toViewMode(null);
        }
      }
 else {
      }
    }
  }
;
  add(okButton);
  cancelButton=new AjaxButtonWithPreSubmitHook(ID_CANCEL_BUTTON,Model.of("Cancel")){
    private static final long serialVersionUID=1L;
{
      setDefaultFormProcessing(false);
    }
    @Override public void preSubmit(){
      getEntityModel().getObjectAdapterMemento().getObjectAdapter(ConcurrencyChecking.NO_CHECK);
    }
    @Override protected void onSubmit(    final AjaxRequestTarget target,    final Form<?> form){
      Session.get().getFeedbackMessages().clear();
      getForm().clearInput();
      getForm().visitFormComponentsPostOrder(new IVisitor<FormComponent<?>,Void>(){
        @Override public void component(        FormComponent<?> formComponent,        IVisit<Void> visit){
          if (formComponent instanceof CancelHintRequired) {
            final CancelHintRequired cancelHintRequired=(CancelHintRequired)formComponent;
            cancelHintRequired.onCancel();
          }
        }
      }
);
      getEntityModel().resetPropertyModels();
      toViewMode(target);
    }
    @Override protected void onError(    final AjaxRequestTarget target,    final Form<?> form){
      toViewMode(target);
    }
  }
;
  add(cancelButton);
  editButton.setOutputMarkupPlaceholderTag(true);
  cancelButton.setOutputMarkupPlaceholderTag(true);
}
