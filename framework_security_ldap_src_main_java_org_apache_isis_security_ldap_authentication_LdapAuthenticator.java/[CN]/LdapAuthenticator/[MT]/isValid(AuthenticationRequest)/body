{
  final AuthenticationRequestPassword passwordRequest=(AuthenticationRequestPassword)request;
  final String username=passwordRequest.getName();
  Assert.assertNotNull(username);
  if (username.equals("")) {
    LOG.debug("empty username");
    return false;
  }
  final String password=passwordRequest.getPassword();
  Assert.assertNotNull(password);
  final Hashtable<String,String> env=new Hashtable<String,String>(4);
  env.put(Context.INITIAL_CONTEXT_FACTORY,LdapAuthenticationConstants.SERVER_DEFAULT);
  env.put(Context.PROVIDER_URL,ldapProvider);
  env.put(Context.SECURITY_PRINCIPAL,"uid=" + username + ", "+ ldapDn);
  env.put(Context.SECURITY_CREDENTIALS,password);
  DirContext authContext=null;
  try {
    authContext=new InitialDirContext(env);
    setRoles(authContext,request,username);
    return true;
  }
 catch (  final AuthenticationException e) {
    return false;
  }
catch (  final NamingException e) {
    throw new IsisException("Failed to authenticate using LDAP",e);
  }
 finally {
    try {
      if (authContext != null) {
        authContext.close();
      }
    }
 catch (    final NamingException e) {
      throw new IsisException("Failed to authenticate using LDAP",e);
    }
  }
}
