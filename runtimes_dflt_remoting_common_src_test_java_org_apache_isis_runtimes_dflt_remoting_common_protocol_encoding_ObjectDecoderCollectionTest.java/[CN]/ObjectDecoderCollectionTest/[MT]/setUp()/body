{
  super.setUp();
  final FieldOrderCache fieldOrderCache=null;
  deserializer=new ObjectDeserializer(fieldOrderCache);
  final TestProxySpecification specification=system.getSpecification(Vector.class);
  specification.addFacet(new CollectionFacetAbstract(specification){
    @Override public void init(    final ObjectAdapter collection,    final ObjectAdapter[] initData){
      for (      final ObjectAdapter element : initData) {
        collectionOfUnderlying(collection).add(element.getObject());
      }
    }
    @Override @SuppressWarnings("unchecked") public Collection<ObjectAdapter> collection(    final ObjectAdapter collectionAdapter){
      final Collection<Object> collection=collectionOfUnderlying(collectionAdapter);
      return CollectionUtils.collect(collection,new ObjectToAdapterTransformer());
    }
    @Override public ObjectAdapter firstElement(    final ObjectAdapter collection){
      throw new NotYetImplementedException();
    }
    @Override public int size(    final ObjectAdapter collection){
      return collectionOfUnderlying(collection).size();
    }
    @SuppressWarnings("unchecked") private Collection<Object> collectionOfUnderlying(    final ObjectAdapter collectionNO){
      return (Collection<Object>)collectionNO.getObject();
    }
  }
);
}
