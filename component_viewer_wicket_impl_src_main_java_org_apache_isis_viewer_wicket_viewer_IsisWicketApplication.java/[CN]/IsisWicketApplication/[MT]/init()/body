{
  try {
    super.init();
    final String webInfDir=getServletContext().getRealPath("/WEB-INF");
    loggingConfigurer.configureLogging(webInfDir,new String[0]);
    getRequestCycleSettings().setRenderStrategy(RenderStrategy.REDIRECT_TO_RENDER);
    getRequestCycleListeners().add(new WebRequestCycleForIsis());
    getResourceSettings().setParentFolderPlaceholder("$up$");
    determineDeploymentTypeIfRequired();
    final IsisConfigurationBuilder isisConfigurationBuilder=createConfigBuilder();
    final IsisInjectModule isisModule=newIsisModule(deploymentType,isisConfigurationBuilder);
    final Injector injector=Guice.createInjector(isisModule,newIsisWicketModule());
    injector.injectMembers(this);
    final IsisConfiguration configuration=isisConfigurationBuilder.getConfiguration();
    this.getMarkupSettings().setStripWicketTags(determineStripWicketTags(deploymentType,configuration));
    initWicketComponentInjection(injector);
    buildCssBundle();
    setHeaderResponseDecorator(new IHeaderResponseDecorator(){
      @Override public IHeaderResponse decorate(      IHeaderResponse response){
        return new JavaScriptFilteredIntoFooterHeaderResponse(response,"footerJS");
      }
    }
);
    mountPage("/entity/${objectOid}",PageType.ENTITY);
    mountPage("/action/${objectOid}/${actionOwningSpec}/${actionId}/${actionType}",PageType.ACTION_PROMPT);
    @SuppressWarnings("unused") SharedResources sharedResources=getSharedResources();
  }
 catch (  RuntimeException ex) {
    List<MetaModelInvalidException> mmies=Lists.newArrayList(Iterables.filter(Throwables.getCausalChain(ex),MetaModelInvalidException.class));
    if (!mmies.isEmpty()) {
      final MetaModelInvalidException mmie=mmies.get(0);
      log("");
      logBanner();
      log("");
      validationErrors.addAll(mmie.getValidationErrors());
      for (      String validationError : validationErrors) {
        logError(validationError);
      }
      log("");
      log("Please inspect the above messages and correct your domain model.");
      log("");
      logBanner();
      log("");
    }
 else {
      LOG.error("Failed to initialize",ex);
      throw ex;
    }
  }
}
