{
  int i=0, c=0;
  if (len <= 0)   return 0;
  if ((offset + len) > buf.length || offset < 0)   throw new ArrayIndexOutOfBoundsException();
  if (nextChar != 0) {
    buf[offset + i++]=nextChar;
    nextChar=0;
  }
  while (i < len) {
    if (finish <= start) {
      if (instream == null) {
        c=-1;
        break;
      }
      start=0;
      finish=instream.read(buffer,0,buffer.length);
      if (finish <= 0) {
        this.close();
        c=-1;
        break;
      }
    }
    c=buffer[start] & 0x0ff;
    if ((c & 0x80) == 0x00) {
      start++;
      buf[offset + i++]=(char)c;
      continue;
    }
    int off=start;
    try {
      if ((buffer[off] & 0x0E0) == 0x0C0) {
        c=(buffer[off++] & 0x1f) << 6;
        c+=buffer[off++] & 0x3f;
      }
 else       if ((buffer[off] & 0x0F0) == 0x0E0) {
        c=(buffer[off++] & 0x0f) << 12;
        c+=(buffer[off++] & 0x3f) << 6;
        c+=buffer[off++] & 0x3f;
      }
 else       if ((buffer[off] & 0x0f8) == 0x0F0) {
        c=(buffer[off++] & 0x07) << 18;
        c+=(buffer[off++] & 0x3f) << 12;
        c+=(buffer[off++] & 0x3f) << 6;
        c+=buffer[off++] & 0x3f;
        if (c > 0x0010ffff)         throw new CharConversionException("UTF-8 encoding of character 0x00" + Integer.toHexString(c) + " can't be converted to Unicode.");
 else         if (c > 0xffff) {
          c-=0x10000;
          nextChar=(char)(0xDC00 + (c & 0x03ff));
          c=0xD800 + (c >> 10);
        }
      }
 else       throw new CharConversionException("Unconvertible UTF-8 character" + " beginning with 0x" + Integer.toHexString(buffer[start] & 0xff));
    }
 catch (    ArrayIndexOutOfBoundsException e) {
      c=0;
    }
    if (off > finish) {
      System.arraycopy(buffer,start,buffer,0,finish - start);
      finish-=start;
      start=0;
      off=instream.read(buffer,finish,buffer.length - finish);
      if (off < 0) {
        this.close();
        throw new CharConversionException("Partial UTF-8 char");
      }
      finish+=off;
      continue;
    }
    for (start++; start < off; start++) {
      if ((buffer[start] & 0xC0) != 0x80) {
        this.close();
        throw new CharConversionException("Malformed UTF-8 char -- " + "is an XML encoding declaration missing?");
      }
    }
    buf[offset + i++]=(char)c;
    if (nextChar != 0 && i < len) {
      buf[offset + i++]=nextChar;
      nextChar=0;
    }
  }
  if (i > 0)   return i;
  return (c == -1) ? -1 : 0;
}
