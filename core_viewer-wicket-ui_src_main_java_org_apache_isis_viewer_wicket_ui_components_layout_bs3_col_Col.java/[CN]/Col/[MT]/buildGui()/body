{
  setRenderBodyOnly(true);
  final WebMarkupContainer div=new WebMarkupContainer(ID_COL);
  CssClassAppender.appendCssClassTo(div,bs3Col.toCssClass());
  Util.appendCssClass(div,bs3Col,ID_COL);
  this.addOrReplace(div);
  final DomainObjectLayoutData domainObject=bs3Col.getDomainObject();
  final WebMarkupContainer actionOwner;
  final String actionIdToUse;
  final String actionIdToHide;
  if (domainObject != null) {
    final WebMarkupContainer entityHeaderPanel=new WebMarkupContainer(ID_ENTITY_HEADER_PANEL);
    div.add(entityHeaderPanel);
    final ComponentFactory componentFactory=getComponentFactoryRegistry().findComponentFactory(ComponentType.ENTITY_ICON_TITLE_AND_COPYLINK,getModel());
    final Component component=componentFactory.createComponent(getModel());
    entityHeaderPanel.addOrReplace(component);
    actionOwner=entityHeaderPanel;
    actionIdToUse="entityActions";
    actionIdToHide="actions";
  }
 else {
    Components.permanentlyHide(div,ID_ENTITY_HEADER_PANEL);
    actionOwner=div;
    actionIdToUse="actions";
    actionIdToHide=null;
  }
  final List<ActionLayoutData> actionLayoutDatas=bs3Col.getActions();
  final List<ObjectAction> objectActions=FluentIterable.from(actionLayoutDatas).transform(new Function<ActionLayoutData,ObjectAction>(){
    @Nullable @Override public ObjectAction apply(    @Nullable final ActionLayoutData actionLayoutData){
      return getModel().getTypeOfSpecification().getObjectAction(actionLayoutData.getId());
    }
  }
).filter(Predicates.<ObjectAction>notNull()).toList();
  final List<LinkAndLabel> entityActionLinks=EntityActionUtil.asLinkAndLabelsForAdditionalLinksPanel(getModel(),objectActions);
  if (!entityActionLinks.isEmpty()) {
    AdditionalLinksPanel.addAdditionalLinks(actionOwner,actionIdToUse,entityActionLinks,AdditionalLinksPanel.Style.INLINE_LIST);
  }
 else {
    Components.permanentlyHide(actionOwner,actionIdToUse);
  }
  if (actionIdToHide != null) {
    Components.permanentlyHide(div,actionIdToHide);
  }
  final List<BS3Row> rows=Lists.newArrayList(this.bs3Col.getRows());
  final List<BS3TabGroup> tabGroups=bs3Col.getTabGroups();
  final List<BS3TabGroup> tabGroupsWithTabs=FluentIterable.from(bs3Col.getTabGroups()).filter(new Predicate<BS3TabGroup>(){
    @Override public boolean apply(    @Nullable final BS3TabGroup bs3TabGroup){
      return !bs3TabGroup.getTabs().isEmpty();
    }
  }
).toList();
  BS3Tab singleTabIfAny=null;
  if (tabGroupsWithTabs.size() == 1) {
    final BS3TabGroup firstTabGroup=tabGroupsWithTabs.get(0);
    final List<BS3Tab> firstTabGroupTabs=firstTabGroup.getTabs();
    if (firstTabGroupTabs.size() == 1) {
      singleTabIfAny=firstTabGroupTabs.get(0);
    }
  }
  if (singleTabIfAny != null) {
    rows.addAll(singleTabIfAny.getRows());
  }
  if (!rows.isEmpty()) {
    final RepeatingView rowRv=new RepeatingView(ID_ROWS);
    for (    final BS3Row bs3Row : rows) {
      final String id=rowRv.newChildId();
      final EntityModel entityModelWithHints=getModel().cloneWithLayoutMetadata(bs3Row);
      final WebMarkupContainer row=new Row(id,entityModelWithHints);
      rowRv.add(row);
    }
    div.add(rowRv);
  }
 else {
    Components.permanentlyHide(div,ID_ROWS);
  }
  if (!tabGroupsWithTabs.isEmpty() && singleTabIfAny == null) {
    final RepeatingView tabGroupRv=new RepeatingView(ID_TAB_GROUPS);
    for (    BS3TabGroup bs3TabGroup : tabGroupsWithTabs) {
      final String id=tabGroupRv.newChildId();
      final EntityModel entityModelWithHints=getModel().cloneWithLayoutMetadata(bs3TabGroup);
      final WebMarkupContainer tabGroup=new TabGroupPanel(id,entityModelWithHints);
      tabGroupRv.add(tabGroup);
    }
    div.add(tabGroupRv);
  }
 else {
    Components.permanentlyHide(div,ID_TAB_GROUPS);
  }
  final List<FieldSet> fieldSets=bs3Col.getFieldSets();
  if (!fieldSets.isEmpty()) {
    final RepeatingView fieldSetRv=new RepeatingView(ID_FIELD_SETS);
    for (    FieldSet fieldSet : fieldSets) {
      final String id=fieldSetRv.newChildId();
      final EntityModel entityModelWithHints=getModel().cloneWithLayoutMetadata(fieldSet);
      final WebMarkupContainer propertyGroup=new PropertyGroup(id,entityModelWithHints);
      fieldSetRv.add(propertyGroup);
    }
    div.add(fieldSetRv);
  }
 else {
    Components.permanentlyHide(div,ID_FIELD_SETS);
  }
  final List<CollectionLayoutData> collections=bs3Col.getCollections();
  if (!collections.isEmpty()) {
    final RepeatingView collectionRv=new RepeatingView(ID_COLLECTIONS);
    for (    CollectionLayoutData collection : collections) {
      final String id=collectionRv.newChildId();
      final EntityModel entityModelWithHints=getModel().cloneWithLayoutMetadata(collection);
      final WebMarkupContainer collectionPanel=new EntityCollectionPanel(id,entityModelWithHints);
      collectionRv.add(collectionPanel);
    }
    div.add(collectionRv);
  }
 else {
    Components.permanentlyHide(div,ID_COLLECTIONS);
  }
}
