{
  setRenderBodyOnly(true);
  final WebMarkupContainer div=new WebMarkupContainer(ID_COL);
  CssClassAppender.appendCssClassTo(div,bs3Col.toCssClass());
  Util.appendCssClass(div,bs3Col,"col");
  this.addOrReplace(div);
  final DomainObjectLayoutData domainObject=bs3Col.getDomainObject();
  final WebMarkupContainer actionOwner;
  final String actionIdToUse;
  final String actionIdToHide;
  if (domainObject != null) {
    final WebMarkupContainer entityHeaderPanel=new WebMarkupContainer("entityHeaderPanel");
    div.add(entityHeaderPanel);
    final ComponentFactory componentFactory=getComponentFactoryRegistry().findComponentFactory(ComponentType.ENTITY_ICON_TITLE_AND_COPYLINK,getModel());
    final Component component=componentFactory.createComponent(getModel());
    entityHeaderPanel.addOrReplace(component);
    actionOwner=entityHeaderPanel;
    actionIdToUse="entityActions";
    actionIdToHide="actions";
  }
 else {
    Components.permanentlyHide(div,"entityHeaderPanel");
    actionOwner=div;
    actionIdToUse="actions";
    actionIdToHide=null;
  }
  final List<ActionLayoutData> actionLayoutDatas=bs3Col.getActions();
  final List<ObjectAction> objectActions=FluentIterable.from(actionLayoutDatas).transform(new Function<ActionLayoutData,ObjectAction>(){
    @Nullable @Override public ObjectAction apply(    @Nullable final ActionLayoutData actionLayoutData){
      return getModel().getTypeOfSpecification().getObjectAction(actionLayoutData.getId());
    }
  }
).filter(Predicates.<ObjectAction>notNull()).toList();
  final List<LinkAndLabel> entityActionLinks=EntityActionUtil.asLinkAndLabelsForAdditionalLinksPanel(getModel(),objectActions);
  if (!entityActionLinks.isEmpty()) {
    AdditionalLinksPanel.addAdditionalLinks(actionOwner,actionIdToUse,entityActionLinks,AdditionalLinksPanel.Style.INLINE_LIST);
  }
 else {
    Components.permanentlyHide(actionOwner,actionIdToUse);
  }
  if (actionIdToHide != null) {
    Components.permanentlyHide(div,actionIdToHide);
  }
  final List<BS3TabGroup> tabGroups=bs3Col.getTabGroups();
  if (!tabGroups.isEmpty()) {
    final RepeatingView rv=new RepeatingView("tabGroups");
    for (    BS3TabGroup bs3TabGroup : tabGroups) {
      final String id=rv.newChildId();
      final EntityModel entityModelWithHints=getModel().cloneWithLayoutMetadata(bs3TabGroup);
      final WebMarkupContainer tabGroup=new TabGroupPanel(id,entityModelWithHints);
      rv.add(tabGroup);
    }
    div.add(rv);
  }
 else {
    Components.permanentlyHide(div,"tabGroups");
  }
  final List<FieldSet> fieldSets=bs3Col.getFieldSets();
  if (!fieldSets.isEmpty()) {
    final RepeatingView rv=new RepeatingView("fieldSets");
    for (    FieldSet fieldSet : fieldSets) {
      final String id=rv.newChildId();
      final EntityModel entityModelWithHints=getModel().cloneWithLayoutMetadata(fieldSet);
      final WebMarkupContainer propertyGroup=new PropertyGroup(id,entityModelWithHints);
      rv.add(propertyGroup);
    }
    div.add(rv);
  }
 else {
    Components.permanentlyHide(div,"fieldSets");
  }
  final List<CollectionLayoutData> collections=bs3Col.getCollections();
  if (!collections.isEmpty()) {
    final RepeatingView rv=new RepeatingView("collections");
    for (    CollectionLayoutData collection : collections) {
      final String id=rv.newChildId();
      final EntityModel entityModelWithHints=getModel().cloneWithLayoutMetadata(collection);
      final WebMarkupContainer collectionPanel=new EntityCollectionPanel(id,entityModelWithHints);
      rv.add(collectionPanel);
    }
    div.add(rv);
  }
 else {
    Components.permanentlyHide(div,"collections");
  }
}
