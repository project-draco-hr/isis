{
  final EntityModel entityModel=(EntityModel)getModel();
  final ColumnSpans columnSpans=entityModel.getObject().getSpecification().getFacet(MemberGroupLayoutFacet.class).getColumnSpans();
  MarkupContainer leftColumn=new WebMarkupContainer(ID_LEFT_COLUMN);
  add(leftColumn);
  boolean added=addPropertiesInColumn(leftColumn,MemberGroupLayoutHint.LEFT,columnSpans);
  addButtons(leftColumn);
  addFeedbackGui(leftColumn);
  if (!added) {
    Components.permanentlyHide(this,editButton.getId(),okButton.getId(),cancelButton.getId(),ID_FEEDBACK);
  }
  if (columnSpans.getMiddle() > 0) {
    MarkupContainer middleColumn=new WebMarkupContainer(ID_MIDDLE_COLUMN);
    add(middleColumn);
    addPropertiesInColumn(middleColumn,MemberGroupLayoutHint.MIDDLE,columnSpans);
  }
 else {
    Components.permanentlyHide(this,ID_MIDDLE_COLUMN);
  }
  if (columnSpans.getRight() > 0) {
    MarkupContainer rightColumn=new WebMarkupContainer(ID_RIGHT_COLUMN);
    add(rightColumn);
    addPropertiesInColumn(rightColumn,MemberGroupLayoutHint.RIGHT,columnSpans);
  }
 else {
    Components.permanentlyHide(this,ID_RIGHT_COLUMN);
  }
  if (columnSpans.getCollections() > 0) {
    final String idCollectionsToShow;
    final String idCollectionsToHide;
    int collectionSpan;
    if (columnSpans.exceedsRow()) {
      idCollectionsToShow=ID_ENTITY_COLLECTIONS_OVERFLOW;
      idCollectionsToHide=ID_ENTITY_COLLECTIONS;
      collectionSpan=12;
    }
 else {
      idCollectionsToShow=ID_ENTITY_COLLECTIONS;
      idCollectionsToHide=ID_ENTITY_COLLECTIONS_OVERFLOW;
      collectionSpan=columnSpans.getCollections();
    }
    final Component collectionsColumn=getComponentFactoryRegistry().addOrReplaceComponent(this,idCollectionsToShow,ComponentType.ENTITY_COLLECTIONS,entityModel);
    addClassForSpan(collectionsColumn,collectionSpan);
    Components.permanentlyHide(this,idCollectionsToHide);
  }
 else {
    Components.permanentlyHide(this,ID_ENTITY_COLLECTIONS);
    Components.permanentlyHide(this,ID_ENTITY_COLLECTIONS_OVERFLOW);
  }
}
