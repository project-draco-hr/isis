{
  editButton=new AjaxButton(ID_EDIT_BUTTON,Model.of("Edit")){
    private static final long serialVersionUID=1L;
    @Override public void validate(){
      try {
        getEntityModel().load(ConcurrencyChecking.CHECK);
      }
 catch (      ConcurrencyException ex) {
        getMessageBroker().addMessage("Object changed by " + ex.getOid().getVersion().getUser() + ", automatically reloading");
        getEntityModel().load(ConcurrencyChecking.NO_CHECK);
      }
      super.validate();
    }
    @Override public void onSubmit(    final AjaxRequestTarget target,    final Form<?> form){
      getEntityModel().resetPropertyModels();
      toEditMode(target);
    }
    @Override protected void onError(    final AjaxRequestTarget target,    final Form<?> form){
      toEditMode(target);
    }
    @Override protected void updateAjaxAttributes(    AjaxRequestAttributes attributes){
      super.updateAjaxAttributes(attributes);
      attributes.getAjaxCallListeners().add(new org.apache.wicket.ajax.attributes.AjaxCallListener(){
        private static final long serialVersionUID=1L;
        @Override public CharSequence getSuccessHandler(        Component component){
          return "$('.first-field input').focus();";
        }
      }
);
    }
  }
;
  markupContainer.add(editButton);
  okButton=new ButtonWithPreValidateHook(ID_OK_BUTTON,Model.of("OK")){
    private static final long serialVersionUID=1L;
    @Override public String preValidate(){
      try {
        getEntityModel().load(ConcurrencyChecking.CHECK);
      }
 catch (      ConcurrencyException ex) {
        String recognizedErrorMessage=recognizeException(ex);
        if (recognizedErrorMessage == null) {
          throw ex;
        }
        getEntityModel().load(ConcurrencyChecking.NO_CHECK);
        getForm().clearInput();
        getEntityModel().resetPropertyModels();
        toViewMode(null);
        toEditMode(null);
        return recognizedErrorMessage;
      }
      return null;
    }
    @Override public void validate(){
      EntityPropertiesForm form=EntityPropertiesForm.this;
      String preValidationErrorIfAny=form.getPreValidationErrorIfAny();
      if (preValidationErrorIfAny != null) {
        feedbackOrNotifyAnyRecognizedError(preValidationErrorIfAny,form);
      }
 else {
        super.validate();
      }
    }
    @Override public void onSubmit(){
      if (getForm().hasError()) {
        return;
      }
      final ObjectAdapter object=getEntityModel().getObject();
      final Memento snapshotToRollbackToIfInvalid=new Memento(object);
      getEntityModel().apply();
      final String invalidReasonIfAny=getEntityModel().getReasonInvalidIfAny();
      if (invalidReasonIfAny != null) {
        getForm().error(invalidReasonIfAny);
        snapshotToRollbackToIfInvalid.recreateObject();
        return;
      }
      try {
        EntityPropertiesForm.this.getTransactionManager().flushTransaction();
      }
 catch (      RuntimeException ex) {
        String message=recognizeExceptionAndNotify(ex,EntityPropertiesForm.this);
        if (message == null) {
          throw ex;
        }
        toEditMode(null);
        return;
      }
      try {
        getEntityModel().resetPropertyModels();
      }
 catch (      RuntimeException ex) {
        throw ex;
      }
      toViewMode(null);
      final EntityPage entityPage=new EntityPage(EntityPropertiesForm.this.getModelObject(),null);
      EntityPropertiesForm.this.setResponsePage(entityPage);
    }
  }
;
  markupContainer.add(okButton);
  cancelButton=new AjaxButton(ID_CANCEL_BUTTON,Model.of("Cancel")){
    private static final long serialVersionUID=1L;
{
      setDefaultFormProcessing(false);
    }
    @Override public void validate(){
      try {
        getEntityModel().load(ConcurrencyChecking.CHECK);
      }
 catch (      ConcurrencyException ex) {
        getMessageBroker().addMessage("Object changed by " + ex.getOid().getVersion().getUser() + ", automatically reloading");
        getEntityModel().load(ConcurrencyChecking.NO_CHECK);
      }
      super.validate();
    }
    @Override protected void onSubmit(    final AjaxRequestTarget target,    final Form<?> form){
      Session.get().getFeedbackMessages().clear();
      getForm().clearInput();
      getForm().visitFormComponentsPostOrder(new IVisitor<FormComponent<?>,Void>(){
        @Override public void component(        FormComponent<?> formComponent,        IVisit<Void> visit){
          if (formComponent instanceof CancelHintRequired) {
            final CancelHintRequired cancelHintRequired=(CancelHintRequired)formComponent;
            cancelHintRequired.onCancel();
          }
        }
      }
);
      try {
        getEntityModel().resetPropertyModels();
      }
 catch (      RuntimeException ex) {
        throw ex;
      }
      toViewMode(target);
    }
    @Override protected void onError(    final AjaxRequestTarget target,    final Form<?> form){
      toViewMode(target);
    }
  }
;
  markupContainer.add(cancelButton);
  okButton.setOutputMarkupPlaceholderTag(true);
  editButton.setOutputMarkupPlaceholderTag(true);
  cancelButton.setOutputMarkupPlaceholderTag(true);
  editButton.add(new JGrowlBehaviour());
  cancelButton.add(new JGrowlBehaviour());
}
