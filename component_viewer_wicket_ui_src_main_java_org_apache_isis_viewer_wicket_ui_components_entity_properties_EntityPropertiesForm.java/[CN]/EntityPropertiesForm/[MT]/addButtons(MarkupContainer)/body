{
  editButton=new AjaxButtonWithOnError(ID_EDIT_BUTTON,new ResourceModel("editLabel")){
    private static final long serialVersionUID=1L;
    @Override public void validate(){
      try {
        getEntityModel().load(ConcurrencyChecking.CHECK);
      }
 catch (      ConcurrencyException ex) {
        getMessageBroker().addMessage("Object changed by " + ex.getOid().getVersion().getUser() + ", automatically reloading");
        getEntityModel().load(ConcurrencyChecking.NO_CHECK);
      }
      super.validate();
    }
    @Override public void onSubmit(    final AjaxRequestTarget target,    final Form<?> form){
      getEntityModel().resetPropertyModels();
      toEditMode(target);
    }
    @Override protected void updateAjaxAttributes(    AjaxRequestAttributes attributes){
      super.updateAjaxAttributes(attributes);
      attributes.getAjaxCallListeners().add(new org.apache.wicket.ajax.attributes.AjaxCallListener(){
        private static final long serialVersionUID=1L;
        @Override public CharSequence getSuccessHandler(        Component component){
          return "$('html, body').animate({" + "        scrollTop: $('.entityIconAndTitlePanel').offset().top" + "    }, 1000);";
        }
      }
);
    }
  }
;
  markupContainer.add(editButton);
  okButton=new AjaxButtonForValidate(ID_OK_BUTTON,new ResourceModel("okLabel"));
  markupContainer.add(okButton);
  cancelButton=new AjaxButtonForCancel(ID_CANCEL_BUTTON,new ResourceModel("cancelLabel")){
    private static final long serialVersionUID=1L;
    @Override public void validate(){
      try {
        getEntityModel().load(ConcurrencyChecking.CHECK);
      }
 catch (      ConcurrencyException ex) {
        getMessageBroker().addMessage("Object changed by " + ex.getOid().getVersion().getUser() + ", automatically reloading");
        getEntityModel().load(ConcurrencyChecking.NO_CHECK);
      }
      super.validate();
    }
    @Override protected void onSubmit(    final AjaxRequestTarget target,    final Form<?> form){
      Session.get().getFeedbackMessages().clear();
      getForm().clearInput();
      getForm().visitFormComponentsPostOrder(new IVisitor<FormComponent<?>,Void>(){
        @Override public void component(        FormComponent<?> formComponent,        IVisit<Void> visit){
          if (formComponent instanceof CancelHintRequired) {
            final CancelHintRequired cancelHintRequired=(CancelHintRequired)formComponent;
            cancelHintRequired.onCancel();
          }
        }
      }
);
      try {
        getEntityModel().resetPropertyModels();
      }
 catch (      RuntimeException ex) {
        throw ex;
      }
      toViewMode(target);
    }
  }
;
  markupContainer.add(cancelButton);
  okButton.setOutputMarkupPlaceholderTag(true);
  editButton.setOutputMarkupPlaceholderTag(true);
  cancelButton.setOutputMarkupPlaceholderTag(true);
  okButton.add(new JGrowlBehaviour());
  editButton.add(new JGrowlBehaviour());
  cancelButton.add(new JGrowlBehaviour());
}
