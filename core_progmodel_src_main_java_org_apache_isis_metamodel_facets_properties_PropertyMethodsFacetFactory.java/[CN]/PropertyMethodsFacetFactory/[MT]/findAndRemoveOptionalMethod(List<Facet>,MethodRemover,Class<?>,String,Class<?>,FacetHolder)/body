{
  boolean isOptional=false;
  final Method method=findMethod(cls,CLASS,OPTIONAL_PREFIX + name,boolean.class,NO_PARAMETERS_TYPES);
  removeMethod(methodRemover,method);
  if (method != null) {
    final Boolean optionalMethodReturnValue=(Boolean)InvokeUtils.invoke(method,new Object[0]);
    isOptional=optionalMethodReturnValue.booleanValue() | isOptional;
  }
  if (!isOptional) {
    return;
  }
  if (returnType.isPrimitive()) {
    LOG.warn(cls.getName() + "#" + name+ " cannot be optional as it is a primitive; request ignored");
    return;
  }
  propertyFacets.add(new MandatoryFacetOverriddenByMethod(property));
}
