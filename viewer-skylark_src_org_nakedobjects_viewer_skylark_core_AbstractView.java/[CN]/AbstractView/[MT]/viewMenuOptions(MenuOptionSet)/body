{
  options.setColor(Style.VIEW_MENU);
  if (getParent() != null) {
    Enumeration possibleViews=ViewFactory.getViewFactory().openRootViews(content,null);
    while (possibleViews.hasMoreElements()) {
      ViewSpecification specification=(ViewSpecification)possibleViews.nextElement();
      MenuOption viewAs=new OpenViewOption(specification);
      options.add(MenuOptionSet.VIEW,viewAs);
    }
  }
  if (view.getSpecification().isSubView()) {
    if (view.getSpecification().isReplaceable()) {
      replaceOptions(ViewFactory.getViewFactory().openSubviews(content,this),options);
      replaceOptions(ViewFactory.getViewFactory().closedSubviews(content,this),options);
    }
  }
 else {
    if (view.getSpecification().isReplaceable()) {
      replaceOptions(ViewFactory.getViewFactory().openRootViews(content,this),options);
    }
    options.add(MenuOptionSet.VIEW,new PrintOption());
    if (getParent() != null) {
      options.add(MenuOptionSet.VIEW,CLOSE_OPTION);
      options.add(MenuOptionSet.VIEW,CLOSE_ALL_OPTION);
    }
  }
  options.add(MenuOptionSet.DEBUG,new MenuOption("Refresh view"){
    public void execute(    Workspace workspace,    View view,    Location at){
      refresh();
    }
  }
);
  options.add(MenuOptionSet.DEBUG,new MenuOption("Invalidate content"){
    public void execute(    Workspace workspace,    View view,    Location at){
      invalidateContent();
    }
  }
);
  options.add(MenuOptionSet.DEBUG,new MenuOption("Invalidate layout"){
    public void execute(    Workspace workspace,    View view,    Location at){
      invalidateLayout();
    }
  }
);
  final UndoStack undoStack=getViewManager().getUndoStack();
  if (!undoStack.isEmpty()) {
    options.add(MenuOptionSet.VIEW,new MenuOption("Undo " + undoStack.getNameOfUndo()){
      public Consent disabled(      View component){
        return new Allow(undoStack.descriptionOfUndo());
      }
      public void execute(      Workspace workspace,      View view,      Location at){
        undoStack.undoLastCommand();
      }
    }
);
  }
}
