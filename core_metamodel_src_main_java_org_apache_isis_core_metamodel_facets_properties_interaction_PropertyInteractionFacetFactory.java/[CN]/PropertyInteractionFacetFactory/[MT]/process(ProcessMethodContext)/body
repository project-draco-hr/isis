{
  final Method method=processMethodContext.getMethod();
  FacetedMethod holder=processMethodContext.getFacetHolder();
  final PropertyOrCollectionAccessorFacet getterFacet=holder.getFacet(PropertyOrCollectionAccessorFacet.class);
  if (getterFacet == null) {
    return;
  }
  final Property property=Annotations.getAnnotation(method,Property.class);
  final PropertyInteraction propertyInteraction=Annotations.getAnnotation(method,PropertyInteraction.class);
  final Class<? extends PropertyInteractionEvent<?,?>> propertyInteractionEventType;
  final PropertyInteractionFacetAbstract propertyInteractionFacet;
  if (property != null && property.interaction() != null) {
    propertyInteractionEventType=property.interaction();
    propertyInteractionFacet=new PropertyInteractionFacetForPropertyAnnotation(propertyInteractionEventType,getterFacet,servicesInjector,getSpecificationLoader(),holder);
  }
 else   if (propertyInteraction != null) {
    propertyInteractionEventType=propertyInteraction.value();
    propertyInteractionFacet=new PropertyInteractionFacetAnnotation(propertyInteractionEventType,getterFacet,servicesInjector,getSpecificationLoader(),holder);
  }
 else {
    propertyInteractionEventType=PropertyInteractionEvent.Default.class;
    propertyInteractionFacet=new PropertyInteractionFacetDefault(propertyInteractionEventType,getterFacet,servicesInjector,getSpecificationLoader(),holder);
  }
  FacetUtil.addFacet(propertyInteractionFacet);
  final PostsPropertyChangedEvent postsPropertyChangedEvent=Annotations.getAnnotation(method,PostsPropertyChangedEvent.class);
  final PropertySetterFacet setterFacet=holder.getFacet(PropertySetterFacet.class);
  if (setterFacet != null) {
    final PropertySetterFacetForInteractionAbstract replacementFacet;
    if (propertyInteraction != null) {
      replacementFacet=new PropertySetterFacetForPropertyInteractionAnnotation(propertyInteractionEventType,getterFacet,setterFacet,propertyInteractionFacet,holder,servicesInjector);
    }
 else     if (postsPropertyChangedEvent != null) {
      replacementFacet=new PropertySetterFacetForPostsPropertyChangedEventAnnotation(postsPropertyChangedEvent.value(),getterFacet,setterFacet,propertyInteractionFacet,holder,servicesInjector);
    }
 else {
      replacementFacet=new PropertySetterFacetForPropertyInteractionDefault(PropertyInteractionEvent.Default.class,getterFacet,setterFacet,propertyInteractionFacet,holder,servicesInjector);
    }
    FacetUtil.addFacet(replacementFacet);
  }
  final PropertyClearFacet clearFacet=holder.getFacet(PropertyClearFacet.class);
  if (clearFacet != null) {
    final PropertyClearFacetForInteractionAbstract replacementFacet;
    if (propertyInteraction != null) {
      replacementFacet=new PropertyClearFacetForPropertyInteractionAnnotation(propertyInteractionEventType,getterFacet,clearFacet,propertyInteractionFacet,holder,servicesInjector);
    }
 else     if (postsPropertyChangedEvent != null) {
      replacementFacet=new PropertyClearFacetForPostsPropertyChangedEventAnnotation(postsPropertyChangedEvent.value(),getterFacet,clearFacet,propertyInteractionFacet,holder,servicesInjector);
    }
 else {
      replacementFacet=new PropertyClearFacetForPropertyInteractionDefault(PropertyInteractionEvent.Default.class,getterFacet,clearFacet,propertyInteractionFacet,holder,servicesInjector);
    }
    FacetUtil.addFacet(replacementFacet);
  }
}
