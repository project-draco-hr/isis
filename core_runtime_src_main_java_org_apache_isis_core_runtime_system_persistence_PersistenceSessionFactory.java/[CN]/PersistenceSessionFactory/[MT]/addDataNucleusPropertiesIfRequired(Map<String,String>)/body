{
  putIfNotPresent(props,PropertyNames.PROPERTY_OBJECT_PROVIDER_CLASS_NAME,JDOStateManagerForIsis.class.getName());
  putIfNotPresent(props,"javax.jdo.PersistenceManagerFactoryClass",JDOPersistenceManagerFactory.class.getName());
  putIfNotPresent(props,PropertyNames.PROPERTY_SCHEMA_AUTOCREATE_SCHEMA,Boolean.FALSE.toString());
  putIfNotPresent(props,PropertyNames.PROPERTY_SCHEMA_VALIDATE_ALL,Boolean.TRUE.toString());
  putIfNotPresent(props,PropertyNames.PROPERTY_CACHE_L2_TYPE,"none");
  putIfNotPresent(props,PropertyNames.PROPERTY_PERSISTENCE_UNIT_LOAD_CLASSES,Boolean.TRUE.toString());
  String connectionFactoryName=props.get(PropertyNames.PROPERTY_CONNECTION_FACTORY_NAME);
  if (connectionFactoryName != null) {
    String connectionFactory2Name=props.get(PropertyNames.PROPERTY_CONNECTION_FACTORY2_NAME);
    String transactionType=props.get("javax.jdo.option.TransactionType");
    if (transactionType == null) {
      LOG.info("found non-JTA JNDI datasource (" + connectionFactoryName + ")");
      if (connectionFactory2Name != null) {
        LOG.warn("found non-JTA JNDI datasource (" + connectionFactoryName + "); second '-nontx' JNDI datasource configured but will not be used ("+ connectionFactory2Name+ ")");
      }
    }
 else     LOG.info("found JTA JNDI datasource (" + connectionFactoryName + ")");
    if (connectionFactory2Name == null) {
      LOG.error("found JTA JNDI datasource (" + connectionFactoryName + ") but second '-nontx' JNDI datasource *not* found");
    }
 else {
      LOG.info("... and second '-nontx' JNDI datasource found; " + connectionFactory2Name);
    }
    return;
  }
 else {
    LOG.info("did *not* find JNDI datasource; will use JDBC");
    putIfNotPresent(props,"javax.jdo.option.ConnectionDriverName","org.hsqldb.jdbcDriver");
    putIfNotPresent(props,"javax.jdo.option.ConnectionURL","jdbc:hsqldb:mem:test");
    putIfNotPresent(props,"javax.jdo.option.ConnectionUserName","sa");
    putIfNotPresent(props,"javax.jdo.option.ConnectionPassword","");
  }
}
