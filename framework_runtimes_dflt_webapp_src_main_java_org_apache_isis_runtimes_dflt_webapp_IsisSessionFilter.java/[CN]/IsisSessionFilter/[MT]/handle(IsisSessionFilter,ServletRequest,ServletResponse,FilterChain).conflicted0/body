{
  final HttpServletRequest httpRequest=(HttpServletRequest)request;
  final HttpServletResponse httpResponse=(HttpServletResponse)response;
  if (requestIsIgnoreExtension(filter,httpRequest)) {
    try {
      chain.doFilter(request,response);
      return;
    }
  finally {
      closeSession();
    }
  }
  if (ResourceCachingFilter.isCachedResource(httpRequest)) {
    try {
      chain.doFilter(request,response);
      return;
    }
  finally {
      closeSession();
    }
  }
  final AuthenticationSession validSession=filter.authSessionStrategy.lookupValid(request,response);
  if (validSession != null) {
    filter.authSessionStrategy.bind(request,response,validSession);
    openSession(validSession);
    SESSION_IN_PROGRESS.setOn(request);
    try {
      chain.doFilter(request,response);
    }
  finally {
      UNDEFINED.setOn(request);
      closeSession();
    }
    return;
  }
  try {
    NO_SESSION_SINCE_NOT_AUTHENTICATED.setOn(request);
    filter.whenNoSession.handle(filter,httpRequest,httpResponse,chain);
  }
 catch (  RuntimeException ex) {
    if (filter.redirectToOnException != null) {
      redirect(httpRequest,httpResponse,filter.redirectToOnException);
      return;
    }
    throw ex;
  }
catch (  IOException ex) {
    if (filter.redirectToOnException != null) {
      redirect(httpRequest,httpResponse,filter.redirectToOnException);
      return;
    }
    throw ex;
  }
catch (  ServletException ex) {
    if (filter.redirectToOnException != null) {
      redirect(httpRequest,httpResponse,filter.redirectToOnException);
      return;
    }
    throw ex;
  }
 finally {
    UNDEFINED.setOn(request);
  }
}
