{
  if (!connection.hasTable(table)) {
    StringBuffer sql=new StringBuffer();
    sql.append("create table ");
    sql.append(quote(table));
    sql.append(" (");
    for (int f=0; f < oneToOnefields.length; f++) {
      NakedObjectField field=oneToOnefields[f];
      String type;
      if (field.isValue()) {
        ValueMapperLookup mappers=ValueMapperLookup.getInstance();
        ValueMapper mapper=mappers.mapperFor(oneToOnefields[f].getSpecification());
        if (mapper == null) {
          throw new SqlObjectStoreException("No type specified for " + oneToOnefields[f].getSpecification().getFullName());
        }
        type=mapper.columnType();
      }
 else       if (field.isObject()) {
        type="INT";
      }
 else {
        throw new SqlObjectStoreException("Can't map field to column: " + field);
      }
      sql.append(quote(columnNames[f]));
      sql.append(" ");
      sql.append(type);
      sql.append(",");
    }
    sql.append(quote(idColumn));
    sql.append(" int");
    sql.append(",");
    sql.append(quote(versionColumn));
    sql.append(" bigint");
    sql.append(",");
    sql.append(quote(lastActivityUserColumn));
    sql.append(" varchar(32)");
    sql.append(",");
    sql.append(quote(lastActivityDateColumn));
    sql.append(" timestamp)");
    connection.begin();
    connection.update(sql.toString());
    connection.commit();
  }
  for (int i=0; collectionMappers != null && i < collectionMappers.length; i++) {
    if (collectionMappers[i].needsTables(connection)) {
      collectionMappers[i].createTables(connection);
    }
  }
}
