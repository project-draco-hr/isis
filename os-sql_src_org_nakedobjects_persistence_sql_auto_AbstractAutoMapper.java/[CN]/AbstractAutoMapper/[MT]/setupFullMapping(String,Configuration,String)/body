{
  NakedObjectField[] allFields=nakedClass.getFields();
  int simpleFieldCount=0;
  int collectionFieldCount=0;
  for (int i=0; i < allFields.length; i++) {
    if (allFields[i].isDerived()) {
      continue;
    }
 else     if (allFields[i].isCollection()) {
      collectionFieldCount++;
    }
 else {
      simpleFieldCount++;
    }
  }
  columnNames=new String[simpleFieldCount];
  fields=new NakedObjectField[simpleFieldCount];
  collectionFields=new NakedObjectField[collectionFieldCount];
  collectionMappers=new CollectionMapper[collectionFieldCount];
  Properties collectionMappings=configParameters.getPropertiesStrippingPrefix(parameterBase + "collection");
  for (int i=0, simpleFieldNo=0, collectionFieldNo=0; i < allFields.length; i++) {
    if (allFields[i].isDerived()) {
      continue;
    }
 else     if (allFields[i].isCollection()) {
      collectionFields[collectionFieldNo]=allFields[i];
      String type=collectionMappings.getProperty(allFields[i].getName());
      if (type == null || type.equals("association-table")) {
        collectionMappers[collectionFieldNo]=new AutoAssociationMapper(this,nakedClass,collectionFields[collectionFieldNo]);
      }
 else       if (type.equals("fk-table")) {
        String property=parameterBase + allFields[i].getName() + ".element-type";
        String elementType=configParameters.getString(property);
        if (elementType == null) {
          throw new SqlObjectStoreException("Expected property " + property);
        }
        collectionMappers[collectionFieldNo]=new ReversedAutoAssociationMapper(elementType,collectionFields[collectionFieldNo],parameterBase);
      }
 else {
        throw new NotImplementedException("for " + type);
      }
      collectionFieldNo++;
    }
 else     if (allFields[i].isObject()) {
      columnNames[simpleFieldNo]="FK" + fieldName(allFields[i]);
      fields[simpleFieldNo]=allFields[i];
      simpleFieldNo++;
    }
 else {
      columnNames[simpleFieldNo]=fieldName(allFields[i]);
      fields[simpleFieldNo]=allFields[i];
      simpleFieldNo++;
    }
  }
  lastActivityColumn="lastActivity";
  Properties columnMappings=configParameters.getPropertiesStrippingPrefix(parameterBase + "column");
  for (Enumeration keys=columnMappings.keys(); keys.hasMoreElements(); ) {
    String columnName=(String)keys.nextElement();
    String fieldName=columnMappings.getProperty(columnName);
    columnNames[findMatchingField(fieldName)]=columnName;
    if (fieldName.equalsIgnoreCase("lastActivity")) {
      lastActivityColumn=columnName;
    }
  }
}
