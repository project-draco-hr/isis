{
  if (alreadyPersistedOrNotPersistableOrServiceOrStandalone(adapter)) {
    return;
  }
  if (adapter.isPersistent()) {
    return;
  }
  LOG.info("persist " + adapter);
  CallbackUtils.callCallback(adapter,PersistingCallbackFacet.class);
  adapter.changeState(ResolveState.RESOLVED);
  adapter.changeState(ResolveState.UPDATING);
  toPersistObjectSet.addPersistedObject(adapter);
  final ObjectAssociation[] fields=adapter.getSpecification().getAssociations();
  for (int i=0; i < fields.length; i++) {
    final ObjectAssociation association=fields[i];
    if (association.isNotPersisted()) {
      continue;
    }
    if (association.isOneToManyAssociation()) {
    }
 else {
      processOneToOneAssociation(adapter,toPersistObjectSet,association);
    }
  }
  for (int i=0; i < fields.length; i++) {
    final ObjectAssociation field=fields[i];
    if (field.isNotPersisted()) {
      continue;
    }
    if (field.isOneToManyAssociation()) {
      processOneToManyAssociation(adapter,toPersistObjectSet,field);
    }
 else {
    }
  }
  CallbackUtils.callCallback(adapter,PersistedCallbackFacet.class);
}
