{
  if (action == null) {
    return null;
  }
  final CommandReification command=action.command();
  if (command == null) {
    return null;
  }
  final CommandPersistence commandPersistence=action.commandPersistence();
  final Persistence persistence=CommandPersistence.from(commandPersistence);
  final CommandExecuteIn commandExecuteIn=action.commandExecuteIn();
  final ExecuteIn executeIn=CommandExecuteIn.from(commandExecuteIn);
switch (command) {
case AS_CONFIGURED:
    final ActionSemanticsFacet actionSemanticsFacet=holder.getFacet(ActionSemanticsFacet.class);
  if (actionSemanticsFacet == null) {
    throw new IllegalStateException("Require ActionSemanticsFacet in order to process");
  }
if (holder.containsDoOpFacet(CommandFacet.class)) {
  return null;
}
final ActionConfiguration setting=ActionConfiguration.parse(configuration);
switch (setting) {
case NONE:
return null;
case IGNORE_SAFE:
if (actionSemanticsFacet.value() == ActionSemantics.Of.SAFE) {
return null;
}
default :
return new CommandFacetForActionAnnotation(persistence,executeIn,Enablement.ENABLED,holder);
}
case DISABLED:
return null;
case ENABLED:
return new CommandFacetForActionAnnotation(persistence,executeIn,Enablement.ENABLED,holder);
}
return null;
}
