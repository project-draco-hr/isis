{
  super(id,entityCollectionModel);
  outerDiv=new WebMarkupContainer(ID_STANDALONE_COLLECTION);
  addOrReplace(outerDiv);
  ActionModel actionModel=entityCollectionModel.getActionModelHint();
  ObjectAction action=actionModel.getActionMemento().getAction(entityCollectionModel.getSpecificationLoader());
  outerDiv.addOrReplace(new Label(StandaloneCollectionPanel.ID_ACTION_NAME,Model.of(action.getName())));
  CssClassAppender.appendCssClassTo(outerDiv,action.getOnType().getFullIdentifier().replace('.','-') + "_" + action.getId());
  CssClassAppender.appendCssClassTo(outerDiv,entityCollectionModel.getTypeOfSpecification().getFullIdentifier().replace('.','-'));
  this.actionPromptModalWindow=ActionPromptModalWindow.newModalWindow(ID_ACTION_PROMPT_MODAL_WINDOW);
  outerDiv.addOrReplace(actionPromptModalWindow);
  final CollectionSelectorHelper selectorHelper=new CollectionSelectorHelper(entityCollectionModel,getComponentFactoryRegistry());
  final List<ComponentFactory> componentFactories=selectorHelper.getComponentFactories();
  if (componentFactories.size() <= 1) {
    Components.permanentlyHide(outerDiv,ID_SELECTOR_DROPDOWN);
    this.selectorDropdownPanel=null;
  }
 else {
    CollectionSelectorPanel selectorDropdownPanel=new CollectionSelectorPanel(ID_SELECTOR_DROPDOWN,entityCollectionModel);
    final Model<ComponentFactory> componentFactoryModel=new Model<>();
    final String selected=selectorHelper.honourViewHintElseDefault(selectorDropdownPanel);
    ComponentFactory selectedComponentFactory=selectorHelper.find(selected);
    componentFactoryModel.setObject(selectedComponentFactory);
    outerDiv.setOutputMarkupId(true);
    outerDiv.addOrReplace(selectorDropdownPanel);
    this.selectorDropdownPanel=selectorDropdownPanel;
  }
  final ComponentFactoryRegistry componentFactoryRegistry=getComponentFactoryRegistry();
  componentFactoryRegistry.addOrReplaceComponent(outerDiv,ComponentType.COLLECTION_CONTENTS,entityCollectionModel);
  bulkActionsHelper=new BulkActionsHelper(entityCollectionModel);
}
