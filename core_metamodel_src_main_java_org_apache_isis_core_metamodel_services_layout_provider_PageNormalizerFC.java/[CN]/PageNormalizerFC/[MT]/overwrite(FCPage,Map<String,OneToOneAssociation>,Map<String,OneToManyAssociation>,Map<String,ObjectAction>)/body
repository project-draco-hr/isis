{
  final Map<String,int[]> propertySequenceByGroup=Maps.newHashMap();
  page.visit(new FCPage.VisitorAdapter(){
    private int collectionSequence=1;
    private int actionDomainObjectSequence=1;
    private int actionPropertyGroupSequence=1;
    private int actionPropertySequence=1;
    private int actionCollectionSequence=1;
    @Override public void visit(    final ActionLayoutData actionLayoutData){
      final ActionOwner actionOwner=actionLayoutData.getOwner();
      final ObjectAction objectAction=objectActionById.get(actionLayoutData.getId());
      if (objectAction == null) {
        return;
      }
      final String memberOrderName;
      final int memberOrderSequence;
      if (actionOwner instanceof FieldSet) {
        final FieldSet fieldSet=(FieldSet)actionOwner;
        final List<PropertyLayoutData> properties=fieldSet.getProperties();
        final PropertyLayoutData propertyLayoutData=properties.get(0);
        memberOrderName=propertyLayoutData.getId();
        memberOrderSequence=actionPropertyGroupSequence++;
      }
 else       if (actionOwner instanceof PropertyLayoutData) {
        final PropertyLayoutData propertyLayoutData=(PropertyLayoutData)actionOwner;
        memberOrderName=propertyLayoutData.getId();
        memberOrderSequence=actionPropertySequence++;
      }
 else       if (actionOwner instanceof CollectionLayoutData) {
        final CollectionLayoutData collectionLayoutData=(CollectionLayoutData)actionOwner;
        memberOrderName=collectionLayoutData.getId();
        memberOrderSequence=actionCollectionSequence++;
      }
 else {
        memberOrderName=null;
        memberOrderSequence=actionDomainObjectSequence++;
      }
      FacetUtil.addFacet(new MemberOrderFacetXml(memberOrderName,"" + memberOrderSequence,translationService,objectAction));
      if (actionOwner instanceof FieldSet) {
        if (actionLayoutData.getPosition() == null || actionLayoutData.getPosition() == org.apache.isis.applib.annotation.ActionLayout.Position.BELOW || actionLayoutData.getPosition() == org.apache.isis.applib.annotation.ActionLayout.Position.RIGHT) {
          actionLayoutData.setPosition(org.apache.isis.applib.annotation.ActionLayout.Position.PANEL);
        }
      }
 else       if (actionOwner instanceof PropertyLayoutData) {
        if (actionLayoutData.getPosition() == null || actionLayoutData.getPosition() == org.apache.isis.applib.annotation.ActionLayout.Position.PANEL_DROPDOWN || actionLayoutData.getPosition() == org.apache.isis.applib.annotation.ActionLayout.Position.PANEL) {
          actionLayoutData.setPosition(org.apache.isis.applib.annotation.ActionLayout.Position.BELOW);
        }
      }
 else {
        actionLayoutData.setPosition(null);
      }
      FacetUtil.addFacet(ActionPositionFacetForActionXml.create(actionLayoutData,objectAction));
      FacetUtil.addFacet(BookmarkPolicyFacetForActionXml.create(actionLayoutData,objectAction));
      FacetUtil.addFacet(CssClassFacetForActionXml.create(actionLayoutData,objectAction));
      FacetUtil.addFacet(CssClassFaFacetForActionXml.create(actionLayoutData,objectAction));
      FacetUtil.addFacet(DescribedAsFacetForActionXml.create(actionLayoutData,objectAction));
      FacetUtil.addFacet(HiddenFacetForActionLayoutXml.create(actionLayoutData,objectAction));
      FacetUtil.addFacet(NamedFacetForActionXml.create(actionLayoutData,objectAction));
    }
    @Override public void visit(    final PropertyLayoutData propertyLayoutData){
      final OneToOneAssociation oneToOneAssociation=oneToOneAssociationById.get(propertyLayoutData.getId());
      if (oneToOneAssociation == null) {
        return;
      }
      FacetUtil.addFacet(CssClassFacetForPropertyXml.create(propertyLayoutData,oneToOneAssociation));
      FacetUtil.addFacet(DescribedAsFacetForPropertyXml.create(propertyLayoutData,oneToOneAssociation));
      FacetUtil.addFacet(HiddenFacetForPropertyXml.create(propertyLayoutData,oneToOneAssociation));
      FacetUtil.addFacet(LabelAtFacetForPropertyXml.create(propertyLayoutData,oneToOneAssociation));
      FacetUtil.addFacet(MultiLineFacetForPropertyXml.create(propertyLayoutData,oneToOneAssociation));
      FacetUtil.addFacet(NamedFacetForPropertyXml.create(propertyLayoutData,oneToOneAssociation));
      FacetUtil.addFacet(RenderedAdjustedFacetForPropertyXml.create(propertyLayoutData,oneToOneAssociation));
      FacetUtil.addFacet(TypicalLengthFacetForPropertyXml.create(propertyLayoutData,oneToOneAssociation));
      final FieldSet fieldSet=propertyLayoutData.getOwner();
      final String groupName=fieldSet.getName();
      final String sequence=nextInSequenceFor(groupName,propertySequenceByGroup);
      FacetUtil.addFacet(new MemberOrderFacetXml(groupName,sequence,translationService,oneToOneAssociation));
    }
    @Override public void visit(    final CollectionLayoutData collectionLayoutData){
      final OneToManyAssociation oneToManyAssociation=oneToManyAssociationById.get(collectionLayoutData.getId());
      if (oneToManyAssociation == null) {
        return;
      }
      FacetUtil.addFacet(CssClassFacetForCollectionXml.create(collectionLayoutData,oneToManyAssociation));
      FacetUtil.addFacet(DefaultViewFacetForCollectionXml.create(collectionLayoutData,oneToManyAssociation));
      FacetUtil.addFacet(DescribedAsFacetForCollectionXml.create(collectionLayoutData,oneToManyAssociation));
      FacetUtil.addFacet(HiddenFacetForCollectionXml.create(collectionLayoutData,oneToManyAssociation));
      FacetUtil.addFacet(NamedFacetForCollectionXml.create(collectionLayoutData,oneToManyAssociation));
      FacetUtil.addFacet(PagedFacetForCollectionXml.create(collectionLayoutData,oneToManyAssociation));
      FacetUtil.addFacet(SortedByFacetForCollectionXml.create(collectionLayoutData,oneToManyAssociation));
      final String groupName=collectionLayoutData.getId();
      final String sequence="" + collectionSequence++;
      FacetUtil.addFacet(new MemberOrderFacetXml(groupName,sequence,translationService,oneToManyAssociation));
      final MemberRegionOwner memberRegionOwner=collectionLayoutData.getOwner();
      if (memberRegionOwner instanceof FCColumn) {
        final FCColumn FCColumn=(FCColumn)memberRegionOwner;
        final FCColumnOwner holder=FCColumn.getOwner();
        if (holder instanceof FCTab) {
          final FCTab FCTab=(FCTab)holder;
          if (FCTab.getContents().size() == 1 && Strings.isNullOrEmpty(FCTab.getName())) {
            final String collectionName=oneToManyAssociation.getName();
            FCTab.setName(collectionName);
          }
        }
      }
    }
  }
);
}
