{
  String id=request.getOptionalProperty(OBJECT);
  String method=request.getOptionalProperty(METHOD + "-visible");
  if (method != null) {
    ObjectAdapter object=MethodsUtils.findObject(request.getContext(),id);
    ObjectAction objectAction=object.getSpecification().getObjectAction(ObjectActionType.USER,method,new ObjectSpecification[0]);
    Consent visible=objectAction.isVisible(IsisContext.getAuthenticationSession(),object);
    processTags(visible.isAllowed(),request);
    return;
  }
  method=request.getOptionalProperty(METHOD + "-usable");
  if (method != null) {
    ObjectAdapter object=MethodsUtils.findObject(request.getContext(),id);
    ObjectAction objectAction=object.getSpecification().getObjectAction(ObjectActionType.USER,method,new ObjectSpecification[0]);
    Consent usable=objectAction.isUsable(IsisContext.getAuthenticationSession(),object);
    processTags(usable.isAllowed(),request);
    return;
  }
  method=request.getOptionalProperty(METHOD + "-exists");
  if (method != null) {
    ObjectAdapter object=MethodsUtils.findObject(request.getContext(),id);
    List<? extends ObjectAction> objectActions=object.getSpecification().getObjectActions(ObjectActionType.USER);
    boolean methodExists=false;
    for (    ObjectAction objectAssociation : objectActions) {
      if (objectAssociation.getId().equals(method)) {
        methodExists=true;
        break;
      }
    }
    processTags(methodExists,request);
    return;
  }
  String field=request.getOptionalProperty(FIELD + "-visible");
  if (field != null) {
    ObjectAdapter object=MethodsUtils.findObject(request.getContext(),id);
    ObjectAssociation objectField=object.getSpecification().getAssociation(field);
    Consent visible=objectField.isVisible(IsisContext.getAuthenticationSession(),object);
    processTags(visible.isAllowed(),request);
    return;
  }
  field=request.getOptionalProperty(FIELD + "-exists");
  if (field != null) {
    ObjectAdapter object=MethodsUtils.findObject(request.getContext(),id);
    List<? extends ObjectAssociation> objectFields=object.getSpecification().getAssociations();
    boolean fieldExists=false;
    for (    ObjectAssociation objectAssociation : objectFields) {
      if (objectAssociation.getId().equals(field)) {
        fieldExists=true;
        break;
      }
    }
    processTags(fieldExists,request);
    return;
  }
  field=request.getOptionalProperty(FIELD + "-editable");
  if (field != null) {
    ObjectAdapter object=MethodsUtils.findObject(request.getContext(),id);
    ObjectAssociation objectField=object.getSpecification().getAssociation(field);
    Consent usable=objectField.isUsable(IsisContext.getAuthenticationSession(),object);
    processTags(usable.isAllowed(),request);
    return;
  }
  field=request.getOptionalProperty(FIELD + "-empty");
  if (field != null) {
    ObjectAdapter object=MethodsUtils.findObject(request.getContext(),id);
    ObjectAssociation objectField=object.getSpecification().getAssociation(field);
    IsisContext.getPersistenceSession().resolveField(object,objectField);
    ObjectAdapter fld=objectField.get(object);
    if (fld == null) {
      processTags(true,request);
    }
 else {
      CollectionFacet facet=fld.getSpecification().getFacet(CollectionFacet.class);
      boolean isEmpty=facet != null && facet.size(fld) == 0;
      processTags(isEmpty,request);
    }
    return;
  }
  field=request.getOptionalProperty(FIELD + "-set");
  if (field != null) {
    ObjectAdapter object=MethodsUtils.findObject(request.getContext(),id);
    ObjectAssociation objectField=object.getSpecification().getAssociation(field);
    IsisContext.getPersistenceSession().resolveField(object,objectField);
    ObjectAdapter fld=objectField.get(object);
    Object fieldValue=fld.getObject();
    if (fieldValue instanceof Boolean) {
      processTags(((Boolean)fieldValue).booleanValue(),request);
    }
 else {
      processTags(true,request);
    }
    return;
  }
  String persistent=request.getOptionalProperty("persistent");
  if (persistent != null) {
    ObjectAdapter object=request.getContext().getMappedObjectOrResult(persistent);
    processTags(object.isPersistent(),request);
    return;
  }
  String type=request.getOptionalProperty(TYPE);
  if (type != null) {
    ObjectAdapter object=MethodsUtils.findObject(request.getContext(),id);
    Class<?> cls=forClass(request);
    boolean hasType=cls == null || cls.isAssignableFrom(object.getObject().getClass());
    processTags(hasType,request);
    return;
  }
  if (request.isPropertySpecified("empty")) {
    if (request.isPropertySet("empty")) {
      String collection=request.getOptionalProperty("empty");
      if (collection != null) {
        ObjectAdapter object=request.getContext().getMappedObjectOrResult(collection);
        CollectionFacet facet=object.getSpecification().getFacet(CollectionFacet.class);
        processTags(facet.size(object) == 0,request);
      }
    }
 else {
      processTags(true,request);
    }
    return;
  }
  if (request.isPropertySpecified("set")) {
    boolean valuePresent=request.isPropertySet("set");
    processTags(valuePresent,request);
    return;
  }
  throw new ScimpiException("No condition in " + getName());
}
