{
  super(id,new ListOfLinksModel(links));
  this.linkAndLabels=getModel().getObject();
  final WebMarkupContainer container=new WebMarkupContainer(ID_ADDITIONAL_LINK_LIST);
  addOrReplace(container);
  container.setOutputMarkupId(true);
  setOutputMarkupId(true);
  final ListView<LinkAndLabel> listView=new ListView<LinkAndLabel>(ID_ADDITIONAL_LINK_ITEM,this.linkAndLabels){
    private static final long serialVersionUID=1L;
    @Override protected void populateItem(    ListItem<LinkAndLabel> item){
      final LinkAndLabel linkAndLabel=item.getModelObject();
      final AbstractLink link=linkAndLabel.getLink();
      final String itemTitle=first(linkAndLabel.getDisabledReasonIfAny(),linkAndLabel.getDescriptionIfAny());
      if (itemTitle != null) {
        item.add(new AttributeAppender("title",itemTitle));
      }
      final Label viewTitleLabel=new Label(ID_ADDITIONAL_LINK_TITLE,linkAndLabel.getLabel());
      if (linkAndLabel.isBlobOrClob()) {
        link.add(new CssClassAppender("noVeil"));
      }
      if (linkAndLabel.isPrototype()) {
        link.add(new CssClassAppender("prototype"));
      }
      link.add(new CssClassAppender(linkAndLabel.getActionIdentifier()));
      final String cssClass=linkAndLabel.getCssClass();
      if (cssClass != null) {
        link.add(new CssClassAppender(cssClass));
      }
      viewTitleLabel.add(new CssClassAppender(StringExtensions.asLowerDashed(linkAndLabel.getLabel())));
      link.addOrReplace(viewTitleLabel);
      final String cssClassFa=linkAndLabel.getCssClassFa();
      if (!Strings.isNullOrEmpty(cssClassFa)) {
        final ActionLayout.CssClassFaPosition position=linkAndLabel.getCssClassFaPosition();
        viewTitleLabel.add(new CssClassFaBehavior(cssClassFa,position));
      }
      item.addOrReplace(link);
    }
  }
;
  container.addOrReplace(listView);
}
