{
  LOG.debug("reflecting on " + cls);
  String reflectorClassName=cls.getReflector().stringValue();
  String nakedObjectClassName=cls.getName().stringValue();
  Reflector reflector;
  Class reflectorClass;
  Constructor cons=null;
  try {
    reflectorClass=Class.forName(reflectorClassName);
    cons=reflectorClass.getConstructor(new Class[]{String.class});
    try {
      reflector=(Reflector)cons.newInstance(new Object[]{nakedObjectClassName});
    }
 catch (    InvocationTargetException e) {
      if (e.getTargetException() instanceof ClassNotFoundException) {
        throw (ClassNotFoundException)e.getTargetException();
      }
 else {
        throw new NakedObjectRuntimeException("failed to create reflector " + reflectorClassName + " for "+ nakedObjectClassName,e);
      }
    }
  }
 catch (  InstantiationException e) {
    throw new NakedObjectRuntimeException("Failed to instantiate class: " + cls,e);
  }
catch (  IllegalAccessException e) {
    throw new NakedObjectRuntimeException("Unable to access class or constructor: " + cls,e);
  }
catch (  SecurityException e) {
    throw new NakedObjectRuntimeException("",e);
  }
catch (  NoSuchMethodException e) {
    throw new NakedObjectRuntimeException("No default constructor in " + cls,e);
  }
catch (  IllegalArgumentException e) {
    throw new NakedObjectRuntimeException(e.getMessage(),e);
  }
catch (  ClassNotFoundException e) {
    throw new NakedObjectRuntimeException("Class not found: " + cls,e);
  }
  String nakedClassName=nakedObjectClassName;
  ActionDelegate delegates[];
  delegates=reflector.actions(Reflector.OBJECT);
  String[] order=reflector.actionSortOrder();
  Action[] objectActions=createActions(isRemote,reflector,nakedClassName,delegates,order);
  delegates=reflector.actions(Reflector.CLASS);
  order=reflector.classActionSortOrder();
  Action[] classActions=createActions(isRemote,reflector,nakedClassName,delegates,order);
  MemberIf fieldDelegates[]=reflector.fields();
  Field[] fieldVector=createFields(fieldDelegates,isRemote);
  Field[] fields=(Field[])orderArray(Field.class,fieldVector,reflector.fieldSortOrder(),nakedClassName);
  String superclass=reflector.getSuperclass();
  cls.init(reflector,superclass,fields,objectActions,classActions);
}
