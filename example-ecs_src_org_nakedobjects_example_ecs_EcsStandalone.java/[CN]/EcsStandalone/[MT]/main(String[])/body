{
  BasicConfigurator.configure();
  ConfigurationFactory.setConfiguration(new Configuration(DEFAULT_CONFIG));
  if (ConfigurationFactory.getConfiguration().getString(SHOW_EXPLORATION_OPTIONS) == null) {
    ConfigurationFactory.getConfiguration().add(SHOW_EXPLORATION_OPTIONS,"yes");
  }
  PropertyConfigurator.configure(ConfigurationFactory.getConfiguration().getProperties("log4j"));
  Logger log=Logger.getLogger("Naked Objects");
  log.info(AboutNakedObjects.getName());
  log.info(AboutNakedObjects.getVersion());
  log.info(AboutNakedObjects.getBuildId());
  setUpLocale();
  SplashWindow splash=null;
  boolean noSplash=ConfigurationFactory.getConfiguration().getBoolean("nosplash",false);
  if (!noSplash) {
    splash=new SplashWindow();
  }
  try {
    JavaBusinessObjectContainer container=new JavaBusinessObjectContainer();
    ViewUpdateNotifier updateNotifier=new ViewUpdateNotifier();
    LoadedObjectsHashtable loadedObjectsHashtable=new LoadedObjectsHashtable();
    JavaObjectFactory objectFactory=new JavaObjectFactory();
    objectFactory.setContainer(container);
    container.setObjectFactory(objectFactory);
    TransientObjectStore objectStore=new TransientObjectStore();
    objectStore.setLoadedObjects(loadedObjectsHashtable);
    OidGenerator oidGenerator=new TimeBasedOidGenerator();
    LocalObjectManager objectManager=new LocalObjectManager();
    objectManager.setObjectStore(objectStore);
    objectManager.setNotifier(updateNotifier);
    objectManager.setFactory(objectFactory);
    objectManager.setOidGenerator(oidGenerator);
    objectManager.setLoadedObjects(loadedObjectsHashtable);
    container.setObjectManger(objectManager);
    new NakedObjectSpecificationLoaderImpl();
    LocalReflectionFactory reflectionFactory=new LocalReflectionFactory();
    JavaReflectorFactory reflectorFactory=new JavaReflectorFactory();
    PojoAdapter.setPojoAdapterHash(new PojoAdapterHashImpl());
    PojoAdapter.setReflectorFactory(reflectorFactory);
    NakedObjectSpecificationImpl.setReflectionFactory(reflectionFactory);
    NakedObjectSpecificationLoaderImpl.setReflectorFactory(reflectorFactory);
    reflectorFactory.setObjectFactory(objectFactory);
    NakedObjectContext context=new NakedObjectContext(objectManager);
    SimpleExplorationSetup explorationSetup=new SimpleExplorationSetup();
    explorationSetup.setContext(context);
    explorationSetup.addFixture(new EcsFixture());
    ViewerFrame frame=new ViewerFrame();
    frame.setTitle("ECS");
    Viewer viewer=new Viewer();
    viewer.setRenderingArea(frame);
    frame.setViewer(viewer);
    viewer.setListener(new ObjectViewingMechanismListener(){
      public void viewerClosing(){
        System.out.println("EXITED");
      }
    }
);
    InteractionSpy spy=new InteractionSpy();
    ViewerAssistant viewerAssistant=new ViewerAssistant();
    viewerAssistant.setViewer(viewer);
    viewerAssistant.setDebugFrame(spy);
    viewerAssistant.setUpdateNotifier(updateNotifier);
    viewer.setUpdateNotifier(updateNotifier);
    viewer.setSpy(spy);
    viewer.start();
    EcsContext applicationContext=new EcsContext();
    applicationContext.created();
    NakedObject rootObject=PojoAdapter.createNOAdapter(applicationContext);
    RootWorkspaceSpecification spec=new RootWorkspaceSpecification();
    View view=spec.createView(new RootObject(rootObject),null);
    viewer.setRootView(view);
    frame.setBounds(10,10,800,600);
    viewer.sizeChange();
    frame.show();
    explorationSetup.installFixtures();
  }
  finally {
    if (splash != null) {
      splash.toFront();
      splash.removeAfterDelay(3);
    }
  }
}
