{
  final Vector<ObjectAdapter> instances=new Vector<ObjectAdapter>();
  final StringBuffer sql=createSelectStatement();
  int initialLength=0;
  int foundFields=0;
  final ObjectAdapter pattern=query.getPattern();
  final Object o=pattern.getObject();
  final ObjectSpecification patternSpec=pattern.getSpecification();
  final List<ObjectAssociation> patternAssociations=patternSpec.getAssociations();
  for (  final ObjectAssociation patternAssoc : patternAssociations) {
    final Method method;
    final Identifier identifier=patternAssoc.getIdentifier();
    final String memberName=identifier.getMemberName();
    final String methodName=memberName.substring(0,1).toUpperCase() + memberName.substring(1);
    try {
      if (true) {
        final ObjectAdapter field=patternAssoc.get(pattern);
        if (field != null) {
          final String id=patternAssoc.getId();
          try {
            final ObjectAssociation oa=spec.getAssociation(id);
            final NotPersistedFacet fc=oa.getFacet(NotPersistedFacet.class);
            if (fc != null) {
              continue;
            }
          }
 catch (          final ObjectSpecificationException e) {
          }
          if (foundFields == 0) {
            sql.append(" WHERE ");
            initialLength=sql.length();
          }
          if (sql.length() > initialLength) {
            sql.append(" AND ");
          }
          final FieldMapping fieldMapping=fieldMappingFor(patternAssoc);
          if (fieldMapping != null) {
            fieldMapping.appendWhereClause(connector,sql,pattern);
          }
 else {
            final ObjectSpecification specification=patternAssoc.getSpecification();
            method=o.getClass().getMethod("get" + methodName,(Class<?>[])null);
            final Object res=InvokeUtils.invoke(method,o);
            if (specification.isValue()) {
              final String fieldName=Sql.sqlFieldName(identifier.getMemberName());
              sql.append(fieldName + "=?");
              connector.addToQueryValues(res);
            }
 else {
              throw new SqlObjectStoreException("Unhandled combination!");
            }
          }
          foundFields++;
        }
      }
    }
 catch (    final SecurityException e) {
      LOG.debug(e.getMessage());
    }
catch (    final NoSuchMethodException e) {
      LOG.info("Unable to invode method: get" + methodName + " in getInstances");
      LOG.debug(e.getMessage());
    }
  }
  loadInstancesToVector(connector,spec,completeSelectStatement(sql,query.getStart(),query.getCount()),instances);
  return instances;
}
