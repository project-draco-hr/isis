{
  Object oid=object.getOid();
  if (oid != null && !oid.equals(state.oid)) {
    throw new IllegalArgumentException("This memento can only be used to " + "update the naked object with the Oid " + state.oid);
  }
 else {
    if (!(state instanceof ObjectData)) {
      throw new NakedObjectRuntimeException("Expected an ObjectData but got " + state.getClass());
    }
 else {
      PojoAdapterFactory objectLoader=NakedObjects.getPojoAdapterFactory();
      objectLoader.loading(object,true);
      ObjectData od=(ObjectData)state;
      NakedObjectField[] fields=object.getSpecification().getFields();
      for (int i=0; i < fields.length; i++) {
        NakedObjectField field=fields[i];
        Object fieldData=od.getEntry(field.getName());
        if (!field.isDerived()) {
          if (field instanceof OneToManyAssociation) {
            updateOneToManyAssociation(object,(OneToManyAssociation)field,(InternalCollectionData)fieldData);
          }
 else           if (field instanceof OneToOneAssociation) {
            updateOneToOneAssociation(object,(OneToOneAssociation)field,(Data)fieldData);
          }
        }
      }
      objectLoader.loaded(object,true);
    }
    LOG.debug("object updated " + object.getOid());
  }
}
