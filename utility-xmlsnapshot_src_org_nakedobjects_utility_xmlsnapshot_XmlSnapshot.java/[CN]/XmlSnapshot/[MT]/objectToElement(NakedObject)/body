{
  LOG.debug("objectToElement(" + log("object",object) + ")");
  NakedObjectSpecification nos=object.getSpecification();
  LOG.debug("objectToElement(NO): create element and nof:title");
  Element element=schema.createElement(getXmlDocument(),nos.getShortName(),nos.getFullName(),nos.getSingularName(),nos.getPluralName());
  nofMeta.appendNofTitle(element,object.titleString());
  LOG.debug("objectToElement(NO): create XS element for NOF class");
  Element xsElement=schema.createXsElementForNofClass(getXsdDocument(),element,topLevelElementWritten,extensionsFor(nos));
  topLevelElementWritten=true;
  Place place=new Place(object,element);
  nofMeta.setAttributesForClass(element,oidOrHashCode(object).toString());
  NakedObjectField[] fields=nos.getFields();
  LOG.debug("objectToElement(NO): processing fields");
  eachField:   for (int i=0; i < fields.length; i++) {
    NakedObjectField field=fields[i];
    String fieldName=field.getName();
    LOG.debug("objectToElement(NO): " + log("field",fieldName));
    eachPreviousField:     for (int j=0; j < i; j++) {
      if (fieldName.equals(fields[i])) {
        LOG.debug("objectToElement(NO): " + log("field",fieldName) + " SKIPPED");
        continue eachField;
      }
    }
    Element xmlFieldElement=getXmlDocument().createElementNS(schema.getUri(),schema.getPrefix() + ":" + fieldName);
    Element xsdFieldElement=null;
    if (field.isValue()) {
      LOG.debug("objectToElement(NO): " + log("field",fieldName) + " is value");
      NakedObjectSpecification fieldNos=field.getSpecification();
      if (fieldNos != null && fieldNos.getFullName() != null && fieldNos.getFullName().endsWith("XmlValue")) {
        continue eachField;
      }
      OneToOneAssociation oneToOneAssociation=((OneToOneAssociation)field);
      Naked value=object.getField(oneToOneAssociation);
      NakedObjectSpecification valueNos=value.getSpecification();
      Element xmlValueElement=xmlFieldElement;
      if (value == null) {
        continue;
      }
      nofMeta.setAttributesForValue(xmlValueElement,valueNos.getShortName());
      boolean notEmpty=(value.titleString().length() > 0);
      if (notEmpty) {
        String valueStr=value.titleString();
        xmlValueElement.appendChild(getXmlDocument().createTextNode(valueStr));
      }
 else {
        nofMeta.setIsEmptyAttribute(xmlValueElement,true);
      }
      xsdFieldElement=schema.createXsElementForNofValue(xsElement,xmlValueElement,extensionsFor(oneToOneAssociation));
    }
 else     if (field instanceof OneToOneAssociation) {
      LOG.debug("objectToElement(NO): " + log("field",fieldName) + " is OneToOneAssociation");
      OneToOneAssociation oneToOneAssociation=((OneToOneAssociation)field);
      NakedObject referencedNakedObject=object.getAssociation(oneToOneAssociation);
      String fullyQualifiedClassName=nos.getFullName();
      Element xmlReferenceElement=xmlFieldElement;
      nofMeta.setAttributesForReference(xmlReferenceElement,schema.getPrefix(),fullyQualifiedClassName);
      if (referencedNakedObject != null) {
        nofMeta.appendNofTitle(xmlReferenceElement,referencedNakedObject.titleString());
      }
 else {
        nofMeta.setIsEmptyAttribute(xmlReferenceElement,true);
      }
      xsdFieldElement=schema.createXsElementForNofReference(xsElement,xmlReferenceElement,extensionsFor(oneToOneAssociation));
    }
 else     if (field instanceof OneToManyAssociation) {
      LOG.debug("objectToElement(NO): " + log("field",fieldName) + " is OneToManyAssociation");
      OneToManyAssociation oneToManyAssociation=(OneToManyAssociation)field;
      InternalCollection collection=(InternalCollection)oneToManyAssociation.get(object);
      NakedObjectSpecification referencedTypeNos=collection.getElementSpecification();
      String fullyQualifiedClassName=referencedTypeNos.getFullName();
      Element xmlCollectionElement=xmlFieldElement;
      nofMeta.setNofCollection(xmlCollectionElement,schema.getPrefix(),fullyQualifiedClassName,collection,addOids);
      xsdFieldElement=schema.createXsElementForNofCollection(xsElement,xmlCollectionElement,extensionsFor(oneToManyAssociation));
    }
 else {
      LOG.info("objectToElement(NO): " + log("field",fieldName) + " is unknown type; ignored");
      continue;
    }
    if (xsdFieldElement != null) {
      Place.setXsdElement(xmlFieldElement,xsdFieldElement);
    }
    LOG.debug("objectToElement(NO): invoking mergeTree for field");
    xmlFieldElement=mergeTree(element,xmlFieldElement);
    if (xsdFieldElement != null) {
      LOG.debug("objectToElement(NO): adding XS element for field to schema");
      schema.addFieldXsElement(xsElement,xsdFieldElement);
    }
  }
  return place;
}
