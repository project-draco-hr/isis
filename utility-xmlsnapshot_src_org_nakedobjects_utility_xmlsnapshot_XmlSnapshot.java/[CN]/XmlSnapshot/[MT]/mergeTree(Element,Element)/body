{
  LOG.debug("mergeTree(" + log("parent",parentElement) + andlog("child",childElement));
  String childElementOid=nofMeta.getAttribute(childElement,"oid");
  LOG.debug("mergeTree(El,El): " + log("childOid",childElementOid));
  if (childElementOid != null) {
    LOG.debug("mergeTree(El,El): check if child already there");
    Vector existingChildElements=elementsUnder(parentElement,childElement.getLocalName());
    for (Enumeration childEnum=existingChildElements.elements(); childEnum.hasMoreElements(); ) {
      Element possibleMatchingElement=(Element)childEnum.nextElement();
      String possibleMatchOid=nofMeta.getAttribute(possibleMatchingElement,"oid");
      if (possibleMatchOid == null || !possibleMatchOid.equals(childElementOid)) {
        continue;
      }
      LOG.debug("mergeTree(El,El): child already there; merging grandchildren");
      Element existingChildElement=possibleMatchingElement;
      Vector grandchildrenElements=elementsUnder(childElement,"*");
      for (Enumeration grandchildEnum=grandchildrenElements.elements(); grandchildEnum.hasMoreElements(); ) {
        Element grandchildElement=(Element)grandchildEnum.nextElement();
        childElement.removeChild(grandchildElement);
        LOG.debug("mergeTree(El,El): merging " + log("grandchild",grandchildElement));
        mergeTree(existingChildElement,grandchildElement);
      }
      return existingChildElement;
    }
  }
  parentElement.appendChild(childElement);
  return childElement;
}
