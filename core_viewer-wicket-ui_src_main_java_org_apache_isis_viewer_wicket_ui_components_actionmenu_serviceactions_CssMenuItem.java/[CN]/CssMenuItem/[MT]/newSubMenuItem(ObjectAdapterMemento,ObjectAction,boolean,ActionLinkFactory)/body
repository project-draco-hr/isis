{
  final ObjectAdapter adapter=targetAdapterMemento.getObjectAdapter(ConcurrencyChecking.CHECK,getPersistenceSession(),getSpecificationLoader());
  final Consent visibility=objectAction.isVisible(adapter,InteractionInitiatedBy.USER,ActionModel.WHERE_FOR_ACTION_INVOCATION);
  if (visibility.isVetoed()) {
    return null;
  }
  final LinkAndLabel linkAndLabel=actionLinkFactory.newLink(PageAbstract.ID_MENU_LINK,targetAdapterMemento,objectAction);
  if (linkAndLabel == null) {
    return null;
  }
  final AbstractLink link=linkAndLabel.getLink();
  final String actionLabel=linkAndLabel.getLabel();
  final Consent usability=objectAction.isUsable(adapter,InteractionInitiatedBy.USER,ActionModel.WHERE_FOR_ACTION_INVOCATION);
  final String reasonDisabledIfAny=usability.getReason();
  final DescribedAsFacet describedAsFacet=objectAction.getFacet(DescribedAsFacet.class);
  final String descriptionIfAny=describedAsFacet != null ? describedAsFacet.value() : null;
  Builder builder=newSubMenuItem(actionLabel).link(link).describedAs(descriptionIfAny).enabled(reasonDisabledIfAny).returnsBlobOrClob(ObjectAction.Utils.returnsBlobOrClob(objectAction)).prototyping(objectAction.isPrototype()).requiresSeparator(separator).withActionIdentifier(ObjectAction.Utils.actionIdentifierFor(objectAction)).withCssClass(ObjectAction.Utils.cssClassFor(objectAction,adapter)).withCssClassFa(ObjectAction.Utils.cssClassFaFor(objectAction)).withCssClassFaPosition(ObjectAction.Utils.cssClassFaPositionFor(objectAction));
  return builder;
}
