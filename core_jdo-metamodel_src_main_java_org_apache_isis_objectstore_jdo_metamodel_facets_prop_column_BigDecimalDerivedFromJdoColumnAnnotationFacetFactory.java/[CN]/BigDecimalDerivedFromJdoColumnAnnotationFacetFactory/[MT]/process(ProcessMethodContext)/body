{
  if (BigDecimal.class != processMethodContext.getMethod().getReturnType()) {
    return;
  }
  final FacetedMethod holder=processMethodContext.getFacetHolder();
  BigDecimalValueFacet existingFacet=(BigDecimalValueFacet)holder.getFacet(BigDecimalValueFacet.class);
  final Column jdoColumnAnnotation=Annotations.getAnnotation(processMethodContext.getMethod(),Column.class);
  if (jdoColumnAnnotation == null) {
    if (existingFacet != null && !existingFacet.isNoop()) {
    }
 else {
      final BigDecimalValueFacet facet=new BigDecimalFacetFallback(holder);
      FacetUtil.addFacet(facet);
    }
  }
 else {
    Integer existingLength=null;
    Integer existingScale=null;
    if (existingFacet != null && !existingFacet.isNoop()) {
      existingLength=existingFacet.getLength();
      existingScale=existingFacet.getScale();
    }
    Integer length=valueElseDefaults(jdoColumnAnnotation.length(),existingLength,DEFAULT_LENGTH);
    Integer scale=valueElseDefaults(jdoColumnAnnotation.scale(),existingScale,DEFAULT_SCALE);
    final BigDecimalValueFacet facet=new BigDecimalFacetDerivedFromJdoColumn(holder,length,scale);
    FacetUtil.addFacet(facet);
  }
}
