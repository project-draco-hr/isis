{
  if (line.trim().startsWith("#") || line.trim().length() == 0) {
    return;
  }
  final int pos=line.trim().indexOf(">");
  if (pos == -1) {
    final StringTokenizer tokens=new StringTokenizer(line.trim(),":",false);
    if (tokens.countTokens() != 2) {
      throw new IsisConfigurationException("Invalid line: " + line);
    }
    final String token1=tokens.nextToken();
    final String token2=tokens.nextToken();
    final Identifier identifier=memberFromString(token1.trim());
    final List<String> roles=tokenizeRoles(token2);
    final String identityString=identifier.toIdentityString(Identifier.CLASS_MEMBERNAME_PARAMETERS);
    map.put(identityString,roles);
  }
 else {
    final Map<String,List<String>> newRules=new HashMap<String,List<String>>();
    for (    final String name : map.keySet()) {
      final String originalName=line.trim().substring(0,pos);
      final String redirectedName=line.trim().substring(pos + 1);
      if (name.startsWith(redirectedName)) {
        final String id=originalName + name.substring(redirectedName.length());
        final List<String> roles=map.get(name);
        newRules.put(id,roles);
      }
    }
    map.putAll(newRules);
  }
}
