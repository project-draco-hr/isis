{
  final ObjectAdapter movieAdapter=system.createPersistentTestObject();
  mockery.checking(new Expectations(){
{
      final DummyIdentityData identityOfObjectToDelete=encoderShouldCreateIdentityDataForMovie(movieAdapter);
      distributionShouldExecuteClientActionForDeletedMovie(identityOfObjectToDelete);
    }
    private DummyIdentityData encoderShouldCreateIdentityDataForMovie(    final ObjectAdapter movieAdapter){
      final DummyIdentityData identityOfObjectToDelete=new DummyIdentityData();
      one(mockEncoder).encodeIdentityData(movieAdapter);
      will(returnValue(identityOfObjectToDelete));
      return identityOfObjectToDelete;
    }
    private void distributionShouldExecuteClientActionForDeletedMovie(    final DummyIdentityData identityOfObjectToDelete){
      final Version[] versionUpdates=new Version[]{};
      one(mockDistribution).executeClientAction(with(any(ExecuteClientActionRequest.class)));
      will(returnValue(new ExecuteClientActionResponse(new ObjectData[]{},versionUpdates,new ObjectData[0])));
    }
  }
);
  transactionManager.startTransaction();
  persistenceSessionProxy.destroyObject(movieAdapter);
  transactionManager.endTransaction();
  final List<ObjectAdapter> allDisposedObjects=IsisContext.getUpdateNotifier().getDisposedObjects();
  assertFalse(allDisposedObjects.isEmpty());
  assertEquals(movieAdapter,allDisposedObjects.get(0));
}
