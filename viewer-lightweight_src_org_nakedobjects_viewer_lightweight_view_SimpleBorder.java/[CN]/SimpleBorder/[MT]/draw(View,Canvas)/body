{
  ObjectViewState state=((ObjectView)view).getState();
  Color color;
  if (state.canDrop()) {
    color=Style.VALID;
  }
 else   if (state.cantDrop()) {
    color=Style.INVALID;
  }
 else   if (state.isObjectIdentified()) {
    color=getObjectIdentified();
  }
 else   if (state.isViewIdentified()) {
    color=getViewIdentified();
  }
 else   if (state.isRootViewIdentified()) {
    color=getRootViewIdentified();
  }
 else {
    color=getInBackground();
  }
  if (color == null) {
    return;
  }
  Size size=view.getSize();
  int width=size.getWidth();
  int height=size.getHeight();
  for (int i=0; i < borderWidth; i++) {
    canvas.drawRectangle(i,i,width - (i * 2 + 1),height - (i * 2 + 1),color);
  }
  if (state.isViewIdentified() && !state.isObjectIdentified()) {
    int x1=width - handleWidth - borderWidth;
    int x2=width - borderWidth;
    int y1=borderWidth + 1;
    int y2=height - borderWidth - 2;
    for (int x=x1; x < x2; x+=2) {
      canvas.drawLine(x,y1,x,y2,Style.FEINT);
    }
  }
  int x=width - borderWidth - 3;
  int y=0;
  if (state.isViewIdentified() && !state.isObjectIdentified()) {
    for (int i=0; i < controls.size(); i++) {
      Control control=(Control)controls.elementAt(i);
      Size controlSize=control.getRequiredSize();
      int cwidth=controlSize.getWidth();
      int cheight=controlSize.getHeight();
      y+=cheight + 4;
      Bounds controlBounds=new Bounds(x - cwidth,y,cwidth,cheight);
      control.setBounds(controlBounds);
      Canvas controlCanvas=canvas.createSubcanvas(controlBounds.getX(),controlBounds.getY(),controlBounds.getWidth(),controlBounds.getHeight());
      control.paint(controlCanvas);
    }
  }
}
