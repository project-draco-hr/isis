{
  LOG.debug("makePersistent " + object);
  if (isPersistent(object)) {
    throw new IllegalArgumentException();
  }
  object.setOid(createOid(object));
  if (!object.isResolved()) {
    object.setResolved();
  }
  FieldSpecification[] fields=object.getSpecification().getFields();
  for (int i=0; i < fields.length; i++) {
    FieldSpecification field=fields[i];
    if (field.isDerived()) {
      continue;
    }
 else     if (field.isValue()) {
      continue;
    }
 else     if (field.isPart()) {
      InternalCollection collection=(InternalCollection)field.get(object);
      collection.setOid(createOid(collection));
      collection.setResolved();
      for (int j=0; j < collection.size(); j++) {
        NakedObject element=collection.elementAt(j);
        if (isPersistent(element)) {
          continue;
        }
        makePersistent(element);
      }
    }
 else {
      Object fieldValue=field.get(object);
      if (fieldValue == null) {
        continue;
      }
      NakedObject association=(NakedObject)fieldValue;
      if (isPersistent(association)) {
        continue;
      }
      makePersistent(association);
    }
  }
  try {
    if (object instanceof NakedClassSpec) {
      createNakedClassSpec(object);
    }
 else {
      createObject(object);
    }
  }
 catch (  ObjectStoreException e) {
    throw new NakedObjectRuntimeException(e);
  }
  objectStore.getLoadedObjects().loaded(object);
}
