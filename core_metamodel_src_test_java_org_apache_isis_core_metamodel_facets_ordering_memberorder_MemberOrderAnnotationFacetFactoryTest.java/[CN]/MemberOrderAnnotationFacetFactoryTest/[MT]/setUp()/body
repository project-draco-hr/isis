{
  super.setUp();
  mockServicesInjector=context.mock(ServicesInjector.class);
  mockTranslationService=context.mock(TranslationService.class);
  context.checking(new Expectations(){
{
      allowing(mockServicesInjector).lookupService(TranslationService.class);
      will(returnValue(mockTranslationService));
    }
  }
);
  context.checking(new Expectations(){
{
      allowing(mockTranslationService).translate(with(any(String.class)),with(any(String.class)));
      will(new Action(){
        @Override public Object invoke(        final Invocation invocation) throws Throwable {
          return invocation.getParameter(1);
        }
        @Override public void describeTo(        final Description description){
          description.appendText("Returns parameter #1");
        }
      }
);
    }
  }
);
  facetFactory=new MemberOrderFacetFactory();
  facetFactory.setServicesInjector(mockServicesInjector);
}
