{
  init();
  final String oidStr=UrlDecoderUtils.urlDecode(oidEncodedStr);
  final ObjectAdapter objectAdapter=getObjectAdapter(oidStr);
  if (objectAdapter == null) {
    throw new WebApplicationException(responseOfGone("could not determine object"));
  }
  DomainObjectRepBuilder builder=DomainObjectRepBuilder.newBuilder(getResourceContext().repContext(),objectAdapter);
  List<ObjectAssociation> properties=objectAdapter.getSpecification().getAssociations(ObjectAssociationFilters.PROPERTIES);
  for (  ObjectAssociation otoa : properties) {
    Consent visibility=otoa.isVisible(getSession(),objectAdapter);
    if (visibility.isAllowed()) {
      String id=otoa.getId();
      Representation propertyRep=PropertyRepBuilder.newBuilder(getResourceContext().repContext(id),objectAdapter,(OneToOneAssociation)otoa).build();
      builder.withProperty(id,propertyRep);
    }
  }
  Representation representation=builder.build();
  return asJson(representation);
}
