{
  this.specificationLookupDelegator.setDelegate(new SpecificationLoader(){
    @Override public void injectInto(    final Object candidate){
      specificationLoader.injectInto(candidate);
    }
    @Override public ObjectSpecification loadSpecification(    final Class<?> cls){
      return specificationLoader.loadSpecification(cls);
    }
    @Override public Collection<ObjectSpecification> allSpecifications(){
      return specificationLoader.allSpecifications();
    }
    @Override public ObjectSpecification lookupBySpecId(    ObjectSpecId objectSpecId){
      return specificationLoader.lookupBySpecId(objectSpecId);
    }
    @Override public ObjectSpecification loadSpecification(    String fullyQualifiedClassName){
      return specificationLoader.loadSpecification(fullyQualifiedClassName);
    }
    @Override public boolean loadSpecifications(    List<Class<?>> typesToLoad){
      return specificationLoader.loadSpecifications(typesToLoad);
    }
    @Override public boolean loadSpecifications(    List<Class<?>> typesToLoad,    Class<?> typeToIgnore){
      return specificationLoader.loadSpecifications(typesToLoad,typeToIgnore);
    }
    @Override public boolean loaded(    Class<?> cls){
      return specificationLoader.loaded(cls);
    }
    @Override public boolean loaded(    String fullyQualifiedClassName){
      return specificationLoader.loaded(fullyQualifiedClassName);
    }
  }
);
}
