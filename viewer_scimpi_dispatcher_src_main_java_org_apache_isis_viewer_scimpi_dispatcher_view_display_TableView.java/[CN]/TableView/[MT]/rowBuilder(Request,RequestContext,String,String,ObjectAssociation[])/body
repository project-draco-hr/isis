{
  String linkRowView=request.getOptionalProperty(LINK);
  String linkObjectName=request.getOptionalProperty(ELEMENT_NAME,RequestContext.RESULT);
  String linkObjectScope=request.getOptionalProperty(SCOPE,Scope.INTERACTION.toString());
  final LinkedObject linkRow=linkRowView == null ? null : new LinkedObject(linkObjectName,linkObjectScope,context.fullUriPath(linkRowView));
  final boolean includeHeading=request.isRequested(HEADING,true);
  final boolean includeFooting=request.isRequested(FOOTING,false);
  boolean linkFields=request.isRequested("link-fields",true);
  final boolean showSelectOption=request.isRequested(SHOW_SELECT,true);
  final boolean showEditOption=request.isRequested(SHOW_EDIT,true);
  final boolean showDeleteOption=request.isRequested(SHOW_DELETE,true);
  LinkedFieldsBlock block=new LinkedFieldsBlock();
  request.setBlockContent(block);
  request.processUtilCloseTag();
  final ObjectAssociation[] fields=block.includedFields(allFields);
  final LinkedObject[] linkedFields=block.linkedFields(fields);
  for (int i=0; i < linkedFields.length; i++) {
    if (linkedFields[i] == null && linkFields && !fields[i].getSpecification().containsFacet(ParseableFacet.class)) {
      linkedFields[i]=new LinkedObject("_generic.shtml");
    }
    if (linkedFields[i] != null) {
      linkedFields[i].setForwardView(context.fullUriPath(linkedFields[i].getForwardView()));
    }
  }
  final String headers[]=new String[fields.length];
  int h=0;
  for (int i=0; i < fields.length; i++) {
    if (fields[i].isOneToManyAssociation()) {
      continue;
    }
    headers[h++]=fields[i].getName();
  }
  request.popBlockContent();
  return new SimpleTableBuilder(object,includeHeading,includeFooting,headers,fields,showSelectOption,showDeleteOption,showEditOption,fieldName,linkedFields,linkRow);
}
