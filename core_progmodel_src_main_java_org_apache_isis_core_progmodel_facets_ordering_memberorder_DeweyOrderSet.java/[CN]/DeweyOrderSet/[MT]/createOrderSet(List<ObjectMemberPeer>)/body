{
  final SortedMap sortedMembersByGroup=new TreeMap();
  final SortedSet nonAnnotatedGroup=new TreeSet(new MemberIdentifierComparator());
  for (  ObjectMemberPeer member : members) {
    final MemberOrderFacet memberOrder=member.getFacet(MemberOrderFacet.class);
    if (memberOrder == null) {
      nonAnnotatedGroup.add(member);
      continue;
    }
    final SortedSet sortedMembersForGroup=getSortedSet(sortedMembersByGroup,memberOrder.name());
    sortedMembersForGroup.add(member);
  }
  final SortedSet defaultSet=getSortedSet(sortedMembersByGroup,"");
  defaultSet.addAll(nonAnnotatedGroup);
  final Set groupNames=sortedMembersByGroup.keySet();
  final SortedMap orderSetsByGroup=new TreeMap();
  for (final Iterator iter=groupNames.iterator(); iter.hasNext(); ) {
    final String groupName=(String)iter.next();
    final DeweyOrderSet deweyOrderSet=new DeweyOrderSet(groupName);
    orderSetsByGroup.put(groupName,deweyOrderSet);
    ensureParentFor(orderSetsByGroup,deweyOrderSet);
  }
  for (final Iterator iter=groupNames.iterator(); iter.hasNext(); ) {
    final String groupName=(String)iter.next();
    final DeweyOrderSet deweyOrderSet=(DeweyOrderSet)orderSetsByGroup.get(groupName);
    final SortedSet sortedMembers=(SortedSet)sortedMembersByGroup.get(groupName);
    deweyOrderSet.addAll(sortedMembers);
    deweyOrderSet.copyOverChildren();
  }
  return (DeweyOrderSet)orderSetsByGroup.get("");
}
