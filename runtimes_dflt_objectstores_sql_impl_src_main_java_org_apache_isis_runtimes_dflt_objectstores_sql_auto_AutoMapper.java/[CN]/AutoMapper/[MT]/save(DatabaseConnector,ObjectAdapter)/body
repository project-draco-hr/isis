{
  SerialNumberVersion version=(SerialNumberVersion)object.getVersion();
  long nextSequence=version.getSequence() + 1;
  StringBuffer sql=new StringBuffer();
  sql.append("UPDATE " + table + " SET ");
  for (  FieldMapping mapping : fieldMappings) {
    mapping.appendUpdateValues(connector,sql,object);
    sql.append(", ");
  }
  sql.append(versionMapping.updateAssigment(connector,nextSequence));
  sql.append(", ");
  titleMapping.appendUpdateAssignment(connector,sql,object);
  sql.append(" WHERE ");
  idMapping.appendWhereClause(connector,sql,object.getOid());
  sql.append(" AND ");
  sql.append(versionMapping.whereClause(connector,(SerialNumberVersion)object.getVersion()));
  int updateCount=connector.update(sql.toString());
  if (updateCount == 0) {
    LOG.info("concurrency conflict object " + this + "; no update performed");
    throw new ConcurrencyException("",object.getOid());
  }
 else {
    object.setOptimisticLock(createVersion(nextSequence));
  }
  for (int i=0; i < collectionMappers.length; i++) {
    collectionMappers[i].saveInternalCollection(connector,object);
  }
}
