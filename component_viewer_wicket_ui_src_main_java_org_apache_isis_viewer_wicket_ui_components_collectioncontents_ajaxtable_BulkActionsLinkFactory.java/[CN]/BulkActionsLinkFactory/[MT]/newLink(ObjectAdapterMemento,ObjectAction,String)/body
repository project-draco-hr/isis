{
  final ActionMemento actionMemento=new ActionMemento(objectAction);
  final AbstractLink link=new Link<Object>(linkId){
    private static final long serialVersionUID=1L;
    @Override public void onClick(){
      final ObjectAction objectAction=actionMemento.getAction();
      try {
        final List<ObjectAdapterMemento> toggleMementosList=model.getToggleMementosList();
        final Iterable<ObjectAdapter> toggledAdapters=Iterables.transform(toggleMementosList,ObjectAdapterFunctions.fromMemento());
        final List<Object> domainObjects=Lists.newArrayList(Iterables.transform(toggledAdapters,ObjectAdapter.Functions.getObject()));
        final Bulk.InteractionContext interactionContext=new Bulk.InteractionContext(domainObjects);
        Bulk.InteractionContext.current.set(interactionContext);
        int i=0;
        for (        final ObjectAdapter adapter : toggledAdapters) {
          int numParameters=objectAction.getParameterCount();
          if (numParameters != 0) {
            return;
          }
          interactionContext.setIndex(i++);
          objectAction.execute(adapter,new ObjectAdapter[]{});
        }
      }
  finally {
        Bulk.InteractionContext.current.set(null);
      }
      model.clearToggleMementosList();
      final ActionModel actionModelHint=model.getActionModelHint();
      if (actionModelHint != null) {
        ObjectAdapter resultAdapter=actionModelHint.getObject();
        model.setObjectList(resultAdapter);
      }
 else {
        model.setObject(persistentAdaptersWithin(model.getObject()));
      }
    }
    private List<ObjectAdapter> persistentAdaptersWithin(    List<ObjectAdapter> adapters){
      return Lists.newArrayList(Iterables.filter(adapters,new Predicate<ObjectAdapter>(){
        @Override public boolean apply(        ObjectAdapter input){
          return !input.isTransient() && !input.isDestroyed();
        }
      }
));
    }
  }
;
  link.add(new JGrowlBehaviour());
  final boolean explorationOrPrototype=CssMenuItem.isExplorationOrPrototype(objectAction);
  final String actionIdentifier=CssMenuItem.actionIdentifierFor(objectAction);
  final String cssClass=CssMenuItem.cssClassFor(objectAction);
  return new LinkAndLabel(link,objectAction.getName(),null,false,explorationOrPrototype,actionIdentifier,cssClass);
}
