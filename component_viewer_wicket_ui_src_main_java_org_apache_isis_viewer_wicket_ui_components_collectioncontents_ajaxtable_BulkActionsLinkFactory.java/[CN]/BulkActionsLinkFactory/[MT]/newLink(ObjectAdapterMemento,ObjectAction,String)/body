{
  final ActionMemento actionMemento=new ActionMemento(objectAction);
  final AbstractLink link=new Link<Object>(linkId){
    private static final long serialVersionUID=1L;
    @Override public void onClick(){
      final ObjectAction objectAction=actionMemento.getAction();
      for (      ObjectAdapterMemento entityAdapterMemento : model.getToggleMementosList()) {
        final ObjectAdapter entityAdapter=entityAdapterMemento.getObjectAdapter(ConcurrencyChecking.CHECK);
        int numParameters=objectAction.getParameterCount();
        if (objectAction.isContributed()) {
          if (numParameters != 1) {
            return;
          }
          if (serviceAdapterMemento == null) {
            return;
          }
          final ObjectAdapter serviceAdapter=serviceAdapterMemento.getObjectAdapter(ConcurrencyChecking.NO_CHECK);
          objectAction.execute(serviceAdapter,new ObjectAdapter[]{entityAdapter});
        }
 else {
          if (numParameters != 0) {
            return;
          }
          objectAction.execute(entityAdapter,new ObjectAdapter[]{});
        }
      }
      model.clearToggleMementosList();
      model.setObject(persistentAdaptersWithin(model.getObject()));
    }
    private List<ObjectAdapter> persistentAdaptersWithin(    List<ObjectAdapter> adapters){
      return Lists.newArrayList(Iterables.filter(adapters,new Predicate<ObjectAdapter>(){
        @Override public boolean apply(        ObjectAdapter input){
          return !input.isTransient() && !input.isDestroyed();
        }
      }
));
    }
  }
;
  link.add(new JGrowlBehaviour());
  return new LinkAndLabel(link,objectAction.getName(),null);
}
