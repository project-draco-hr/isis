{
  final EntityModel entityModel=getModel();
  final ObjectAdapter adapter=entityModel.getObject();
  final ColumnMetadata columnMetadataIfAny=entityModel.getColumnMetadata();
  final Filter<ObjectAssociation> filter;
  if (columnMetadataIfAny != null) {
    final ImmutableList<String> collectionIds=FluentIterable.from(columnMetadataIfAny.getCollections()).transform(CollectionLayoutMetadata.Functions.id()).toList();
    filter=new Filter<ObjectAssociation>(){
      @Override public boolean accept(      final ObjectAssociation objectAssociation){
        return collectionIds.contains(objectAssociation.getId());
      }
    }
;
  }
 else {
    filter=Filters.any();
  }
  final List<ObjectAssociation> associations=visibleCollections(adapter,filter);
  associations.sort(new Comparator<ObjectAssociation>(){
    private final DeweyOrderComparator deweyOrderComparator=new DeweyOrderComparator();
    @Override public int compare(    final ObjectAssociation o1,    final ObjectAssociation o2){
      final MemberOrderFacet o1Facet=o1.getFacet(MemberOrderFacet.class);
      final MemberOrderFacet o2Facet=o2.getFacet(MemberOrderFacet.class);
      return o1Facet == null ? +1 : o2Facet == null ? -1 : deweyOrderComparator.compare(o1Facet.sequence(),o2Facet.sequence());
    }
  }
);
  final RepeatingView collectionRv=new RepeatingView(ID_COLLECTIONS);
  add(collectionRv);
  for (  final ObjectAssociation association : associations) {
    final WebMarkupContainer collectionRvContainer=new UiHintPathSignificantWebMarkupContainer(collectionRv.newChildId());
    collectionRv.add(collectionRvContainer);
    addCollectionToForm(entityModel,association,collectionRvContainer);
  }
}
