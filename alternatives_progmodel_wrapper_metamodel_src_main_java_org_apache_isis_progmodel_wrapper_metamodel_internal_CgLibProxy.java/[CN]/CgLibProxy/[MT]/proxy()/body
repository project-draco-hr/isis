{
  final T toProxy=handler.getDelegate();
  if (CglibEnhanced.class.isAssignableFrom(toProxy.getClass())) {
    handler.setResolveObjectChangedEnabled(true);
    Class<? extends Object> enhancedClass=toProxy.getClass();
    Class<? extends Object> origSuperclass=toProxy.getClass().getSuperclass();
    List<Class> interfaces=new ArrayList<Class>();
    interfaces.addAll(Arrays.asList(enhancedClass.getInterfaces()));
    interfaces.remove(Factory.class);
    interfaces.add(WrapperObject.class);
    return (T)Enhancer.create(origSuperclass,interfaces.toArray(new Class[]{}),new InvocationHandlerMethodInterceptor(handler));
  }
  final Class<T> clazz=(Class<T>)toProxy.getClass();
  T proxy=null;
  try {
    final IProxyFactory<T> proxyFactory=clazz.isInterface() ? new JavaProxyFactory<T>() : new CgLibClassProxyFactory<T>();
    proxy=proxyFactory.createProxy(clazz,handler);
  }
 catch (  final RuntimeExceptionWrapper e) {
    throw (RuntimeException)e.getRuntimeException().fillInStackTrace();
  }
  return proxy;
}
