{
  final SortedMap<String,SortedSet<IdentifiedHolder>> sortedMembersByGroup=Maps.newTreeMap();
  final SortedSet<IdentifiedHolder> nonAnnotatedGroup=Sets.newTreeSet(new MemberIdentifierComparator());
  for (  final IdentifiedHolder facetedMethod : facetedMethods) {
    final MemberOrderFacet memberOrder=facetedMethod.getFacet(MemberOrderFacet.class);
    if (memberOrder == null) {
      nonAnnotatedGroup.add(facetedMethod);
      continue;
    }
    final SortedSet<IdentifiedHolder> sortedMembersForGroup=getSortedSet(sortedMembersByGroup,memberOrder.name());
    sortedMembersForGroup.add(facetedMethod);
  }
  final SortedSet<IdentifiedHolder> defaultSet=getSortedSet(sortedMembersByGroup,"");
  defaultSet.addAll(nonAnnotatedGroup);
  final Set<String> groupNames=sortedMembersByGroup.keySet();
  final SortedMap<String,DeweyOrderSet> orderSetsByGroup=Maps.newTreeMap();
  for (  final String string : groupNames) {
    final String groupName=string;
    final DeweyOrderSet deweyOrderSet=new DeweyOrderSet(groupName);
    orderSetsByGroup.put(groupName,deweyOrderSet);
    ensureParentFor(orderSetsByGroup,deweyOrderSet);
  }
  for (  final String groupName : groupNames) {
    final DeweyOrderSet deweyOrderSet=orderSetsByGroup.get(groupName);
    final SortedSet sortedMembers=sortedMembersByGroup.get(groupName);
    deweyOrderSet.addAll(sortedMembers);
    deweyOrderSet.copyOverChildren();
  }
  return orderSetsByGroup.get("");
}
