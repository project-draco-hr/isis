{
  if (rendererContext instanceof Context2) {
    final Context2 renderContext2=(Context2)rendererContext;
    final List<MediaType> acceptableMediaTypes=renderContext2.getAcceptableMediaTypes();
    MediaType xmlMediaType=matchingActionResultXmlWithXRoDomainType(acceptableMediaTypes);
    if (xmlMediaType != null) {
      final String xRoDomainType=xmlMediaType.getParameters().get("x-ro-domain-type");
      final Class<?> domainType;
      try {
        domainType=InstanceUtil.loadClass(xRoDomainType);
      }
 catch (      final Exception ex) {
        throw RestfulObjectsApplicationException.createWithCause(RestfulResponse.HttpStatusCode.BAD_REQUEST,ex);
      }
      final ObjectAdapter returnedAdapter=objectAndActionInvocation.getReturnedAdapter();
      if (returnedAdapter == null) {
        throw RestfulObjectsApplicationException.create(RestfulResponse.HttpStatusCode.NOT_FOUND);
      }
      final Object domainObject=returnedAdapter.getObject();
      if (!domainType.isAssignableFrom(domainObject.getClass())) {
        throw RestfulObjectsApplicationException.createWithMessage(RestfulResponse.HttpStatusCode.NOT_ACCEPTABLE,"Requested object of type '%s' however the object returned by the domain object is not assignable (is '%s')",xRoDomainType,domainObject.getClass().getName());
      }
      return buildResponse(Response.ok(domainObject,xmlMediaType));
    }
  }
  final ActionResultReprRenderer renderer=new ActionResultReprRenderer(rendererContext,selfLink);
  renderer.with(objectAndActionInvocation).using(rendererContext.getAdapterLinkTo());
  final ResponseBuilder respBuilder=Responses.ofOk(renderer,Caching.NONE);
  Responses.addLastModifiedAndETagIfAvailable(respBuilder,objectAndActionInvocation.getObjectAdapter().getVersion());
  return buildResponse(respBuilder);
}
