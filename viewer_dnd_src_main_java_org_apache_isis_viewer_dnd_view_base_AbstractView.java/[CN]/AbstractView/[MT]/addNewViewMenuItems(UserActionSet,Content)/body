{
  if (getContent() instanceof ObjectContent) {
    options.add(new UserActionAbstract("Use as default view for objects",ObjectActionType.USER){
      public void execute(      final Workspace workspace,      final View view,      final Location at){
        Properties.setStringOption("view.object-default",getSpecification().getName());
      }
    }
);
  }
  if (getContent() instanceof CollectionContent) {
    options.add(new UserActionAbstract("Use as default view for collection",ObjectActionType.USER){
      public void execute(      final Workspace workspace,      final View view,      final Location at){
        Properties.setStringOption("view.collection-default",getSpecification().getName());
      }
    }
);
  }
  if (getContent() instanceof ObjectContent && !getSpecification().isOpen()) {
    options.add(new UserActionAbstract("Use as default view for icon",ObjectActionType.USER){
      public void execute(      final Workspace workspace,      final View view,      final Location at){
        Properties.setStringOption("view.icon-default",getSpecification().getName());
      }
    }
);
  }
  if (getContent() instanceof RootObject || getContent() instanceof RootCollection) {
    options.add(new UserActionAbstract("Use as default view for " + getContent().getSpecification().getName(),ObjectActionType.USER){
      public void execute(      final Workspace workspace,      final View view,      final Location at){
        Options viewOptions=Properties.getViewConfigurationOptions(getSpecification());
        getView().saveOptions(viewOptions);
        ObjectSpecification specification=content.getSpecification();
        Options settingsOptions=Properties.getDefaultViewOptions(specification);
        settingsOptions.addOption("spec",getSpecification().getName());
      }
    }
);
  }
  options.add(new UserActionAbstract("Save specification",ObjectActionType.USER){
    public void execute(    final Workspace workspace,    final View view,    final Location at){
      Options viewOptions=Properties.getViewConfigurationOptions(getSpecification());
      getView().saveOptions(viewOptions);
      Toolkit.getViewFactory().addSpecification(getSpecification());
    }
  }
);
  createOpenAsSubmenu(options,content);
  createCreateViewSubmenu(options,content);
}
