{
  ObjectAdapter adapter=getAdapterFor(typedOid);
  if (adapter == null) {
    try {
      final Object pojo=pojoRecreator.recreatePojo(typedOid);
      adapter=mapRecreatedPojo(typedOid,pojo);
    }
 catch (    RuntimeException ex) {
      throw new ObjectNotFoundException(typedOid,ex);
    }
  }
  Oid adapterOid=adapter.getOid();
  if (adapterOid instanceof RootOid) {
    final RootOid recreatedOid=(RootOid)adapterOid;
    final RootOid originalOid=(RootOid)typedOid;
    try {
      if (concurrencyChecking.isChecking()) {
        final Version otherVersion=originalOid.getVersion();
        final Version thisVersion=recreatedOid.getVersion();
        if (thisVersion != null && otherVersion != null && thisVersion.different(otherVersion)) {
          if (ConcurrencyException.concurrencyChecking.get().isChecking()) {
            LOG.info("concurrency conflict detected on " + recreatedOid + " ("+ otherVersion+ ")");
            final String currentUser=getAuthenticationSession().getUserName();
            throw new ConcurrencyException(currentUser,recreatedOid,thisVersion,otherVersion);
          }
 else {
            LOG.warn("concurrency conflict detected but suppressed, on " + recreatedOid + " ("+ otherVersion+ ")");
          }
        }
      }
    }
  finally {
      final Version recreatedVersion=recreatedOid.getVersion();
      originalOid.setVersion(recreatedVersion);
    }
  }
  return adapter;
}
