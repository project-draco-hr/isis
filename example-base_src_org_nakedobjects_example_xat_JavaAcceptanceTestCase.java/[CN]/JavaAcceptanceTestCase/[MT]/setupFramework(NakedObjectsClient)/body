{
  JavaBusinessObjectContainer container=new JavaBusinessObjectContainer();
  JavaObjectFactory objectFactory=new JavaObjectFactory();
  objectFactory.setContainer(container);
  TransientObjectStore objectStore=new TransientObjectStore();
  OidGenerator oidGenerator=new TimeBasedOidGenerator();
  DefaultPersistAlgorithm persistAlgorithm=new DefaultPersistAlgorithm();
  persistAlgorithm.setOidGenerator(oidGenerator);
  LocalObjectManager objectManager=new LocalObjectManager();
  objectManager.setObjectStore(objectStore);
  objectManager.setPersistAlgorithm(persistAlgorithm);
  nakedObjects.setObjectManager(objectManager);
  NakedObjectSpecificationLoader specificationLoader;
  specificationLoader=new StaticNakedObjectSpecificationLoader(){
    protected NakedObjectSpecification load(    String className){
      JavaReflector reflector=new JavaReflector(className);
      NakedObjectSpecificationImpl specification=new NakedObjectSpecificationImpl();
      ((NakedObjectSpecificationImpl)specification).reflect(className,reflector);
      return specification;
    }
  }
;
  nakedObjects.setSpecificationLoader(specificationLoader);
  LocalReflectionFactory reflectionFactory=new LocalReflectionFactory();
  ObjectLoaderImpl objectLoader=new ObjectLoaderImpl();
  nakedObjects.setObjectLoader(objectLoader);
  objectLoader.setObjectFactory(objectFactory);
  objectLoader.setPojoAdapterMap(new PojoAdapterHashMap());
  objectLoader.setIdentityAdapterMap(new IdentityAdapterHashMap());
  objectLoader.setAdapterFactory(new JavaAdapterFactory());
  nakedObjects.setReflectionFactory(reflectionFactory);
  objectManager.init();
}
