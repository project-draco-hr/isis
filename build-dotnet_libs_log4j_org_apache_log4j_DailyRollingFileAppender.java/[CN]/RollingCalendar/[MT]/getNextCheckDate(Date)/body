{
  this.setTime(now);
switch (type) {
case DailyRollingFileAppender.TOP_OF_MINUTE:
    this.set(Calendar.SECOND,0);
  this.set(Calendar.MILLISECOND,0);
this.add(Calendar.MINUTE,1);
break;
case DailyRollingFileAppender.TOP_OF_HOUR:
this.set(Calendar.MINUTE,0);
this.set(Calendar.SECOND,0);
this.set(Calendar.MILLISECOND,0);
this.add(Calendar.HOUR_OF_DAY,1);
break;
case DailyRollingFileAppender.HALF_DAY:
this.set(Calendar.MINUTE,0);
this.set(Calendar.SECOND,0);
this.set(Calendar.MILLISECOND,0);
int hour=get(Calendar.HOUR_OF_DAY);
if (hour < 12) {
this.set(Calendar.HOUR_OF_DAY,12);
}
 else {
this.set(Calendar.HOUR_OF_DAY,0);
this.add(Calendar.DAY_OF_MONTH,1);
}
break;
case DailyRollingFileAppender.TOP_OF_DAY:
this.set(Calendar.HOUR_OF_DAY,0);
this.set(Calendar.MINUTE,0);
this.set(Calendar.SECOND,0);
this.set(Calendar.MILLISECOND,0);
this.add(Calendar.DATE,1);
break;
case DailyRollingFileAppender.TOP_OF_WEEK:
this.set(Calendar.DAY_OF_WEEK,getFirstDayOfWeek());
this.set(Calendar.HOUR_OF_DAY,0);
this.set(Calendar.SECOND,0);
this.set(Calendar.MILLISECOND,0);
this.add(Calendar.WEEK_OF_YEAR,1);
break;
case DailyRollingFileAppender.TOP_OF_MONTH:
this.set(Calendar.DATE,1);
this.set(Calendar.HOUR_OF_DAY,0);
this.set(Calendar.SECOND,0);
this.set(Calendar.MILLISECOND,0);
this.add(Calendar.MONTH,1);
break;
default :
throw new IllegalStateException("Unknown periodicity type.");
}
return getTime();
}
