{
  List<ObjectAdapter> argAdapters=parseArguments(action,arguments);
  List<ObjectActionParameter> parameters=action.getParameters();
  for (int i=0; i < parameters.size(); i++) {
    ObjectActionParameter parameter=parameters.get(i);
    ObjectAdapter argAdapter=argAdapters.get(i);
    if (argAdapter == null) {
      continue;
    }
    if (argAdapter.getSpecification().containsFacet(ValueFacet.class)) {
      Object arg=argAdapter.getObject();
      String reasonNotValid=parameter.isValid(objectAdapter,arg);
      if (reasonNotValid != null) {
        throw JsonApplicationException.create(HttpStatusCode.NOT_ACCEPTABLE,reasonNotValid);
      }
    }
  }
  ObjectAdapter[] argArray=argAdapters.toArray(new ObjectAdapter[0]);
  Consent consent=action.isProposedArgumentSetValid(objectAdapter,argArray);
  if (consent.isVetoed()) {
    throw JsonApplicationException.create(HttpStatusCode.NOT_ACCEPTABLE,consent.getReason());
  }
  final ObjectAdapter returnedAdapter=action.execute(objectAdapter,argArray);
  final ResponseBuilder respBuilder;
  if (returnedAdapter == null) {
    respBuilder=ResourceAbstract.responseOfNoContent();
  }
 else {
    RendererFactory factory=RendererFactoryRegistry.instance.find(RepresentationType.ACTION_RESULT);
    final ActionResultReprRenderer renderer=(ActionResultReprRenderer)factory.newRenderer(resourceContext,null,JsonRepresentation.newMap());
    renderer.with(new ObjectAndActionInvocation(objectAdapter,action,arguments,returnedAdapter)).using(adapterLinkTo);
    respBuilder=ResourceAbstract.responseOfOk(renderer,Caching.NONE);
  }
  Version version=objectAdapter.getVersion();
  ResourceAbstract.addLastModifiedAndETagIfAvailable(respBuilder,version);
  return respBuilder.build();
}
