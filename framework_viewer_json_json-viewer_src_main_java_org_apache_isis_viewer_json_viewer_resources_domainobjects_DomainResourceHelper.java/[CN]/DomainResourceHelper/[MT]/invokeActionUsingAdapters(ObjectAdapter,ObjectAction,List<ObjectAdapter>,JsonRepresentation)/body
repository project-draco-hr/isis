{
  List<ObjectActionParameter> parameters=action.getParameters();
  for (int i=0; i < parameters.size(); i++) {
    ObjectActionParameter parameter=parameters.get(i);
    ObjectAdapter paramAdapter=argAdapters.get(i);
    if (paramAdapter.getSpecification().containsFacet(ValueFacet.class)) {
      Object arg=paramAdapter.getObject();
      String reasonNotValid=parameter.isValid(objectAdapter,arg);
      if (reasonNotValid != null) {
        throw JsonApplicationException.create(HttpStatusCode.NOT_ACCEPTABLE,reasonNotValid);
      }
    }
  }
  ObjectAdapter[] argArray=argAdapters.toArray(new ObjectAdapter[0]);
  Consent consent=action.isProposedArgumentSetValid(objectAdapter,argArray);
  if (consent.isVetoed()) {
    throw JsonApplicationException.create(HttpStatusCode.NOT_ACCEPTABLE,consent.getReason());
  }
  final ObjectAdapter returnedAdapter=action.execute(objectAdapter,argArray);
  if (returnedAdapter == null) {
    return ResourceAbstract.responseOfNoContent(objectAdapter.getVersion()).build();
  }
  final CollectionFacet collectionFacet=returnedAdapter.getSpecification().getFacet(CollectionFacet.class);
  if (collectionFacet != null) {
    final Collection<ObjectAdapter> collectionAdapters=collectionFacet.collection(returnedAdapter);
    final RendererFactory factory=rendererFactoryRegistry.find(RepresentationType.LIST);
    final ListReprRenderer renderer=(ListReprRenderer)factory.newRenderer(resourceContext,null,representation);
    renderer.with(collectionAdapters);
    return ResourceAbstract.responseOfOk(Caching.NONE,renderer).build();
  }
  final EncodableFacet encodableFacet=returnedAdapter.getSpecification().getFacet(EncodableFacet.class);
  if (encodableFacet != null) {
    final RendererFactory factory=rendererFactoryRegistry.find(RepresentationType.SCALAR_VALUE);
    ScalarValueReprRenderer renderer=(ScalarValueReprRenderer)factory.newRenderer(resourceContext,null,representation);
    renderer.with(objectAdapter);
    return ResourceAbstract.responseOfOk(Caching.NONE,renderer).build();
  }
  final RendererFactory factory=rendererFactoryRegistry.find(RepresentationType.DOMAIN_OBJECT);
  final DomainObjectReprRenderer renderer=(DomainObjectReprRenderer)factory.newRenderer(resourceContext,null,representation);
  renderer.with(returnedAdapter);
  ResponseBuilder respBuilder=ResourceAbstract.responseOfOk(Caching.NONE,renderer);
  Version version=returnedAdapter.getVersion();
  if (version != null && version.getTime() != null) {
    respBuilder.tag("" + version.getTime());
  }
  return respBuilder.build();
}
