{
  Logger.getRootLogger().setLevel(Level.OFF);
  system=new TestProxySystem();
  system.init();
  objectWithVector=new JavaObjectWithVector();
  adapter=system.createAdapterForTransient(objectWithVector);
  elements=new JavaReferencedObject[3];
  for (int i=0; i < elements.length; i++) {
    elements[i]=new JavaReferencedObject();
  }
  Class cls=JavaObjectWithVector.class;
  MemberIdentifierImpl memberIdentifierImpl=new MemberIdentifierImpl("cls",MEMBERS_FIELD_NAME);
  collectionField=new JavaCollectionAssociation(memberIdentifierImpl,Object.class);
  Method get=cls.getDeclaredMethod("getMethod",new Class[0]);
  collectionField.addFacet(new JavaBeanPropertyAccessorMethod(get,collectionField));
  Method add=cls.getDeclaredMethod("addToMethod",new Class[]{JavaReferencedObject.class});
  Method remove=cls.getDeclaredMethod("removeFromMethod",new Class[]{JavaReferencedObject.class});
  Method visible=cls.getDeclaredMethod("hideMethod",new Class[]{JavaReferencedObject.class});
  Method available=cls.getDeclaredMethod("availableMethod",new Class[]{JavaReferencedObject.class});
  Method valid=cls.getDeclaredMethod("validMethod",new Class[]{JavaReferencedObject.class});
}
