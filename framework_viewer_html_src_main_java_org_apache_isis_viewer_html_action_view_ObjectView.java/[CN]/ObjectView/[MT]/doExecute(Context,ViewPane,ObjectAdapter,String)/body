{
  final String id=context.mapObject(adapter);
  final ObjectSpecification specification=adapter.getSpecification();
  final AuthenticationSession authenticationSession=getAuthenticationSession();
  boolean isVisible=true;
  HiddenObjectFacet hf=specification.getFacet(HiddenObjectFacet.class);
  if (hf != null) {
    isVisible=hf.hiddenReason(adapter) == null;
  }
  if (isVisible) {
    createObjectView(context,adapter,content,id);
    boolean isEditable=true;
    DisabledObjectFacet df=specification.getFacet(DisabledObjectFacet.class);
    if (df != null) {
      isEditable=df.disabledReason(adapter) == null;
    }
    if (isEditable) {
      final boolean immutable=ImmutableFacetUtils.isAlwaysImmutable(specification) || (adapter.isPersistent() && ImmutableFacetUtils.isImmutableOncePersisted(specification));
      boolean allFieldUneditable=true;
      final List<ObjectAssociation> flds=specification.getAssociations();
      for (int i=0; i < flds.size(); i++) {
        if (flds.get(i).isUsable(authenticationSession,adapter).isAllowed()) {
          allFieldUneditable=false;
          break;
        }
      }
      if (!immutable && !allFieldUneditable) {
        content.add(context.getComponentFactory().createEditOption(id));
      }
    }
    context.setObjectCrumb(adapter);
  }
}
