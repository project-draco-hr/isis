{
  if (LOG.isDebugEnabled()) {
    LOG.debug(logString(Phase.POST,event));
  }
  if (isSuspended()) {
    LOG.debug(" [currently suspended - ignoring]");
    return;
  }
  ensureRootObject(event);
  final PersistenceCapable pojo=persistenceCapableFor(event);
  if (!pojo.jdoIsPersistent()) {
    throw new IllegalStateException("Pojo JDO state is not persistent! pojo dnOid: " + JDOHelper.getObjectId(pojo));
  }
  final ObjectAdapter adapter=getAdapterManager().getAdapterFor(pojo);
  final RootOid isisOid=(RootOid)adapter.getOid();
  Class<? extends CallbackFacet> callbackFacetClass;
  if (isisOid.isTransient()) {
    final RootOid persistentOid=getOidGenerator().createPersistent(pojo,isisOid);
    getPersistenceSession().remapAsPersistent(adapter,persistentOid);
    callbackFacetClass=PersistedCallbackFacet.class;
  }
 else {
    callbackFacetClass=UpdatedCallbackFacet.class;
  }
  clearDirtyFor(adapter);
  adapter.setVersion(getVersionIfAny(pojo));
  CallbackUtils.callCallback(adapter,callbackFacetClass);
  ensureFrameworksInAgreement(event);
}
