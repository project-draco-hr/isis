{
  ObjectAdapter adapter=getAdapter(jsonObject);
  final String clsName=jsonObject.getString("_class");
  final ObjectSpecification specification=getSpecification(clsName);
  for (  final ObjectAssociation association : specification.getAssociations()) {
    final String fieldName=association.getId();
    final Object fieldValue=jsonObject.has(fieldName) ? jsonObject.get(fieldName) : null;
    if (association.getSpecification().isEncodeable()) {
      if (fieldValue == null) {
        ((OneToOneAssociation)association).initAssociation(adapter,null);
      }
 else {
        final EncodableFacet encodeableFacet=association.getSpecification().getFacet(EncodableFacet.class);
        final ObjectAdapter fromEncodedString=encodeableFacet.fromEncodedString((String)fieldValue);
        ((OneToOneAssociation)association).initAssociation(adapter,fromEncodedString);
      }
    }
 else     if (association instanceof OneToManyAssociation) {
      final JSONArray collection=(JSONArray)fieldValue;
      for (int i=0; i < collection.length(); i++) {
        final JSONObject jsonElement=(JSONObject)collection.get(i);
        final ObjectAdapter objectToAdd=restoreTransientObject(jsonElement);
        ((OneToManyAssociation)association).addElement(adapter,objectToAdd);
      }
    }
 else {
      if (fieldValue == null) {
        ((OneToOneAssociation)association).initAssociation(adapter,null);
      }
 else {
        if (fieldValue instanceof JSONObject) {
          final ObjectAdapter fieldObject=restoreTransientObject((JSONObject)fieldValue);
          ((OneToOneAssociation)association).initAssociation(adapter,fieldObject);
        }
 else {
          final ObjectAdapter field=mappedObject((String)fieldValue);
          ((OneToOneAssociation)association).initAssociation(adapter,field);
        }
      }
    }
  }
  return adapter;
}
