{
  final char type=id.charAt(0);
  final String[] split=id.split("@");
  final String cls=split[0].substring(1);
  final String oidData=split[1];
  final String aggregatedId=split.length > 2 ? split[2] : null;
  if (oidType == null) {
    oidType=getPersistenceSession().getServices().get(0).getOid().getClass();
  }
  final ObjectSpecification spec=getSpecificationLoader().loadSpecification(cls);
  if ((type == 'T')) {
    TransientObjectMapping mapping=sessionTransients.get(id);
    if (mapping == null) {
      mapping=requestTransients.get(id);
    }
    if (mapping == null) {
      final Object pojo=spec.createObject(CreationMode.NO_INITIALIZE);
      Oid oid=deString(oidData,State.TRANSIENT);
      return getPersistenceSession().recreateAdapter(oid,pojo);
    }
    final ObjectAdapter mappedTransientObject=mapping.getObject();
    LOG.debug("retrieved " + mappedTransientObject.getOid() + " for "+ id);
    return mappedTransientObject;
  }
 else {
    try {
      LOG.debug("decoding " + oidData);
      if (aggregatedId != null) {
        final Oid parentOid=deString(oidData,State.PERSISTENT);
        Oid oid=new AggregatedOid(parentOid,aggregatedId);
        getPersistenceSession().loadObject(parentOid,spec);
        return getAdapterManager().getAdapterFor(oid);
      }
      Oid oid=deString(oidData,State.PERSISTENT);
      return getPersistenceSession().loadObject(oid,spec);
    }
 catch (    final SecurityException e) {
      throw new IsisException(e);
    }
  }
}
