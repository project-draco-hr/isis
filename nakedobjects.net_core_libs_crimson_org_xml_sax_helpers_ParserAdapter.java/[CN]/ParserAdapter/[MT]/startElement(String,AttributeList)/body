{
  Vector exceptions=null;
  if (!namespaces) {
    if (contentHandler != null) {
      attAdapter.setAttributeList(qAtts);
      contentHandler.startElement("","",qName.intern(),attAdapter);
    }
    return;
  }
  nsSupport.pushContext();
  boolean seenDecl=false;
  atts.clear();
  int length=qAtts.getLength();
  for (int i=0; i < length; i++) {
    String attQName=qAtts.getName(i);
    String type=qAtts.getType(i);
    String value=qAtts.getValue(i);
    if (attQName.startsWith("xmlns")) {
      String prefix;
      int n=attQName.indexOf(':');
      if (n == -1) {
        prefix="";
      }
 else {
        prefix=attQName.substring(n + 1);
      }
      if (!nsSupport.declarePrefix(prefix,value)) {
        reportError("Illegal Namespace prefix: " + prefix);
      }
      if (contentHandler != null) {
        contentHandler.startPrefixMapping(prefix,value);
      }
      if (prefixes) {
        atts.addAttribute("","",attQName.intern(),type,value);
      }
      seenDecl=true;
    }
 else {
      try {
        String attName[]=processName(attQName,true,true);
        atts.addAttribute(attName[0],attName[1],attName[2],type,value);
      }
 catch (      SAXException e) {
        if (exceptions == null)         exceptions=new Vector();
        exceptions.addElement(e);
        atts.addAttribute("",attQName,attQName,type,value);
      }
    }
  }
  if (seenDecl) {
    length=atts.getLength();
    for (int i=0; i < length; i++) {
      String attQName=atts.getQName(i);
      if (!attQName.startsWith("xmlns")) {
        String attName[]=processName(attQName,true,false);
        atts.setURI(i,attName[0]);
        atts.setLocalName(i,attName[1]);
      }
    }
  }
 else   if (exceptions != null && errorHandler != null) {
    for (int i=0; i < exceptions.size(); i++) {
      errorHandler.error((SAXParseException)(exceptions.elementAt(i)));
    }
  }
  if (contentHandler != null) {
    String name[]=processName(qName,false,false);
    contentHandler.startElement(name[0],name[1],name[2],atts);
  }
}
