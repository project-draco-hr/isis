{
  metaModelValidator.add(new MetaModelValidatorVisiting(new MetaModelValidatorVisiting.Visitor(){
    @Override public boolean visit(    ObjectSpecification objectSpec,    ValidationFailures validationFailures){
      final Class<?> cls=objectSpec.getCorrespondingClass();
      final Method titleMethod=MethodFinderUtils.findMethod(cls,MethodScope.OBJECT,TITLE_METHOD_NAME,String.class,null);
      if (titleMethod == null) {
        return true;
      }
      final Class<?> supClass=cls.getSuperclass();
      if (supClass == null) {
        return true;
      }
      final List<Method> methods=methodsWithTitleAnnotation(cls);
      final List<Method> superClassMethods=methodsWithTitleAnnotation(supClass);
      if (methods.size() > superClassMethods.size()) {
        validationFailures.add("Conflict for determining a strategy for retrieval of title for class %s " + "that contains a method '%s' and an annotation '@%s'",objectSpec.getIdentifier().getClassName(),TITLE_METHOD_NAME,Title.class.getName());
      }
      return true;
    }
    private List<Method> methodsWithTitleAnnotation(    final Class<?> cls){
      return MethodFinderUtils.findMethodsWithAnnotation(cls,MethodScope.OBJECT,Title.class);
    }
  }
));
}
