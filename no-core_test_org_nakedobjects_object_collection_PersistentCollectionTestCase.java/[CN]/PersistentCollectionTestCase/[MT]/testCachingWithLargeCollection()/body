{
  AbstractNakedCollection collection=new ArbitraryCollection();
  Role[] e=setupCollection(collection,33);
  collection.setDisplaySize(5);
  collection.first();
  checkDisplayElements(collection,e,0);
  assertTrue("..5",collection.hasNext());
  collection.next();
  checkDisplayElements(collection,e,5);
  assertTrue("..10",collection.hasNext());
  collection.next();
  checkDisplayElements(collection,e,10);
  assertTrue("..15",collection.hasNext());
  collection.next();
  checkDisplayElements(collection,e,15);
  assertTrue("..20",collection.hasNext());
  collection.next();
  checkDisplayElements(collection,e,20);
  assertTrue("..25",collection.hasNext());
  collection.next();
  checkDisplayElements(collection,e,25);
  assertTrue("..last",collection.hasNext());
  collection.next();
  checkDisplayElements(collection,e,28);
  assertTrue("..last again",!collection.hasNext());
  collection.next();
  checkDisplayElements(collection,e,28);
  collection.previous();
  assertTrue("..23",collection.hasPrevious());
  checkDisplayElements(collection,e,23);
  assertTrue("..18",collection.hasPrevious());
  collection.previous();
  checkDisplayElements(collection,e,18);
  assertTrue("..13",collection.hasPrevious());
  collection.previous();
  checkDisplayElements(collection,e,13);
  assertTrue("..8",collection.hasPrevious());
  collection.previous();
  checkDisplayElements(collection,e,8);
  assertTrue("..3",collection.hasPrevious());
  collection.previous();
  checkDisplayElements(collection,e,3);
  assertTrue("..first",collection.hasPrevious());
  collection.previous();
  checkDisplayElements(collection,e,0);
  assertTrue("..first again",!collection.hasPrevious());
  collection.previous();
  checkDisplayElements(collection,e,0);
}
