{
  options.add(MenuOptionSet.VIEW,new MenuOption("Quit"){
    public void execute(    Workspace workspace,    View view,    Location at){
      Viewer.this.close();
    }
  }
);
  options.add(MenuOptionSet.DEBUG,loggingOption("Off",Level.OFF));
  options.add(MenuOptionSet.DEBUG,loggingOption("Error",Level.ERROR));
  options.add(MenuOptionSet.DEBUG,loggingOption("Warn",Level.WARN));
  options.add(MenuOptionSet.DEBUG,loggingOption("Info",Level.INFO));
  options.add(MenuOptionSet.DEBUG,loggingOption("Debug",Level.DEBUG));
  String debug="Debug graphics " + (AbstractView.debug ? "off" : "on");
  options.add(MenuOptionSet.DEBUG,new MenuOption(debug){
    public void execute(    Workspace workspace,    View view,    Location at){
      AbstractView.debug=!AbstractView.debug;
      view.markDamaged();
    }
  }
);
  String action=this.isShowingMouseSpy() ? "Hide" : "Show";
  options.add(MenuOptionSet.DEBUG,new MenuOption(action + " mouse spy"){
    public void execute(    Workspace workspace,    View view,    Location at){
      Viewer.this.setShowMouseSpy(!Viewer.this.isShowingMouseSpy());
    }
  }
);
  options.add(MenuOptionSet.DEBUG,new MenuOption("Restart object loader/persistor"){
    public void execute(    Workspace workspace,    View view,    Location at){
      NakedObjects.getObjectPersistor().reset();
      NakedObjects.getObjectLoader().reset();
    }
  }
);
  options.add(MenuOptionSet.DEBUG,new MenuOption("Debug system..."){
    public void execute(    Workspace workspace,    View view,    Location at){
      InfoDebugFrame f=new InfoDebugFrame();
      f.setInfo(new DebugInfo[]{NakedObjects.debug(),NakedObjects.getObjectPersistor(),NakedObjects.getObjectLoader(),NakedObjects.getConfiguration(),NakedObjects.getSpecificationLoader(),updateNotifier});
      f.show(at.x + 50,workspace.getBounds().y + 6);
    }
  }
);
  options.add(MenuOptionSet.DEBUG,new MenuOption("Debug viewer..."){
    public void execute(    Workspace workspace,    View view,    Location at){
      InfoDebugFrame f=new InfoDebugFrame();
      f.setInfo(new DebugInfo[]{Skylark.getViewFactory(),updateNotifier});
      f.show(at.x + 50,workspace.getBounds().y + 6);
    }
  }
);
  options.add(MenuOptionSet.DEBUG,new MenuOption("Debug overlay..."){
    public void execute(    Workspace workspace,    View view,    Location at){
      DebugFrame f=new OverlayDebugFrame(Viewer.this);
      f.show(at.x + 50,workspace.getBounds().y + 6);
    }
  }
);
  options.add(MenuOptionSet.DEBUG,new DebugDumpSnapshotOption());
}
