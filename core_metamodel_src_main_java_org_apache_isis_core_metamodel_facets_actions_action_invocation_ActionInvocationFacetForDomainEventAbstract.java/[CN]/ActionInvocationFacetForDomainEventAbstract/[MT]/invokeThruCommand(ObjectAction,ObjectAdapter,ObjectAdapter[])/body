{
  final CommandContext commandContext=getCommandContext();
  final Command command=commandContext.getCommand();
  final InteractionContext interactionContext=getInteractionContext();
  final Interaction interaction=interactionContext.getInteraction();
  final String actionId=owningAction.getIdentifier().toClassAndNameIdentityString();
  final ObjectAdapter resultAdapter;
  if (command.getExecutor() == Command.Executor.USER && command.getExecuteIn() == org.apache.isis.applib.annotation.Command.ExecuteIn.BACKGROUND) {
    final CommandService commandService=getCommandService();
    if (!commandService.persistIfPossible(command)) {
      throw new IsisException(String.format("Unable to persist command for action '%s'; CommandService does not support persistent commands ",actionId));
    }
    resultAdapter=getAdapterManager().adapterFor(command);
  }
 else {
    final Object target=ObjectAdapter.Util.unwrap(targetAdapter);
    final List<Object> arguments=ObjectAdapter.Util.unwrap(Arrays.asList(argumentAdapters));
    final Interaction.ActionArgs actionArgs=new Interaction.ActionArgs(actionId,target,arguments);
    final Interaction.MemberCallable callable=new Interaction.MemberCallable<Interaction.ActionArgs>(){
      @Override public Object call(      final Interaction.ActionArgs actionArgs){
        try {
          final Object resultPojo=invokeMethodElseFromCache(targetAdapter,argumentAdapters);
          if (LOG.isDebugEnabled()) {
            LOG.debug(" action result " + resultPojo);
          }
          ObjectAdapter resultAdapter=cloneIfViewModelCloneable(resultPojo,targetAdapter);
          return resultAdapter != null ? resultAdapter.getObject() : null;
        }
 catch (        InvocationTargetException|IllegalAccessException e) {
          throw new RuntimeException(e);
        }
      }
    }
;
    interaction.execute(callable,actionArgs,getClockService(),command);
    final Interaction.Execution priorExecution=interaction.getPriorExecution();
    final RuntimeException executionExceptionIfAny=priorExecution.getException();
    if (executionExceptionIfAny != null) {
      throw executionExceptionIfAny;
    }
    resultAdapter=getAdapterManager().adapterFor(priorExecution.getResult());
    setCommandResultIfEntity(command,resultAdapter);
    final PublishedActionFacet publishedActionFacet=getIdentified().getFacet(PublishedActionFacet.class);
    if (publishedActionFacet != null) {
      final IdentifiedHolder identifiedHolder=getIdentified();
      final List<ObjectAdapter> parameterAdapters=Arrays.asList(argumentAdapters);
      getPublishingServiceInternal().publishAction(priorExecution,owningAction,identifiedHolder,targetAdapter,parameterAdapters,resultAdapter);
    }
  }
  return resultAdapter;
}
