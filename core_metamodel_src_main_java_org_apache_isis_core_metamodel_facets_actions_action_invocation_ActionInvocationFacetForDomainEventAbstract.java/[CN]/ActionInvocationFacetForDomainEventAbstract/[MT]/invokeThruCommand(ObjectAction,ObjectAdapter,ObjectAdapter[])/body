{
  final CommandContext commandContext=getCommandContext();
  final Command command=commandContext.getCommand();
  final ObjectAdapter resultAdapter;
  if (command.getExecutor() == Command.Executor.USER && command.getExecuteIn() == org.apache.isis.applib.annotation.Command.ExecuteIn.BACKGROUND) {
    final CommandService commandService=getCommandService();
    if (!commandService.persistIfPossible(command)) {
      throw new IsisException("Unable to schedule action '" + owningAction.getIdentifier().toClassAndNameIdentityString() + "' to run in background: "+ "CommandService does not support persistent commands ");
    }
    resultAdapter=getAdapterManager().adapterFor(command);
  }
 else {
    command.setStartedAt(getClockService().nowAsJavaSqlTimestamp());
    final Object resultPojo=invokeMethodElseFromCache(targetAdapter,arguments);
    if (LOG.isDebugEnabled()) {
      LOG.debug(" action result " + resultPojo);
    }
    resultAdapter=cloneIfViewModelCloneable(resultPojo,targetAdapter);
    setCommandResultIfEntity(command,resultAdapter);
    captureCurrentInvocationForPublishing(owningAction,targetAdapter,arguments,command,resultAdapter);
  }
  return resultAdapter;
}
