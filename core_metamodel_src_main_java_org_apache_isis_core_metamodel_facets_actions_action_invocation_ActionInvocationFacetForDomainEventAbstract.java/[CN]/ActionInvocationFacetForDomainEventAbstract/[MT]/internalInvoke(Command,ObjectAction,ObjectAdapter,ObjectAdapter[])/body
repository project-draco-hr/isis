{
  try {
    final Object[] executionParameters=new Object[arguments.length];
    for (int i=0; i < arguments.length; i++) {
      executionParameters[i]=unwrap(arguments[i]);
    }
    final Object targetPojo=unwrap(targetAdapter);
    final BulkFacet bulkFacet=getFacetHolder().getFacet(BulkFacet.class);
    if (bulkFacet != null) {
      final ActionInvocationContext actionInvocationContext=getActionInvocationContext();
      if (actionInvocationContext != null && actionInvocationContext.getInvokedOn() == null) {
        actionInvocationContext.setInvokedOn(InvokedOn.OBJECT);
        actionInvocationContext.setDomainObjects(Collections.singletonList(targetPojo));
      }
      final Bulk.InteractionContext bulkInteractionContext=getBulkInteractionContext();
      if (bulkInteractionContext != null && bulkInteractionContext.getInvokedAs() == null) {
        bulkInteractionContext.setInvokedAs(Bulk.InteractionContext.InvokedAs.REGULAR);
        actionInvocationContext.setDomainObjects(Collections.singletonList(targetPojo));
      }
    }
    if (command != null && command.getExecutor() == Command.Executor.USER && owningAction != null) {
      if (command.getTarget() != null) {
      }
 else {
        command.setTargetClass(CommandUtil.targetClassNameFor(targetAdapter));
        command.setTargetAction(CommandUtil.targetActionNameFor(owningAction));
        command.setArguments(CommandUtil.argDescriptionFor(owningAction,arguments));
        final Bookmark targetBookmark=CommandUtil.bookmarkFor(targetAdapter);
        command.setTarget(targetBookmark);
      }
      if (Command.ACTION_IDENTIFIER_FOR_EDIT.equals(command.getMemberIdentifier())) {
      }
 else {
        if (command.getMemberIdentifier() == null) {
          command.setMemberIdentifier(CommandUtil.actionIdentifierFor(owningAction));
        }
        if (command.getMemento() == null) {
          final CommandMementoService commandMementoService=getCommandMementoService();
          final Object targetObject=unwrap(targetAdapter);
          final Object[] args=CommandUtil.objectsFor(arguments);
          final CommandMementoDto dto=commandMementoService.asCommandMemento(Collections.singletonList(targetAdapter),owningAction,arguments);
          if (dto != null) {
            final String mementoXml=CommandMementoDtoUtils.toXml(dto);
            command.setMemento(mementoXml);
          }
 else {
            ActionInvocationMemento aim=commandMementoService.asActionInvocationMemento(method,targetObject,args);
            if (aim != null) {
              command.setMemento(aim.asMementoString());
            }
 else {
              String actionIdentifier=owningAction.getIdentifier().toClassAndNameIdentityString();
              throw new IsisException("Unable to build memento for action " + actionIdentifier);
            }
          }
        }
      }
      final CommandFacet commandFacet=getFacetHolder().getFacet(CommandFacet.class);
      if (commandFacet != null && !commandFacet.isDisabled()) {
        command.setExecuteIn(commandFacet.executeIn());
        command.setPersistence(commandFacet.persistence());
      }
 else {
        command.setExecuteIn(org.apache.isis.applib.annotation.Command.ExecuteIn.FOREGROUND);
        command.setPersistence(org.apache.isis.applib.annotation.Command.Persistence.IF_HINTED);
      }
    }
    ObjectAdapter resultAdapter;
    if (command != null && command.getExecutor() == Command.Executor.USER && command.getExecuteIn() == org.apache.isis.applib.annotation.Command.ExecuteIn.BACKGROUND) {
      final CommandService commandService=getCommandService();
      if (!commandService.persistIfPossible(command)) {
        throw new IsisException("Unable to schedule action '" + owningAction.getIdentifier().toClassAndNameIdentityString() + "' to run in background: "+ "CommandService does not support persistent commands ");
      }
      resultAdapter=getAdapterManager().adapterFor(command);
    }
 else {
      if (command != null) {
        command.setStartedAt(Clock.getTimeAsJavaSqlTimestamp());
      }
      final ActionSemanticsFacet semanticsFacet=getFacetHolder().getFacet(ActionSemanticsFacet.class);
      final boolean cacheable=semanticsFacet != null && semanticsFacet.value().isSafeAndRequestCacheable();
      Object result;
      if (cacheable) {
        final QueryResultsCache queryResultsCache=getQueryResultsCache();
        final Object[] targetPojoPlusExecutionParameters=ArrayExtensions.appendT(executionParameters,targetPojo);
        result=queryResultsCache.execute(new Callable<Object>(){
          @Override public Object call() throws Exception {
            return method.invoke(targetPojo,executionParameters);
          }
        }
,targetPojo.getClass(),method.getName(),targetPojoPlusExecutionParameters);
      }
 else {
        result=method.invoke(targetPojo,executionParameters);
      }
      if (LOG.isDebugEnabled()) {
        LOG.debug(" action result " + result);
      }
      if (result == null) {
        if (targetAdapter.getSpecification().isViewModelCloneable(targetAdapter)) {
          final ViewModelFacet facet=targetAdapter.getSpecification().getFacet(ViewModelFacet.class);
          final Object clone=facet.clone(targetAdapter.getObject());
          final ObjectAdapter clonedAdapter=getAdapterManager().adapterFor(clone);
          return InvocationResult.forActionThatReturned(clonedAdapter);
        }
        resultAdapter=null;
      }
 else {
        resultAdapter=getAdapterManager().adapterFor(result);
        if (resultAdapter.getSpecification().isViewModelCloneable(resultAdapter)) {
          final ViewModelFacet facet=resultAdapter.getSpecification().getFacet(ViewModelFacet.class);
          result=facet.clone(result);
          resultAdapter=getAdapterManager().adapterFor(result);
        }
        final TypeOfFacet typeOfFacet=getFacetHolder().getFacet(TypeOfFacet.class);
        resultAdapter.setElementSpecificationProvider(ElementSpecificationProviderFromTypeOfFacet.createFrom(typeOfFacet));
        if (command != null) {
          if (!resultAdapter.getSpecification().containsDoOpFacet(ViewModelFacet.class)) {
            final Bookmark bookmark=CommandUtil.bookmarkFor(resultAdapter);
            command.setResult(bookmark);
          }
        }
        if (currentInvocation.get() == null) {
          final PublishedActionFacet publishedActionFacet=getIdentified().getFacet(PublishedActionFacet.class);
          if (publishedActionFacet != null) {
            currentInvocation.set(new CurrentInvocation(targetAdapter,owningAction,getIdentified(),arguments,resultAdapter,command));
          }
        }
      }
    }
    return InvocationResult.forActionThatReturned(resultAdapter);
  }
 catch (  final IllegalArgumentException e) {
    throw e;
  }
catch (  final InvocationTargetException e) {
    final Throwable targetException=e.getTargetException();
    if (targetException instanceof IllegalStateException) {
      throw new ReflectiveActionException("IllegalStateException thrown while executing " + method + " "+ targetException.getMessage(),targetException);
    }
    if (targetException instanceof RecoverableException) {
      if (!getTransactionState().canCommit()) {
        final Throwable targetExceptionCause=targetException.getCause();
        Throwable nonRecoverableCause=targetExceptionCause != null ? targetExceptionCause : targetException;
        String message=nonRecoverableCause.getMessage();
        if (!Strings.isNullOrEmpty(message)) {
          message=message.substring(0,Math.min(message.length(),300));
          if (message.length() == 300) {
            message+=" ...";
          }
        }
        throw new NonRecoverableException(message,nonRecoverableCause);
      }
    }
    ThrowableExtensions.throwWithinIsisException(e,"Exception executing " + method);
    return InvocationResult.forActionNotInvoked();
  }
catch (  final IllegalAccessException e) {
    throw new ReflectiveActionException("Illegal access of " + method,e);
  }
}
