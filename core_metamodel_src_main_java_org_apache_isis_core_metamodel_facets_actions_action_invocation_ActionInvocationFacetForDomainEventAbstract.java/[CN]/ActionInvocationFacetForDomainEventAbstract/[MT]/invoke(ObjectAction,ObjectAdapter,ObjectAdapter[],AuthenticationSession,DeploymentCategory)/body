{
  final CommandContext commandContext=getServicesInjector().lookupService(CommandContext.class);
  final Command command=commandContext != null ? commandContext.getCommand() : null;
  final ActionDomainEvent<?> event=domainEventHelper.postEventForAction(AbstractDomainEvent.Phase.EXECUTING,eventType,null,owningAction,targetAdapter,arguments,command,null);
  final InvocationResult invocationResult=internalInvoke(command,owningAction,targetAdapter,arguments);
  final ObjectAdapter invocationResultAdapter=invocationResult.getAdapter();
  if (invocationResult.getWhetherInvoked()) {
    domainEventHelper.postEventForAction(AbstractDomainEvent.Phase.EXECUTED,eventType,verify(event),owningAction,targetAdapter,arguments,command,invocationResultAdapter);
  }
  if (invocationResultAdapter != null) {
    final Object result=invocationResultAdapter.getObject();
    final ObjectAdapter resultAdapter=getAdapterManager().adapterFor(result);
    if (result instanceof Collection || result.getClass().isArray()) {
      final CollectionFacet facet=CollectionFacet.Utils.getCollectionFacetFromSpec(resultAdapter);
      final Iterable<ObjectAdapter> adapterList=facet.iterable(resultAdapter);
      final List<ObjectAdapter> visibleAdapters=ObjectAdapter.Util.visibleAdapters(adapterList,authenticationSession,deploymentCategory);
      final Object visibleObjects=CollectionUtils.copyOf(Lists.transform(visibleAdapters,ObjectAdapter.Functions.getObject()),method.getReturnType());
      if (visibleObjects == null) {
        return invocationResultAdapter;
      }
      final ObjectAdapter visibleObjectsAsAdapter=getAdapterManager().adapterFor(visibleObjects);
      return visibleObjectsAsAdapter;
    }
 else {
      boolean visible=ObjectAdapter.Util.isVisible(resultAdapter,authenticationSession,deploymentCategory);
      return visible ? resultAdapter : null;
    }
  }
  return null;
}
