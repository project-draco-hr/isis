{
  final List<ObjectAssociation> associations=adapterSpec.getAssociations(Contributed.INCLUDED);
  final List<String> associationNames=Lists.transform(associations,Functions.compose(StringFunctions.toLowerCase(),ObjectAssociation.Functions.toName()));
  final List<String> associationIds=Lists.transform(associations,Functions.compose(StringFunctions.toLowerCase(),ObjectAssociation.Functions.toId()));
  return new Filter<ObjectAction>(){
    @Override public boolean accept(    ObjectAction t){
      final MemberOrderFacet memberOrderFacet=t.getFacet(MemberOrderFacet.class);
      if (memberOrderFacet == null || Strings.isNullOrEmpty(memberOrderFacet.name())) {
        return true;
      }
      String memberOrderName=StringFunctions.toLowerCase().apply(memberOrderFacet.name());
      return !associationNames.contains(memberOrderName) && !associationIds.contains(memberOrderName);
    }
  }
;
}
