{
  this.props=configuration.asMap();
  for (  final Object service : services) {
    LOG.debug("checking for @PostConstruct and @PostDestroy methods on " + service.getClass().getName());
    final Method[] methods=service.getClass().getMethods();
    for (    final Method method : methods) {
      final PostConstruct postConstructAnnotation=method.getAnnotation(PostConstruct.class);
      if (postConstructAnnotation == null) {
        continue;
      }
      final Method existing=postConstructMethodsByService.get(service);
      if (existing != null) {
        throw new RuntimeException("Found more than one @PostConstruct method; service is: " + service.getClass().getName() + ", found "+ existing.getName()+ " and "+ method.getName());
      }
      final Class<?>[] parameterTypes=method.getParameterTypes();
switch (parameterTypes.length) {
case 0:
        break;
case 1:
      if (Map.class != parameterTypes[0]) {
        throw new RuntimeException("@PostConstruct method must be no-arg or 1-arg accepting java.util.Map; method is: " + service.getClass().getName() + "#"+ method.getName());
      }
    break;
default :
  throw new RuntimeException("@PostConstruct method must be no-arg or 1-arg accepting java.util.Map; method is: " + service.getClass().getName() + "#"+ method.getName());
}
postConstructMethodsByService.put(service,method);
}
for (final Method method : methods) {
final PreDestroy preDestroyAnnotation=method.getAnnotation(PreDestroy.class);
if (preDestroyAnnotation == null) {
continue;
}
final Method existing=preDestroyMethodsByService.get(service);
if (existing != null) {
throw new RuntimeException("Found more than one @PreDestroy method; service is: " + service.getClass().getName() + ", found "+ existing.getName()+ " and "+ method.getName());
}
final Class<?>[] parameterTypes=method.getParameterTypes();
switch (parameterTypes.length) {
case 0:
break;
default :
throw new RuntimeException("@PreDestroy method must be no-arg; method is: " + service.getClass().getName() + "#"+ method.getName());
}
preDestroyMethodsByService.put(service,method);
}
}
}
