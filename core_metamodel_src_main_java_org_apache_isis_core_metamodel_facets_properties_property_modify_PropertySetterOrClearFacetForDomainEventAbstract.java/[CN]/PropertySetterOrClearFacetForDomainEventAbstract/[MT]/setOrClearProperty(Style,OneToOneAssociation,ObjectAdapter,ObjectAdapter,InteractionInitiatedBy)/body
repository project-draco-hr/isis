{
  if (!style.hasCorrespondingFacet(this)) {
    return;
  }
  final CommandContext commandContext=getCommandContext();
  final Command command=commandContext.getCommand();
  final InteractionContext interactionContext=getInteractionContext();
  final Interaction interaction=interactionContext.getInteraction();
  final String propertyId=owningProperty.getIdentifier().toClassAndNameIdentityString();
  if (command.getExecutor() == Command.Executor.USER && command.getExecuteIn() == org.apache.isis.applib.annotation.Command.ExecuteIn.BACKGROUND) {
    final CommandService commandService=getCommandService();
    if (!commandService.persistIfPossible(command)) {
      throw new IsisException(String.format("Unable to persist command for property '%s'; CommandService does not support persistent commands ",propertyId));
    }
  }
 else {
    final Object target=ObjectAdapter.Util.unwrap(targetAdapter);
    final Object argValue=ObjectAdapter.Util.unwrap(newValueAdapter);
    final Interaction.PropertyEdit execution=new Interaction.PropertyEdit(interaction,propertyId,target,argValue);
    final Interaction.MemberExecutor<Interaction.PropertyEdit> executor=new Interaction.MemberExecutor<Interaction.PropertyEdit>(){
      @Override public Object execute(      final Interaction.PropertyEdit currentExecution){
        try {
          final PropertyEditDto editDto=getInteractionDtoServiceInternal().asPropertyEditDto(owningProperty,targetAdapter,newValueAdapter);
          currentExecution.setDto(editDto);
          final Timestamp startedAt=getClockService().nowAsJavaSqlTimestamp();
          execution.setStartedAt(startedAt);
          if (command.getStartedAt() == null) {
            command.setStartedAt(startedAt);
          }
          final Object oldValue=getterFacet.getProperty(targetAdapter,interactionInitiatedBy);
          final Object newValue=ObjectAdapter.Util.unwrap(newValueAdapter);
          final PropertyDomainEvent<?,?> event=domainEventHelper.postEventForProperty(AbstractDomainEvent.Phase.EXECUTING,eventType(),null,getIdentified(),targetAdapter,oldValue,newValue);
          currentExecution.setEvent(event);
          style.invoke(PropertySetterOrClearFacetForDomainEventAbstract.this,owningProperty,targetAdapter,newValueAdapter,interactionInitiatedBy);
          final Object actualNewValue=getterFacet.getProperty(targetAdapter,interactionInitiatedBy);
          if (!Objects.equal(oldValue,actualNewValue)) {
            domainEventHelper.postEventForProperty(AbstractDomainEvent.Phase.EXECUTED,eventType(),verify(event),getIdentified(),targetAdapter,oldValue,actualNewValue);
          }
          return null;
        }
  finally {
        }
      }
    }
;
    interaction.execute(executor,execution);
    final Interaction.Execution priorExecution=interaction.getPriorExecution();
    final Exception executionExceptionIfAny=priorExecution.getThrew();
    if (executionExceptionIfAny != null) {
      throw executionExceptionIfAny instanceof RuntimeException ? ((RuntimeException)executionExceptionIfAny) : new RuntimeException(executionExceptionIfAny);
    }
    final PublishedPropertyFacet publishedPropertyFacet=getIdentified().getFacet(PublishedPropertyFacet.class);
    if (publishedPropertyFacet != null) {
      getPublishingServiceInternal().publishProperty(priorExecution);
    }
  }
}
