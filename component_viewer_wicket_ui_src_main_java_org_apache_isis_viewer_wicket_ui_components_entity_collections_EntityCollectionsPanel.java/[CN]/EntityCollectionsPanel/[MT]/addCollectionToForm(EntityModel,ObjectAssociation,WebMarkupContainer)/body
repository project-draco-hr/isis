{
  final CssClassFacet facet=association.getFacet(CssClassFacet.class);
  if (facet != null) {
    collectionRvContainer.add(new CssClassAppender(facet.value()));
  }
  final WebMarkupContainer fieldset=new WebMarkupContainer(ID_COLLECTION_GROUP);
  collectionRvContainer.add(fieldset);
  final OneToManyAssociation otma=(OneToManyAssociation)association;
  final CollectionPanel collectionPanel=new CollectionPanel(ID_COLLECTION,entityModel,otma);
  fieldset.addOrReplace(collectionPanel);
  Label labelComponent=collectionPanel.createLabel(ID_COLLECTION_NAME,association.getName());
  fieldset.add(labelComponent);
  final EntityCollectionModel entityCollectionModel=collectionPanel.getModel();
  List<LinkAndLabel> links=entityCollectionModel.getLinks();
  AdditionalLinksPanel additionalLinks=new AdditionalLinksPanel(ID_ADDITIONAL_LINKS,links);
  fieldset.addOrReplace(additionalLinks);
  final CollectionSelectorHelper selectorHelper=new CollectionSelectorHelper(entityCollectionModel,getComponentFactoryRegistry());
  final List<ComponentFactory> componentFactories=selectorHelper.findOtherComponentFactories(getComponentFactoryRegistry());
  if (componentFactories.size() <= 1) {
    permanentlyHide(ID_SELECTOR_DROPDOWN);
  }
 else {
    CollectionSelectorPanel selectorDropdownPanel;
    selectorDropdownPanel=new CollectionSelectorPanel(ID_SELECTOR_DROPDOWN,entityCollectionModel,new CollectionContentsMultipleViewsPanelFactory());
    final Model<ComponentFactory> componentFactoryModel=new Model<>();
    final int selected=selectorHelper.honourViewHintElseDefault(selectorDropdownPanel);
    ComponentFactory selectedComponentFactory=componentFactories.get(selected);
    componentFactoryModel.setObject(selectedComponentFactory);
    this.setOutputMarkupId(true);
    fieldset.addOrReplace(selectorDropdownPanel);
    collectionPanel.setSelectorDropdownPanel(selectorDropdownPanel);
  }
}
