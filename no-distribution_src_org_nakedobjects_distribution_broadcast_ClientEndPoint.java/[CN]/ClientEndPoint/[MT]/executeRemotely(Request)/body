{
  ObjectInputStream in=null;
  ObjectOutputStream out=null;
  try {
    Socket s=new Socket(server,port);
    InputStream is=s.getInputStream();
    CounterOutputStream cos=new CounterOutputStream(s.getOutputStream());
    out=new ObjectOutputStream(cos);
    LOG.info("Request for " + server + "/"+ port+ ": "+ request+ " "+ ObjectStreamClass.lookup(request.getClass()).getSerialVersionUID());
    out.writeObject(request);
    in=new ObjectInputStream(is);
    Serializable response=(Serializable)in.readObject();
    if (response instanceof NakedObjectException) {
      LOG.debug("Expected exception on server during request " + request,(NakedObjectException)response);
    }
 else     if (response instanceof Throwable) {
      LOG.error("Java Exception on server during request " + request,(Throwable)response);
      throw new NakedObjectRuntimeException((Throwable)response);
    }
    LOG.info("Response = " + response + " "+ ((response == null) ? "" : ("[version=" + ObjectStreamClass.lookup(response.getClass()).getSerialVersionUID() + "]")));
    return response;
  }
 catch (  UnknownHostException e) {
    throw new RuntimeException("Could not find the server at " + server + "/"+ port);
  }
catch (  ConnectException e) {
    throw new RuntimeException("Failed to connect to server at " + server + "/"+ port);
  }
catch (  IOException e) {
    LOG.error("Request to server failed: " + request,e);
    throw new RuntimeException("Request to server failed: " + request);
  }
catch (  ClassNotFoundException e) {
    throw new RuntimeException("Server returned an unknown class: " + e.getMessage());
  }
 finally {
    if (in != null) {
      try {
        in.close();
      }
 catch (      IOException ignore) {
        LOG.error("Error while closing socket input stream",ignore);
      }
    }
    if (out != null) {
      try {
        out.close();
      }
 catch (      IOException ignore) {
        LOG.error("Error while closing socket output stream",ignore);
      }
    }
  }
}
