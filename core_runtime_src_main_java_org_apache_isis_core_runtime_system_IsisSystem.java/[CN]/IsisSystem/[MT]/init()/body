{
  if (initialized) {
    throw new IllegalStateException("Already initialized");
  }
  initialized=true;
  LOG.info("initialising Isis System");
  LOG.info("working directory: " + new File(".").getAbsolutePath());
  final IsisConfigurationDefault configuration=componentProvider.getConfiguration();
  LOG.info("resource stream source: " + configuration.getResourceStreamSource());
  localeInitializer.initLocale(configuration);
  timeZoneInitializer.initTimeZone(configuration);
  if (!getDeploymentCategory().isProduction() && !Clock.isInitialized()) {
    FixtureClock.initialize();
  }
  try {
    final ServicesInjector servicesInjector=componentProvider.provideServiceInjector(configuration);
    servicesInjector.addFallbackIfRequired(FixtureScripts.class,new FixtureScriptsDefault());
    servicesInjector.addFallbackIfRequired(ConfigurationServiceInternal.class,configuration);
    servicesInjector.validateServices();
    final AuthenticationManager authenticationManager=componentProvider.provideAuthenticationManager();
    servicesInjector.addFallbackIfRequired(AuthenticationManager.class,authenticationManager);
    final AuthorizationManager authorizationManager=componentProvider.provideAuthorizationManager();
    servicesInjector.addFallbackIfRequired(AuthorizationManager.class,authorizationManager);
    final Collection<MetaModelRefiner> metaModelRefiners=refiners(authenticationManager,authorizationManager,new PersistenceSessionFactoryMetamodelRefiner());
    final SpecificationLoader specificationLoader=componentProvider.provideSpecificationLoader(deploymentCategory,servicesInjector,metaModelRefiners);
    servicesInjector.addFallbackIfRequired(SpecificationLoader.class,specificationLoader);
    final PersistenceSessionFactory persistenceSessionFactory=new PersistenceSessionFactory(configuration);
    servicesInjector.addFallbackIfRequired(PersistenceSessionFactory.class,persistenceSessionFactory);
    isisSessionFactory=new IsisSessionFactory(deploymentCategory,servicesInjector);
    servicesInjector.addFallbackIfRequired(IsisSessionFactory.class,isisSessionFactory);
    servicesInjector.addFallbackIfRequired(OidMarshaller.class,isisSessionFactory.getOidMarshaller());
    for (    Object service : servicesInjector.getRegisteredServices()) {
      servicesInjector.injectInto(service);
    }
    IsisContext.setSessionFactory(isisSessionFactory);
    try {
      specificationLoader.init();
      specificationLoader.validateAndAssert();
      authenticationManager.init();
      authorizationManager.init();
      persistenceSessionFactory.init();
      serviceInitializer=new ServiceInitializer(configuration,servicesInjector.getRegisteredServices());
      serviceInitializer.validate();
      isisSessionFactory.openSession(new InitialisationSession());
      try {
        IsisTransactionManager transactionManager=getCurrentSessionTransactionManager();
        transactionManager.startTransaction();
        try {
          serviceInitializer.postConstruct();
        }
 catch (        RuntimeException ex) {
          transactionManager.getCurrentTransaction().setAbortCause(new IsisTransactionManagerException(ex));
        }
 finally {
          transactionManager.endTransaction();
        }
        final FixturesInstaller fixtureInstaller=componentProvider.provideFixturesInstaller();
        fixtureInstaller.installFixtures();
        if (!deploymentCategory.isProduction()) {
          logonFixture=fixtureInstaller.getLogonFixture();
        }
        final List<Object> services=servicesInjector.getRegisteredServices();
        final TitleService titleService=servicesInjector.lookupServiceElseFail(TitleService.class);
        for (        Object service : services) {
          final String unused=titleService.titleOf(service);
        }
        for (        final ObjectSpecification objSpec : servicesInjector.getSpecificationLoader().allSpecifications()) {
          final Class<?> correspondingClass=objSpec.getCorrespondingClass();
          if (correspondingClass.isEnum()) {
            final Object[] enumConstants=correspondingClass.getEnumConstants();
            for (            Object enumConstant : enumConstants) {
              final String unused=titleService.titleOf(enumConstant);
            }
          }
        }
        final TranslationService translationService=servicesInjector.lookupServiceElseFail(TranslationService.class);
        final String context=IsisSystem.class.getName();
        translationService.translate(context,MSG_ARE_YOU_SURE);
        translationService.translate(context,MSG_CONFIRM);
        translationService.translate(context,MSG_CANCEL);
      }
  finally {
        isisSessionFactory.closeSession();
      }
    }
 catch (    final MetaModelInvalidException ex) {
      if (LOG.isDebugEnabled()) {
        LOG.debug("Meta model invalid",ex);
      }
      IsisContext.setMetaModelInvalidException(ex);
    }
  }
 catch (  final IsisSystemException ex) {
    LOG.error("failed to initialise",ex);
    throw new RuntimeException(ex);
  }
}
