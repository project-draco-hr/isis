{
  if (initialized) {
    throw new IllegalStateException("Already initialized");
  }
 else {
    initialized=true;
  }
  LOG.info("initialising Isis System");
  LOG.info("working directory: " + new File(".").getAbsolutePath());
  LOG.info("resource stream source: " + getConfiguration().getResourceStreamSource());
  localeInitializer.initLocale(getConfiguration());
  timeZoneInitializer.initTimeZone(getConfiguration());
  if (!deploymentType.isProduction() && !Clock.isInitialized()) {
    FixtureClock.initialize();
  }
  try {
    final IsisConfigurationDefault configuration=(IsisConfigurationDefault)isisComponentProvider.getConfiguration();
    ServicesInjectorDefault servicesInjector=isisComponentProvider.provideServiceInjector();
    servicesInjector.addFallbackIfRequired(FixtureScripts.class,new FixtureScriptsDefault());
    servicesInjector.addFallbackIfRequired(ConfigurationServiceInternal.class,configuration);
    servicesInjector.validateServices();
    final AuthenticationManager authenticationManager=isisComponentProvider.provideAuthenticationManager(deploymentType);
    final AuthorizationManager authorizationManager=isisComponentProvider.provideAuthorizationManager(deploymentType);
    final Collection<MetaModelRefiner> metaModelRefiners=refiners(authenticationManager,authorizationManager,new PersistenceSessionFactoryMetamodelRefiner());
    final SpecificationLoader specificationLoader=isisComponentProvider.provideSpecificationLoader(deploymentType,servicesInjector,metaModelRefiners);
    final PersistenceSessionFactory persistenceSessionFactory=isisComponentProvider.providePersistenceSessionFactory(deploymentType,servicesInjector,specificationLoader);
    final RuntimeContextFromSession runtimeContext=new RuntimeContextFromSession(deploymentType.getDeploymentCategory(),configuration,servicesInjector,specificationLoader);
    runtimeContext.injectInto(specificationLoader);
    for (    Object service : servicesInjector.getRegisteredServices()) {
      runtimeContext.injectInto(service);
    }
    sessionFactory=new IsisSessionFactory(deploymentType,configuration,servicesInjector,specificationLoader,authenticationManager,authorizationManager,persistenceSessionFactory);
    IsisContext.setConfiguration(configuration);
    deploymentType.initContext(sessionFactory);
    specificationLoader.init(runtimeContext);
    try {
      specificationLoader.validateAndAssert();
      authenticationManager.init();
      authorizationManager.init();
      persistenceSessionFactory.init();
      this.serviceInitializer=initializeServices();
      installFixturesIfRequired();
      translateServicesAndEnumConstants();
    }
 catch (    final MetaModelInvalidException ex) {
      if (LOG.isDebugEnabled()) {
        LOG.debug("Meta model invalid",ex);
      }
      IsisContext.setMetaModelInvalidException(ex);
    }
  }
 catch (  final IsisSystemException ex) {
    LOG.error("failed to initialise",ex);
    throw new RuntimeException(ex);
  }
}
