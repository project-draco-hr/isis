{
  if (initialized) {
    throw new IllegalStateException("Already initialized");
  }
  initialized=true;
  LOG.info("initialising Isis System");
  LOG.info("working directory: " + new File(".").getAbsolutePath());
  final IsisConfigurationDefault configuration=componentProvider.getConfiguration();
  LOG.info("resource stream source: " + configuration.getResourceStreamSource());
  localeInitializer.initLocale(configuration);
  timeZoneInitializer.initTimeZone(configuration);
  if (!getDeploymentCategory().isProduction() && !Clock.isInitialized()) {
    FixtureClock.initialize();
  }
  try {
    ServicesInjector servicesInjector=componentProvider.provideServiceInjector(configuration);
    servicesInjector.addFallbackIfRequired(FixtureScripts.class,new FixtureScriptsDefault());
    servicesInjector.addFallbackIfRequired(ConfigurationServiceInternal.class,configuration);
    servicesInjector.validateServices();
    final AuthenticationManager authenticationManager=componentProvider.provideAuthenticationManager();
    servicesInjector.addFallbackIfRequired(AuthenticationManager.class,authenticationManager);
    final AuthorizationManager authorizationManager=componentProvider.provideAuthorizationManager();
    servicesInjector.addFallbackIfRequired(AuthorizationManager.class,authorizationManager);
    final Collection<MetaModelRefiner> metaModelRefiners=refiners(authenticationManager,authorizationManager,new PersistenceSessionFactoryMetamodelRefiner());
    final SpecificationLoader specificationLoader=componentProvider.provideSpecificationLoader(deploymentCategory,servicesInjector,metaModelRefiners);
    servicesInjector.addFallbackIfRequired(SpecificationLoader.class,specificationLoader);
    final PersistenceSessionFactory persistenceSessionFactory=componentProvider.providePersistenceSessionFactory(deploymentCategory,servicesInjector);
    servicesInjector.addFallbackIfRequired(PersistenceSessionFactory.class,persistenceSessionFactory);
    for (    Object service : servicesInjector.getRegisteredServices()) {
      servicesInjector.injectInto(service);
    }
    sessionFactory=new IsisSessionFactory(deploymentCategory,servicesInjector);
    IsisContext.set(sessionFactory);
    try {
      specificationLoader.init();
      specificationLoader.validateAndAssert();
      authenticationManager.init();
      authorizationManager.init();
      persistenceSessionFactory.init();
      serviceInitializer=new ServiceInitializer(configuration,servicesInjector.getRegisteredServices());
      serviceInitializer.validate();
      postConstructInSession(serviceInitializer);
      installFixturesIfRequired();
      translateServicesAndEnumConstants();
    }
 catch (    final MetaModelInvalidException ex) {
      if (LOG.isDebugEnabled()) {
        LOG.debug("Meta model invalid",ex);
      }
      IsisContext.setMetaModelInvalidException(ex);
    }
  }
 catch (  final IsisSystemException ex) {
    LOG.error("failed to initialise",ex);
    throw new RuntimeException(ex);
  }
}
