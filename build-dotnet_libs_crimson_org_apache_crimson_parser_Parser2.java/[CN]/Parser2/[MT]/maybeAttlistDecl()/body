{
  InputEntity start=peekDeclaration("!ATTLIST");
  if (start == null)   return false;
  String name=getMarkupDeclname("F-016",true);
  ElementDecl element=(ElementDecl)elements.get(name);
  if (element == null) {
    element=new ElementDecl(name);
    if (!ignoreDeclarations)     elements.put(name,element);
  }
  maybeWhitespace();
  while (!peek(">")) {
    name=maybeGetName();
    if (name == null)     fatal("P-044",new Object[]{new Character(getc())});
    whitespace("F-001");
    AttributeDecl a=new AttributeDecl(name);
    a.isFromInternalSubset=!inExternalPE;
    if (peek(AttributeDecl.CDATA))     a.type=AttributeDecl.CDATA;
 else     if (peek(AttributeDecl.IDREFS))     a.type=AttributeDecl.IDREFS;
 else     if (peek(AttributeDecl.IDREF))     a.type=AttributeDecl.IDREF;
 else     if (peek(AttributeDecl.ID)) {
      a.type=AttributeDecl.ID;
      if (element.id != null) {
        if (supportValidation && isValidating)         error("V-016",new Object[]{element.id});
      }
 else       element.id=name;
    }
 else     if (peek(AttributeDecl.ENTITY))     a.type=AttributeDecl.ENTITY;
 else     if (peek(AttributeDecl.ENTITIES))     a.type=AttributeDecl.ENTITIES;
 else     if (peek(AttributeDecl.NMTOKENS))     a.type=AttributeDecl.NMTOKENS;
 else     if (peek(AttributeDecl.NMTOKEN))     a.type=AttributeDecl.NMTOKEN;
 else     if (peek(AttributeDecl.NOTATION)) {
      a.type=AttributeDecl.NOTATION;
      whitespace("F-002");
      nextChar('(',"F-029",null);
      maybeWhitespace();
      Vector v=new Vector();
      do {
        if ((name=maybeGetName()) == null)         fatal("P-068");
        if (supportValidation && isValidating && notations.get(name) == null)         notations.put(name,name);
        v.addElement(name);
        maybeWhitespace();
        if (peek("|"))         maybeWhitespace();
      }
 while (!peek(")"));
      a.values=new String[v.size()];
      for (int i=0; i < v.size(); i++)       a.values[i]=(String)v.elementAt(i);
    }
 else     if (peek("(")) {
      a.type=AttributeDecl.ENUMERATION;
      maybeWhitespace();
      Vector v=new Vector();
      do {
        name=getNmtoken();
        v.addElement(name);
        maybeWhitespace();
        if (peek("|"))         maybeWhitespace();
      }
 while (!peek(")"));
      a.values=new String[v.size()];
      for (int i=0; i < v.size(); i++)       a.values[i]=(String)v.elementAt(i);
    }
 else     fatal("P-045",new Object[]{name,new Character(getc())});
    whitespace("F-003");
    if (peek("#REQUIRED")) {
      a.valueDefault=AttributeDecl.REQUIRED;
      a.isRequired=true;
    }
 else     if (peek("#FIXED")) {
      if (supportValidation && isValidating && a.type == AttributeDecl.ID)       error("V-017",new Object[]{a.name});
      a.valueDefault=AttributeDecl.FIXED;
      a.isFixed=true;
      whitespace("F-004");
      doLexicalPE=false;
      parseLiteral(false);
      doLexicalPE=true;
      if (a.type != AttributeDecl.CDATA)       a.defaultValue=normalize(false);
 else       a.defaultValue=strTmp.toString();
      if (a.type != AttributeDecl.CDATA)       validateAttributeSyntax(a,a.defaultValue);
    }
 else     if (peek("#IMPLIED")) {
      a.valueDefault=AttributeDecl.IMPLIED;
    }
 else {
      if (supportValidation && isValidating && a.type == AttributeDecl.ID)       error("V-018",new Object[]{a.name});
      doLexicalPE=false;
      parseLiteral(false);
      doLexicalPE=true;
      if (a.type != AttributeDecl.CDATA)       a.defaultValue=normalize(false);
 else       a.defaultValue=strTmp.toString();
      if (a.type != AttributeDecl.CDATA)       validateAttributeSyntax(a,a.defaultValue);
    }
    if (XmlLang.equals(a.name) && a.defaultValue != null && !isXmlLang(a.defaultValue))     error("P-033",new Object[]{a.defaultValue});
    if (!ignoreDeclarations && element.attributes.get(a.name) == null) {
      element.attributes.put(a.name,a);
      String saxType;
      if (a.type == AttributeDecl.ENUMERATION || a.type == AttributeDecl.NOTATION) {
        StringBuffer fullType=new StringBuffer();
        if (a.type == AttributeDecl.NOTATION) {
          fullType.append(a.type);
          fullType.append(" ");
        }
        if (a.values.length > 1) {
          fullType.append("(");
        }
        for (int i=0; i < a.values.length; i++) {
          fullType.append(a.values[i]);
          if (i + 1 < a.values.length) {
            fullType.append("|");
          }
        }
        if (a.values.length > 1) {
          fullType.append(")");
        }
        saxType=fullType.toString();
      }
 else {
        saxType=a.type;
      }
      declHandler.attributeDecl(element.name,a.name,saxType,a.valueDefault,a.defaultValue);
    }
    maybeWhitespace();
  }
  if (supportValidation && isValidating && start != in)   error("V-013",null);
  return true;
}
