{
  cellItem.add(new CssClassAppender("togglebox-column"));
  final MarkupContainer row=cellItem.getParent().getParent();
  row.setOutputMarkupId(true);
  final EntityModel entityModel=(EntityModel)rowModel;
  String concurrencyExceptionIfAny=entityModel.getAndClearConcurrencyExceptionIfAny();
  if (concurrencyExceptionIfAny != null) {
    row.add(new CssClassAppender("reloaded-after-concurrency-exception"));
  }
  final ContainedToggleboxPanel toggle=new ContainedToggleboxPanel(componentId){
    private static final long serialVersionUID=1L;
    @Override public void onSubmit(    AjaxRequestTarget target){
      final EntityModel entityModel=(EntityModel)rowModel;
      ObjectAdapter selectedAdapter=null;
      try {
        selectedAdapter=entityModel.load(ConcurrencyChecking.CHECK);
        if (onSelectionHandler != null) {
          onSelectionHandler.onSelected(this,selectedAdapter,target);
        }
      }
 catch (      ConcurrencyException ex) {
        selectedAdapter=entityModel.load(ConcurrencyChecking.CHECK);
        if (onConcurrencyExceptionHandler != null) {
          onConcurrencyExceptionHandler.onConcurrencyException(this,selectedAdapter,ex,target);
        }
        entityModel.setException(ex);
      }
    }
  }
;
  rowToggles.add(toggle);
  toggle.setOutputMarkupId(true);
  cellItem.add(toggle);
}
