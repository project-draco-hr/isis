{
  DomainObjectResource domainObjectResource=client.getDomainObjectResource();
  Response domainObjectResp=domainObjectResource.object("OID:1");
  RestfulResponse<DomainObjectRepresentation> domainObjectJsonResp=RestfulResponse.of(domainObjectResp,DomainObjectRepresentation.class);
  assertThat(domainObjectJsonResp.getStatus().getFamily(),is(Family.SUCCESSFUL));
  DomainObjectRepresentation domainObjectRepr=domainObjectJsonResp.getEntity();
  Link self=domainObjectRepr.getSelf();
  assertThat(self,isLink().rel("object").href(matches(".+objects/OID:1")).method(Method.GET));
  assertThat(domainObjectRepr.getTitle(),is("ApplibValues"));
  assertThat(domainObjectRepr.getOid(),is("OID:1"));
  Link selfIcon=domainObjectRepr.getLink("_self.icon");
  assertThat(selfIcon,isLink().rel("icon").href(matches(".+" + "/images/" + "null\\.png")).method(Method.GET));
  JsonRepresentation properties=domainObjectRepr.getProperties();
  assertThat(properties.mapSize(),is(1));
  JsonRepresentation idProperty=properties.getRepresentation("id");
  assertThat(idProperty.getString("memberType"),is("property"));
  assertThat(idProperty.getString("propertyId"),is("id"));
  assertThat(idProperty.getString("value"),is(org.apache.isis.tck.objstore.dflt.scalars.ApplibValuedEntityRepositoryDefault.class.getName()));
  assertThat(idProperty.getString("disabledReason"),is(not(nullValue())));
  Link idPropertyType=idProperty.getLink("type");
  assertThat(idPropertyType,isLink().rel("type").href(matches(".+vnd\\.string\\+json")).method(Method.GET));
  Link idPropertyDetails=idProperty.getLink("details");
  assertThat(idPropertyDetails,isLink().rel("property").href(self.getHref() + "/properties/id").method(Method.GET));
  JsonRepresentation actions=domainObjectRepr.getActions();
  assertThat(actions.mapSize(),is(2));
  JsonRepresentation listAction=actions.getRepresentation("list");
  assertThat(listAction.getString("memberType"),is("action"));
  assertThat(listAction.getString("actionId"),is("list"));
  assertThat(listAction.getString("actionType"),is("USER"));
  assertThat(listAction.getInt("numParameters"),is(0));
  Link listActionType=listAction.getLink("type");
  assertThat(listActionType.getRel(),is("type"));
  assertThat(listActionType.getHref(),matches(".+vnd\\.list\\+json"));
  assertThat(listActionType.getMethod(),is(Method.GET));
  Link listActionDetails=listAction.getLink("details");
  assertThat(listActionDetails.getRel(),is("action"));
  assertThat(listActionDetails.getHref(),is(self.getHref() + "/actions/list"));
  assertThat(listActionDetails.getMethod(),is(Method.GET));
  JsonRepresentation newEntityAction=actions.getRepresentation("newEntity");
  assertThat(newEntityAction.getString("memberType"),is("action"));
  assertThat(newEntityAction.getString("actionType"),is("USER"));
  assertThat(newEntityAction.getInt("numParameters"),is(0));
  Link newEntityActionType=newEntityAction.getLink("type");
  assertThat(newEntityActionType.getRel(),is("type"));
  assertThat(newEntityActionType.getHref(),matches(".+vnd\\." + ApplibValuedEntity.class.getName() + "\\+json"));
  assertThat(newEntityActionType.getMethod(),is(Method.GET));
  Link newEntityActionDetails=newEntityAction.getLink("details");
  assertThat(newEntityActionDetails.getRel(),is("action"));
  assertThat(newEntityActionDetails.getHref(),is(self.getHref() + "/actions/newEntity"));
  assertThat(newEntityActionDetails.getMethod(),is(Method.GET));
}
