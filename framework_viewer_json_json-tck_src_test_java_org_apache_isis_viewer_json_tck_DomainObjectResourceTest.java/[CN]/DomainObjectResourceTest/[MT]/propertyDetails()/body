{
  DomainObjectResource domainObjectResource=client.getDomainObjectResource();
  Response idPropertyResp=domainObjectResource.propertyDetails("OID:1","id");
  RestfulResponse<PropertyDetailsRepresentation> idPropertyJsonResp=RestfulResponse.of(idPropertyResp,PropertyDetailsRepresentation.class);
  assertThat(idPropertyJsonResp.getStatus().getFamily(),is(Family.SUCCESSFUL));
  PropertyDetailsRepresentation propertyDetailsRepr=idPropertyJsonResp.getEntity();
  Link selfLink=propertyDetailsRepr.getLink("_self.link");
  assertThat(selfLink.getRel(),is("member"));
  assertThat(selfLink.getHref(),matches(".+objects/OID:1/properties/id"));
  assertThat(selfLink.getMethod(),is(Method.GET));
  Link selfObject=propertyDetailsRepr.getLink("_self.object");
  assertThat(selfObject.getRel(),is("object"));
  assertThat(selfObject.getHref(),matches(".+objects/OID:1"));
  assertThat(selfObject.getMethod(),is(Method.GET));
  Link type=propertyDetailsRepr.getLink("type");
  assertThat(type.getRel(),is("type"));
  assertThat(type.getHref(),matches(".+vnd\\.string\\+json"));
  assertThat(type.getMethod(),is(Method.GET));
  assertThat(propertyDetailsRepr.getString("memberType"),is("property"));
  assertThat(propertyDetailsRepr.getString("value"),is(org.apache.isis.tck.objstore.dflt.scalars.ApplibValuedEntityRepositoryDefault.class.getName()));
  assertThat(propertyDetailsRepr.getString("disabledReason"),is(not(nullValue())));
}
