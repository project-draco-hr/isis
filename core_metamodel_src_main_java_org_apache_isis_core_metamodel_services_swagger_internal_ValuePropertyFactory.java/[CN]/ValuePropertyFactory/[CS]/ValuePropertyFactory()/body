{
  final Factory booleanFactory=new Factory(){
    @Override public Property newProperty(){
      return new BooleanProperty();
    }
  }
;
  propertyFactoryByClass.put(boolean.class,booleanFactory);
  propertyFactoryByClass.put(Boolean.class,booleanFactory);
  final Factory integerFactory=new Factory(){
    @Override public Property newProperty(){
      return new IntegerProperty();
    }
  }
;
  propertyFactoryByClass.put(byte.class,integerFactory);
  propertyFactoryByClass.put(Byte.class,integerFactory);
  propertyFactoryByClass.put(short.class,integerFactory);
  propertyFactoryByClass.put(Short.class,integerFactory);
  propertyFactoryByClass.put(int.class,integerFactory);
  propertyFactoryByClass.put(Integer.class,integerFactory);
  propertyFactoryByClass.put(BigInteger.class,integerFactory);
  final Factory longFactory=new Factory(){
    @Override public Property newProperty(){
      return new LongProperty();
    }
  }
;
  propertyFactoryByClass.put(long.class,longFactory);
  propertyFactoryByClass.put(Long.class,longFactory);
  propertyFactoryByClass.put(java.sql.Timestamp.class,longFactory);
  final Factory decimalFactory=new Factory(){
    @Override public Property newProperty(){
      return new DecimalProperty();
    }
  }
;
  propertyFactoryByClass.put(BigDecimal.class,decimalFactory);
  final Factory floatFactory=new Factory(){
    @Override public Property newProperty(){
      return new FloatProperty();
    }
  }
;
  propertyFactoryByClass.put(float.class,floatFactory);
  propertyFactoryByClass.put(Float.class,floatFactory);
  final Factory doubleFactory=new Factory(){
    @Override public Property newProperty(){
      return new DoubleProperty();
    }
  }
;
  propertyFactoryByClass.put(double.class,doubleFactory);
  propertyFactoryByClass.put(Double.class,doubleFactory);
  final Factory stringFactory=new Factory(){
    @Override public Property newProperty(){
      return new StringProperty();
    }
  }
;
  propertyFactoryByClass.put(char[].class,stringFactory);
  propertyFactoryByClass.put(String.class,stringFactory);
  final Factory uuidFactory=new Factory(){
    @Override public Property newProperty(){
      return new UUIDProperty();
    }
  }
;
  propertyFactoryByClass.put(UUID.class,uuidFactory);
  final Factory dateTimeFactory=new Factory(){
    @Override public Property newProperty(){
      return new DateTimeProperty();
    }
  }
;
  propertyFactoryByClass.put(java.util.Date.class,dateTimeFactory);
  propertyFactoryByClass.put(DateTime.class,dateTimeFactory);
  propertyFactoryByClass.put(LocalDateTime.class,dateTimeFactory);
  propertyFactoryByClass.put(org.apache.isis.applib.value.DateTime.class,dateTimeFactory);
  final Factory dateFactory=new Factory(){
    @Override public Property newProperty(){
      return new DateProperty();
    }
  }
;
  propertyFactoryByClass.put(java.sql.Date.class,dateFactory);
  propertyFactoryByClass.put(LocalDate.class,dateFactory);
  propertyFactoryByClass.put(org.apache.isis.applib.value.Date.class,dateFactory);
  final Factory byteArrayFactory=new Factory(){
    @Override public Property newProperty(){
      return new ByteArrayProperty();
    }
  }
;
  propertyFactoryByClass.put(byte[].class,byteArrayFactory);
  propertyFactoryByClass.put(org.apache.isis.applib.value.Blob.class,byteArrayFactory);
}
