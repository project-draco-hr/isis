{
  final ActionModel actionModel=ActionModel.create(objectAdapter,action);
  final AjaxDeferredBehaviour ajaxDeferredBehaviour=determineDeferredBehaviour(action,actionModel);
  final AbstractLink link=new AjaxLink<Object>(linkId){
    private static final long serialVersionUID=1L;
    @Override public void onClick(    AjaxRequestTarget target){
      if (ajaxDeferredBehaviour != null) {
        ajaxDeferredBehaviour.initiate(target);
      }
 else {
        final ActionPromptProvider promptProvider=ActionPromptProvider.Util.getFrom(getPage());
        final ActionPrompt actionPrompt=promptProvider.getActionPrompt();
        ActionPromptHeaderPanel titlePanel=new ActionPromptHeaderPanel(actionPrompt.getTitleId(),actionModel);
        final ActionPanel actionPanel=(ActionPanel)getComponentFactoryRegistry().createComponent(ComponentType.ACTION_PROMPT,actionPrompt.getContentId(),actionModel);
        actionPanel.setShowHeader(false);
        actionPrompt.setTitle(titlePanel,target);
        actionPrompt.setPanel(actionPanel,target);
        actionPanel.setActionPrompt(actionPrompt);
        actionPrompt.showPrompt(target);
        focusOnFirstParameter(target,actionPanel);
      }
    }
    private void focusOnFirstParameter(    AjaxRequestTarget target,    ActionPanel actionPanel){
      actionPanel.visitChildren(new IVisitor<Component,Component>(){
        @Override public void component(        Component object,        IVisit<Component> visit){
          if (object instanceof ScalarPanelAbstract) {
            ScalarPanelAbstract spa=(ScalarPanelAbstract)object;
            spa.forceBuildGui();
            visit.dontGoDeeper();
          }
        }
      }
);
      final Component actionPanelFirstParam=actionPanel.visitChildren(new IVisitor<Component,Component>(){
        @Override public void component(        Component object,        IVisit<Component> visit){
          if (object instanceof FormComponent && !"scalarIfCompact".equals(object.getId()) && object.getOutputMarkupId()) {
            visit.stop(object);
          }
        }
      }
);
      if (actionPanelFirstParam != null) {
        target.focusComponent(actionPanelFirstParam);
      }
    }
    @Override protected void updateAjaxAttributes(    AjaxRequestAttributes attributes){
      super.updateAjaxAttributes(attributes);
      attributes.setEventPropagation(AjaxRequestAttributes.EventPropagation.BUBBLE);
    }
    @Override protected void onComponentTag(    ComponentTag tag){
      super.onComponentTag(tag);
      Buttons.fixDisabledState(this,tag);
    }
  }
;
  if (ajaxDeferredBehaviour != null) {
    link.add(ajaxDeferredBehaviour);
  }
  link.add(new CssClassAppender("noVeil"));
  return link;
}
