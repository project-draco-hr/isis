{
class Customer {
    @SuppressWarnings("unused") @edu.umd.cs.findbugs.annotations.SuppressWarnings("UMAC_UNCALLABLE_METHOD_OF_ANONYMOUS_CLASS") public void someAction(    final int x,    final Long y){
    }
    @SuppressWarnings("unused") @edu.umd.cs.findbugs.annotations.SuppressWarnings("UMAC_UNCALLABLE_METHOD_OF_ANONYMOUS_CLASS") public Object[] choicesSomeAction(){
      return null;
    }
  }
  final Method actionMethod=findMethod(Customer.class,"someAction",new Class[]{int.class,Long.class});
  final Method choicesMethod=findMethod(Customer.class,"choicesSomeAction",new Class[]{});
  reflector.setLoadSpecificationStringReturn(voidNoSpec);
  facetFactory.process(Customer.class,actionMethod,methodRemover,facetHolder);
  final Facet facet=facetHolder.getFacet(ActionChoicesFacet.class);
  assertNotNull(facet);
  assertTrue(facet instanceof ActionChoicesFacetViaMethod);
  final ActionChoicesFacetViaMethod actionChoicesFacetViaMethod=(ActionChoicesFacetViaMethod)facet;
  assertEquals(choicesMethod,actionChoicesFacetViaMethod.getMethods().get(0));
  assertTrue(methodRemover.getRemoveMethodMethodCalls().contains(choicesMethod));
}
