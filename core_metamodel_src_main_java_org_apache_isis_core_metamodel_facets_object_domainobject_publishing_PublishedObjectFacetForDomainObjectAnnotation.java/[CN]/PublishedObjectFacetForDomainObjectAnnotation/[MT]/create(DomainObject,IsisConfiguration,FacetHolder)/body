{
  final Publishing publishing=domainObject != null ? domainObject.publishing() : Publishing.AS_CONFIGURED;
switch (publishing) {
case AS_CONFIGURED:
    final PublishObjectsConfiguration setting=PublishObjectsConfiguration.parse(configuration);
switch (setting) {
case NONE:
    return null;
default :
  final PublishingPayloadFactoryForObject publishingPayloadFactory=newPayloadFactory(domainObject);
return domainObject != null ? new PublishedObjectFacetForDomainObjectAnnotationAsConfigured(publishingPayloadFactory,holder) : new PublishedObjectFacetFromConfiguration(publishingPayloadFactory,holder);
}
case DISABLED:
return null;
case ENABLED:
return new PublishedObjectFacetForDomainObjectAnnotation(newPayloadFactory(domainObject),holder);
}
return null;
}
