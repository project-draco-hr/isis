{
  final ObjectSpecification typeOfSpec=getModel().getTypeOfSpecification();
  final GridFacet gridFacet=typeOfSpec.getFacet(GridFacet.class);
  if (gridFacet != null) {
    final Grid unused=gridFacet.getGrid();
  }
  final Where whereContext=getModel().isParented() ? Where.PARENTED_TABLES : Where.STANDALONE_TABLES;
  final ObjectSpecification parentSpecIfAny=getModel().isParented() ? getModel().getParentObjectAdapterMemento().getObjectAdapter(ConcurrencyChecking.NO_CHECK,getPersistenceSession(),getSpecificationLoader()).getSpecification() : null;
  @SuppressWarnings("unchecked") final Filter<ObjectAssociation> filter=Filters.and(ObjectAssociation.Filters.PROPERTIES,ObjectAssociation.Filters.staticallyVisible(whereContext),associationDoesNotReferenceParent(parentSpecIfAny));
  final List<? extends ObjectAssociation> propertyList=typeOfSpec.getAssociations(Contributed.INCLUDED,filter);
  final Map<String,ObjectAssociation> propertyById=Maps.newLinkedHashMap();
  for (  final ObjectAssociation property : propertyList) {
    propertyById.put(property.getId(),property);
  }
  List<String> propertyIds=Lists.newArrayList(propertyById.keySet());
  final List<TableColumnOrderService> tableColumnOrderServices=getServicesInjector().lookupServices(TableColumnOrderService.class);
  for (  final TableColumnOrderService tableColumnOrderService : tableColumnOrderServices) {
    final List<String> propertyReorderedIds=reordered(tableColumnOrderService,propertyIds);
    if (propertyReorderedIds != null) {
      propertyIds=propertyReorderedIds;
      break;
    }
  }
  for (  final String propertyId : propertyIds) {
    final ObjectAssociation property=propertyById.get(propertyId);
    final ColumnAbstract<ObjectAdapter> nopc=createObjectAdapterPropertyColumn(property);
    columns.add(nopc);
  }
}
