{
  final List<IColumn<ObjectAdapter,String>> columns=Lists.newArrayList();
  final BulkActionsProvider bulkActionsProvider=getBulkActionsProvider();
  ObjectAdapterToggleboxColumn toggleboxColumn=null;
  if (bulkActionsProvider != null) {
    toggleboxColumn=bulkActionsProvider.createToggleboxColumn();
    if (toggleboxColumn != null) {
      columns.add(toggleboxColumn);
    }
    bulkActionsProvider.configureBulkActions(toggleboxColumn);
  }
  final EntityCollectionModel model=getModel();
  addTitleColumn(columns,model.getParentObjectAdapterMemento(),getSettings().getMaxTitleLengthInStandaloneTables(),getSettings().getMaxTitleLengthInStandaloneTables());
  addPropertyColumnsIfRequired(columns);
  final CollectionContentsSortableDataProvider dataProvider=new CollectionContentsSortableDataProvider(model);
  dataTable=new IsisAjaxFallbackDataTable<>(ID_TABLE,columns,dataProvider,model.getPageSize(),toggleboxColumn);
  addOrReplace(dataTable);
  dataTable.honourHints();
  if (toggleboxColumn != null) {
    final OnConcurrencyExceptionHandler handler2=new OnConcurrencyExceptionHandler(){
      private static final long serialVersionUID=1L;
      @Override public void onConcurrencyException(      final Component context,      final ObjectAdapter selectedAdapter,      final ConcurrencyException ex,      final AjaxRequestTarget ajaxRequestTarget){
        ajaxRequestTarget.add(dataTable);
      }
    }
;
    toggleboxColumn.setOnConcurrencyExceptionHandler(handler2);
  }
}
