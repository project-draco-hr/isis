{
  return new MetaModelValidatorVisiting.Visitor(){
    @Override public boolean visit(    ObjectSpecification objectSpec,    ValidationFailures validationFailures){
      validate(objectSpec,validationFailures);
      return true;
    }
    private void validate(    ObjectSpecification objectSpec,    ValidationFailures validationFailures){
      final JdoPersistenceCapableFacet pcFacet=objectSpec.getFacet(JdoPersistenceCapableFacet.class);
      if (pcFacet == null || pcFacet.getIdentityType() == IdentityType.NONDURABLE) {
        return;
      }
      final List<ObjectAssociation> associations=objectSpec.getAssociations(Contributed.EXCLUDED,ObjectAssociation.Filters.PROPERTIES);
      for (      ObjectAssociation association : associations) {
        if (association.containsDoOpFacet(JdoNotPersistentFacet.class)) {
          return;
        }
        validateBigDecimalValueFacet(association,validationFailures);
      }
    }
    private void validateBigDecimalValueFacet(    ObjectAssociation association,    ValidationFailures validationFailures){
      BigDecimalValueFacet facet=association.getFacet(BigDecimalValueFacet.class);
      if (facet == null) {
        return;
      }
      BigDecimalValueFacet underlying=(BigDecimalValueFacet)facet.getUnderlyingFacet();
      if (underlying == null) {
        return;
      }
      if (facet instanceof BigDecimalFacetDerivedFromJdoColumn) {
        if (underlying instanceof BigDecimalFacetOnPropertyFromJavaxValidationDigitsAnnotation) {
          if (notNullButNotEqual(facet.getLength(),underlying.getLength())) {
            validationFailures.add("%s: @javax.jdo.annotations.Column(length=...) different from @javax.validation.constraint.Digits(...); should equal the sum of its integer and fraction attributes",association.getIdentifier().toClassAndNameIdentityString());
          }
          if (notNullButNotEqual(facet.getScale(),underlying.getScale())) {
            validationFailures.add("%s: @javax.jdo.annotations.Column(scale=...) different from @javax.validation.constraint.Digits(fraction=...)",association.getIdentifier().toClassAndNameIdentityString());
          }
        }
      }
    }
    private boolean notNullButNotEqual(    Integer x,    Integer y){
      return x != null && y != null && !x.equals(y);
    }
  }
;
}
