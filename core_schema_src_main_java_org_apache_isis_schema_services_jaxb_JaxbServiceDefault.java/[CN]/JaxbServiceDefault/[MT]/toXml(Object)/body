{
  final Class<?> domainClass=domainObject.getClass();
  try {
    final JAXBContext context=JAXBContext.newInstance(domainClass);
    final PersistentEntityAdapter adapter=new PersistentEntityAdapter();
    container.injectServicesInto(adapter);
    final Marshaller marshaller=context.createMarshaller();
    marshaller.setAdapter(PersistentEntityAdapter.class,adapter);
    marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT,true);
    final StringWriter sw=new StringWriter();
    marshaller.marshal(domainObject,sw);
    final String xml=sw.toString();
    return xml;
  }
 catch (  final JAXBException ex) {
    final Class<? extends JAXBException> exClass=ex.getClass();
    final String name=exClass.getName();
    if (name.equals("com.sun.xml.bind.v2.runtime.IllegalAnnotationsException")) {
      List<? extends Exception> errors=null;
      String annotationExceptionMessages=null;
      try {
        final Method getErrorsMethod=exClass.getMethod("getErrors");
        errors=(List<? extends Exception>)getErrorsMethod.invoke(ex);
        annotationExceptionMessages=": " + Joiner.on("; ").join(Iterables.transform(errors,new Function<Exception,String>(){
          @Override public String apply(          final Exception e){
            return e.getMessage();
          }
        }
));
      }
 catch (      Exception e) {
      }
      if (errors != null) {
        throw new NonRecoverableException("Error marshalling domain object to XML, due to illegal annotations on domain object class '" + domainClass.getName() + "'; "+ errors.size()+ " error"+ (errors.size() == 1 ? "" : "s")+ " reported"+ (!errors.isEmpty() ? annotationExceptionMessages : ""),ex);
      }
    }
    throw new NonRecoverableException("Error marshalling domain object to XML; domain object class is '" + domainClass.getName() + "'",ex);
  }
}
