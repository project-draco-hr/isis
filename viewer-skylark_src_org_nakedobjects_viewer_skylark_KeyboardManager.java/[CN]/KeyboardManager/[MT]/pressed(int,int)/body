{
  if (ignoreKey(keyCode)) {
    return;
  }
  LOG.debug("key " + KeyEvent.getKeyModifiersText(modifiers) + " '"+ KeyEvent.getKeyText(keyCode)+ "' pressed");
  KeyboardAction keyboardAction=new KeyboardAction(keyCode,modifiers);
  if (viewer.isOverlayAvailable()) {
    viewer.getOverlayView().keyPressed(keyboardAction);
    return;
  }
  View keyboardFocus=getFocus();
  if (keyboardFocus == null) {
    throw new NakedObjectRuntimeException("No focus set");
  }
  keyboardFocus.keyPressed(keyboardAction);
  if (keyboardAction.isConsumed()) {
    return;
  }
  if ((modifiers & InputEvent.CTRL_MASK) == InputEvent.CTRL_MASK && keyCode == KeyEvent.VK_X) {
    viewer.close();
    return;
  }
  if ((modifiers & InputEvent.SHIFT_MASK) == InputEvent.SHIFT_MASK && keyCode == KeyEvent.VK_F10) {
    Location location=keyboardFocus.getAbsoluteLocation();
    location.add(20,14);
    viewer.popupMenu(keyboardFocus,location,true,false,false);
    return;
  }
  if (keyCode == KeyEvent.VK_F10) {
    Location location=keyboardFocus.getAbsoluteLocation();
    location.add(20,14);
    viewer.popupMenu(keyboardFocus,location,false,false,false);
    return;
  }
  if (keyCode == KeyEvent.VK_ENTER) {
    Location location=keyboardFocus.getAbsoluteLocation();
    location.add(1,1);
    viewer.secondClick(new Click(keyboardFocus,location,modifiers));
    return;
  }
  if (keyCode == KeyEvent.VK_F4 && (modifiers & InputEvent.CTRL_MASK) == InputEvent.CTRL_MASK) {
    return;
  }
  if (keyCode == KeyEvent.VK_DOWN) {
    focusManager.focusFirstChildView();
    return;
  }
  if (keyCode == KeyEvent.VK_UP) {
    focusManager.focusParentView();
    return;
  }
  if (keyCode == KeyEvent.VK_HOME) {
    viewer.makeRootFocus();
    return;
  }
  if (keyCode == KeyEvent.VK_RIGHT) {
    focusManager.focusNextView();
    return;
  }
  if (keyCode == KeyEvent.VK_LEFT) {
    focusManager.focusPreviousView();
    return;
  }
  int action=0;
  if (keyCode == KeyEvent.VK_F1) {
    help(keyboardFocus);
  }
 else   if (keyCode == KeyEvent.VK_TAB) {
    action=tab(modifiers);
  }
switch (action) {
case KeyboardAction.NEXT_VIEW:
    focusManager.focusNextView();
  break;
case KeyboardAction.PREVIOUS_VIEW:
focusManager.focusPreviousView();
break;
case KeyboardAction.NEXT_WINDOW:
focusManager.focusParentView();
break;
case KeyboardAction.PREVIOUS_WINDOW:
focusManager.focusFirstChildView();
break;
}
}
