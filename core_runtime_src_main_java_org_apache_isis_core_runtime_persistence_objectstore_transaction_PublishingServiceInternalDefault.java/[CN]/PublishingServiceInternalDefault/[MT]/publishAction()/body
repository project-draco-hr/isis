{
  if (!canPublish()) {
    return;
  }
  final String currentUser=userService.getUser().getName();
  final Timestamp timestamp=clockService.nowAsJavaSqlTimestamp();
  try {
    final CurrentInvocation currentInvocation=ActionInvocationFacet.currentInvocation.get();
    if (currentInvocation == null) {
      return;
    }
    ObjectAction currentAction=currentInvocation.getAction();
    IdentifiedHolder currentInvocationHolder=currentInvocation.getIdentifiedHolder();
    final PublishedActionFacet publishedActionFacet=currentInvocationHolder.getFacet(PublishedActionFacet.class);
    if (publishedActionFacet == null) {
      return;
    }
    final ObjectAdapter targetAdapter=currentInvocation.getTarget();
    final RootOid adapterOid=(RootOid)targetAdapter.getOid();
    final String oidStr=getOidMarshaller().marshal(adapterOid);
    final Identifier actionIdentifier=currentAction.getIdentifier();
    final String title=oidStr + ": " + actionIdentifier.toNameParmsIdentityString();
    final String actionTargetClass=CommandUtil.targetClassNameFor(targetAdapter);
    final String actionTargetAction=CommandUtil.targetActionNameFor(currentAction);
    final Bookmark actionTarget=CommandUtil.bookmarkFor(targetAdapter);
    final String actionMemberIdentifier=CommandUtil.actionIdentifierFor(currentAction);
    final List<String> parameterNames;
    final List<Class<?>> parameterTypes;
    final Class<?> returnType;
    if (currentInvocationHolder instanceof FacetedMethod) {
      final FacetedMethod facetedMethod=(FacetedMethod)currentInvocationHolder;
      returnType=facetedMethod.getType();
      final List<FacetedMethodParameter> parameters=facetedMethod.getParameters();
      parameterNames=immutableList(Iterables.transform(parameters,FacetedMethodParameter.Functions.GET_NAME));
      parameterTypes=immutableList(Iterables.transform(parameters,FacetedMethodParameter.Functions.GET_TYPE));
    }
 else {
      parameterNames=null;
      parameterTypes=null;
      returnType=null;
    }
    final Command command=commandContext.getCommand();
    final Command command1=commandContext.getCommand();
    final Interaction.SequenceName sequenceName=Interaction.SequenceName.PUBLISHED_EVENT;
    final int nextEventSequence=command1.next(sequenceName.abbr());
    final UUID transactionId=command1.getTransactionId();
    final EventMetadata metadata=new EventMetadata(transactionId,nextEventSequence,EventType.ACTION_INVOCATION,currentUser,timestamp,title,actionTargetClass,actionTargetAction,actionTarget,actionMemberIdentifier,parameterNames,parameterTypes,returnType);
    final PublishedAction.PayloadFactory payloadFactory=publishedActionFacet.value();
    final ObjectStringifier stringifier=objectStringifier();
    final ObjectAdapter target=currentInvocation.getTarget();
    final ObjectAdapter result=currentInvocation.getResult();
    final List<ObjectAdapter> parameters=currentInvocation.getParameters();
    final EventPayload payload=payloadFactory.payloadFor(currentInvocation.getIdentifiedHolder().getIdentifier(),ObjectAdapter.Util.unwrap(undeletedElseEmpty(target)),ObjectAdapter.Util.unwrap(undeletedElseEmpty(parameters)),ObjectAdapter.Util.unwrap(undeletedElseEmpty(result)));
    payload.withStringifier(stringifier);
    publishingServiceIfAny.publish(metadata,payload);
  }
  finally {
    ActionInvocationFacet.currentInvocation.set(null);
  }
}
