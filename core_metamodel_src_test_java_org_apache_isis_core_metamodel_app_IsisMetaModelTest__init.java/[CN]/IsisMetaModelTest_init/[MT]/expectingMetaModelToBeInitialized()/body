{
  final Sequence initSequence=context.sequence("init");
  context.checking(new Expectations(){
{
      allowing(mockRuntimeContext).injectInto(with(any(Object.class)));
      will(IsisActions.injectInto());
      allowing(mockRuntimeContext).getAuthenticationSessionProvider();
      will(returnValue(mockAuthenticationSessionProvider));
      allowing(mockRuntimeContext).getSpecificationLoader();
      will(returnValue(mockSpecificationLoader));
      allowing(mockRuntimeContext).getMessageBrokerService();
      will(returnValue(mockMessageBrokerService));
      allowing(mockRuntimeContext).getServicesInjector();
      will(returnValue(mockDependencyInjector));
      allowing(mockRuntimeContext).getDeploymentCategoryProvider();
      will(returnValue(new DeploymentCategoryProviderAbstract(){
        @Override public DeploymentCategory getDeploymentCategory(){
          return DeploymentCategory.PRODUCTION;
        }
      }
));
      oneOf(mockProgrammingModelFacets).init();
      inSequence(initSequence);
      oneOf(mockProgrammingModelFacets).getList();
      inSequence(initSequence);
      will(returnValue(Lists.newArrayList()));
      oneOf(mockRuntimeContext).init();
      inSequence(initSequence);
    }
  }
);
  context.ignoring(mockProgrammingModelFacets);
}
