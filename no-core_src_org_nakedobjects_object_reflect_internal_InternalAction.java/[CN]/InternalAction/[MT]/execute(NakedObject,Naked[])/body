{
  if (parameters.length != paramCount) {
    LOG.error(actionMethod + " requires " + paramCount+ " parameters, not "+ parameters.length);
  }
  NakedObjectManager objectManager=inObject.getContext().getObjectManager();
  try {
    LOG.debug("Action: invoke " + inObject + "."+ getName());
    objectManager.startTransaction();
    Object result;
    if (inObject.getOid() == null || !requiresTransaction()) {
      result=actionMethod.invoke(inObject.getObject(),parameters);
    }
 else {
      NakedObject transactionObject=objectManager.getObject(inObject.getOid(),inObject.getSpecification());
      Object[] transactionParameters=new Object[parameters.length];
      for (int i=0; i < parameters.length; i++) {
        if (parameters[i] instanceof NakedObject) {
          NakedObject parameter=(NakedObject)parameters[i];
          transactionParameters[i]=objectManager.getObject(parameter.getOid(),parameter.getSpecification()).getObject();
        }
 else {
          transactionParameters[i]=parameters[i];
        }
      }
      result=actionMethod.invoke(transactionObject.getObject(),transactionParameters);
    }
    LOG.debug(" action result " + result);
    objectManager.endTransaction();
    if (result != null && result instanceof NakedObject) {
      return (NakedObject)result;
    }
    if (result != null) {
      return PojoAdapter.createAdapter(result);
    }
  }
 catch (  InvocationTargetException e) {
    e.fillInStackTrace();
    if (e.getTargetException() instanceof TransactionException) {
      LOG.info("TransactionException thrown while executing " + actionMethod + " "+ e.getTargetException().getMessage());
      objectManager.abortTransaction();
    }
 else {
      String error="Exception executing " + actionMethod + "; aborted";
      LOG.error(error);
      throw new NakedObjectRuntimeException(error,e.getTargetException());
    }
  }
catch (  IllegalAccessException e) {
    LOG.error("Illegal access of " + actionMethod,e);
    objectManager.abortTransaction();
  }
catch (  ObjectNotFoundException e) {
    LOG.error("Non-existing target or parameter used in " + actionMethod,e);
    objectManager.abortTransaction();
  }
  return null;
}
