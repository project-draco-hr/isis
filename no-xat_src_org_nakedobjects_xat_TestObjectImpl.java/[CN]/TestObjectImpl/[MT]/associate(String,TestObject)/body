{
  NakedObjectField field=fieldAccessorFor(fieldName);
  assertFieldVisible(field);
  assertFieldModifiable(fieldName,field);
  TestNaked targetField=getField(fieldName);
  if (targetField instanceof TestValue) {
    throw new IllegalActionError("drop(..) not allowed on value target field; use fieldEntry(..) instead");
  }
  if ((targetField.getForNaked() != null) && !(targetField.getForNaked() instanceof InternalCollection)) {
    throw new IllegalActionError("Field already contains an object: " + targetField.getForNaked());
  }
  NakedObjectAssociation association=(NakedObjectAssociation)fieldAccessorFor(fieldName);
  NakedObject obj=(NakedObject)object.getForNaked();
  if (association.getSpecification() != null && !obj.getSpecification().isOfType(association.getSpecification())) {
    throw new IllegalActionError("Can't drop a " + object.getForNaked().getSpecification().getShortName() + " on to the "+ fieldName+ " field (which accepts "+ association.getSpecification()+ ")");
  }
  NakedObject nakedObject=(NakedObject)getForNaked();
  boolean isAccessible=true;
  isAccessible=association.isAccessible() && nakedObject.isVisible(association).isVetoed();
  if (!isAccessible) {
    throw new IllegalActionError("Cannot access the field " + field);
  }
  Consent valid;
  if (association instanceof OneToOneAssociation) {
    assertEmpty(fieldName);
    valid=nakedObject.isValid((OneToOneAssociation)association,obj);
  }
 else   if (association instanceof OneToManyAssociation) {
    valid=nakedObject.canAdd((OneToManyAssociation)association,obj);
  }
 else {
    throw new NakedObjectRuntimeException();
  }
  if (!valid.isVetoed()) {
    throw new IllegalActionError("Cannot associate " + obj + " in the field "+ field+ " within "+ nakedObject+ ": "+ valid.getReason());
  }
  nakedObject.setAssociation(association,obj);
}
