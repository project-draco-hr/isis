{
  final List<Object> services=obtainServices();
  final PersistenceSessionFactory persistenceSessionFactory=obtainPersistenceSessionFactory(deploymentType,services);
  final IsisConfiguration configuration=getConfiguration();
  final AuthenticationManager authenticationManager=obtainAuthenticationManager(deploymentType);
  final AuthorizationManager authorizationManager=obtainAuthorizationManager(deploymentType);
  final OidMarshaller oidMarshaller=obtainOidMarshaller();
  final Collection<MetaModelRefiner> metaModelRefiners=refiners(authenticationManager,authorizationManager,persistenceSessionFactory);
  final SpecificationLoaderSpi reflector=obtainSpecificationLoaderSpi(deploymentType,metaModelRefiners);
  ServicesInjectorSpi servicesInjector=persistenceSessionFactory.getServicesInjector();
  servicesInjector.addFallbackIfRequired(FixtureScripts.class,new FixtureScriptsDefault());
  servicesInjector.validateServices();
  final RuntimeContextFromSession runtimeContext=obtainRuntimeContextFromSession();
  runtimeContext.injectInto(reflector);
  return new IsisSessionFactoryDefault(deploymentType,configuration,reflector,authenticationManager,authorizationManager,persistenceSessionFactory,oidMarshaller);
}
