{
  final ObjectAdapter collection=baseField.get(parent);
  LOG.debug("Saving polymorphic internal collection " + collection);
  currentCollection=new ArrayList<ObjectAdapter>();
  currentIterator=super.getElementsForCollectionAsIterator(collection);
  for (; currentIterator.hasNext(); ) {
    final ObjectAdapter item=currentIterator.next();
    currentCollection.add(item);
  }
  for (int i=0; i < tables.size(); i++) {
    currentTableSpecification=tableSpecifications.get(i);
    currentIndex=0;
    currentIndexStart=0;
    currentIterator=new Iterator<ObjectAdapter>(){
      @Override public boolean hasNext(){
        for (int i=currentIndexStart; i < currentCollection.size(); i++) {
          final ObjectAdapter thisObjectAdapter=currentCollection.get(i);
          if (thisObjectAdapter.getSpecification().isOfType(currentTableSpecification)) {
            currentIndexStart=currentIndex=i;
            return true;
          }
        }
        return false;
      }
      @Override public ObjectAdapter next(){
        currentIndexStart=currentIndex + 1;
        return currentCollection.get(currentIndex);
      }
      @Override public void remove(){
      }
    }
;
    table=tables.get(i);
    super.saveInternalCollection(connector,parent);
  }
}
