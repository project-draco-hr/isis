{
  final Map<AdapterAndProperty,PreAndPostValues> processedObjectProperties1=Maps.newLinkedHashMap();
  while (!changedObjectProperties.isEmpty()) {
    final Set<AdapterAndProperty> keys=Sets.newLinkedHashSet(changedObjectProperties.keySet());
    for (    final AdapterAndProperty aap : keys) {
      final PreAndPostValues papv=changedObjectProperties.remove(aap);
      final ObjectAdapter adapter=aap.getAdapter();
      if (adapter.isDestroyed()) {
        papv.setPost(IsisTransaction.Placeholder.DELETED);
      }
 else {
        papv.setPost(aap.getPropertyValue());
      }
      processedObjectProperties1.put(aap,papv);
    }
  }
  return Collections.unmodifiableSet(Sets.filter(processedObjectProperties1.entrySet(),PreAndPostValues.Predicates.CHANGED));
}
