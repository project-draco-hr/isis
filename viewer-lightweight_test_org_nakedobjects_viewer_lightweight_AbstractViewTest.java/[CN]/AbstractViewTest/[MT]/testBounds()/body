{
  view.setLocation(new Location(30,50));
  view.setSize(new Size(20,30));
  assertEquals(new Location(30,50),view.getAbsoluteLocation());
  assertEquals(new Bounds(30,50,20,30),view.getBounds());
  CompositeView parent=new CompositeView(){
    public InternalView[] getComponents(){
      return null;
    }
    public void setLayout(    Layout layout){
    }
    public Layout getLayout(){
      return null;
    }
    public void addView(    InternalView view){
    }
    public void focusNext(    InternalView view){
    }
    public void focusPrevious(    InternalView view){
    }
    public void removeView(    InternalView view){
    }
    public void replaceView(    InternalView toReplace,    InternalView replacement){
    }
    public NakedObject getObject(){
      return null;
    }
    public boolean isRoot(){
      return false;
    }
    public void setRootViewIdentified(){
    }
    public ObjectViewState getState(){
      return null;
    }
    public void clearRootViewIdentified(){
    }
    public void collectionAddUpdate(    Object collection,    NakedObject element){
    }
    public void collectionRemoveUpdate(    Object collection,    NakedObject element){
    }
    public void dropView(    ViewDrag drag){
    }
    public String objectInfo(){
      return null;
    }
    public boolean objectLocatedAt(    Location mouseLocation){
      return false;
    }
    public void objectMenuOptions(    MenuOptionSet options){
    }
    public void objectUpdate(    NakedObject object){
    }
    public DragView pickupObject(    ObjectDrag drag){
      return null;
    }
    public DragView pickupView(    ViewDrag drag){
      return null;
    }
    public void removeViewsFor(    NakedObject object,    Vector toRemove){
    }
    public ObjectView topView(){
      return null;
    }
    public void viewMenuOptions(    MenuOptionSet options){
    }
    public Location getAbsoluteLocation(){
      return new Location(100,160);
    }
    public int getBaseline(){
      return 0;
    }
    public void setBorder(    Border border){
    }
    public Border getBorder(){
      return null;
    }
    public void setBounds(    Location point,    Size size){
    }
    public Bounds getBounds(){
      return null;
    }
    public int getId(){
      return 0;
    }
    public boolean isLayoutInvalid(){
      return false;
    }
    public void setLocation(    Location point){
    }
    public Location getLocation(){
      return null;
    }
    public String getName(){
      return null;
    }
    public boolean isOpen(){
      return false;
    }
    public Padding getPadding(){
      return null;
    }
    public CompositeView getParent(){
      return null;
    }
    public boolean isReplaceable(){
      return false;
    }
    public Size getRequiredSize(){
      return null;
    }
    public void setSize(    Size size){
    }
    public Size getSize(){
      return null;
    }
    public Workspace getWorkspace(){
      return null;
    }
    public void calculateRepaintArea(){
    }
    public boolean contains(    Location point){
      return false;
    }
    public String debugDetails(){
      return null;
    }
    public void dispose(){
    }
    public void draw(    Canvas canvas){
    }
    public void entered(){
    }
    public void enteredSubview(){
    }
    public void exited(){
    }
    public void exitedSubview(){
    }
    public void firstClick(    Click click){
    }
    public View identifyView(    Location mouseLocationer,    View current){
      return null;
    }
    public boolean indicatesForView(    Location mouseLocation){
      return false;
    }
    public void invalidateLayout(){
    }
    public void layout(){
    }
    public View makeView(    Naked object,    Field field) throws CloneNotSupportedException {
      return null;
    }
    public void menuOptions(    MenuOptionSet menuOptions){
    }
    public void mouseMoved(    Location at){
    }
    public void print(    Canvas canvas){
    }
    public void redraw(){
    }
    public void secondClick(    Click click){
    }
    public void thirdClick(    Click click){
    }
    public void validateLayout(){
    }
    public void objectMenuReturn(    NakedObject object,    Location at){
    }
  }
;
  view.setParent(parent);
  assertEquals(new Location(130,210),view.getAbsoluteLocation());
}
