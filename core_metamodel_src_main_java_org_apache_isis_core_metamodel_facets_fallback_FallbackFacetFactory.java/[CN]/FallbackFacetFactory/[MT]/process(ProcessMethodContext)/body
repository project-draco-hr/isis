{
  final List<Facet> facets=Lists.newArrayList();
  final FacetedMethod facetedMethod=processMethodContext.getFacetHolder();
  final String id=facetedMethod.getIdentifier().getMemberName();
  String defaultName=StringExtensions.asNaturalName2(id);
  facets.add(new NamedFacetDefault(defaultName,facetedMethod));
  facets.add(new DescribedAsFacetNone(facetedMethod));
  facets.add(new HelpFacetNone(facetedMethod));
  final FeatureType featureType=facetedMethod.getFeatureType();
  if (featureType.isProperty()) {
    facets.add(new MaxLengthFacetUnlimited(facetedMethod));
    facets.add(new MultiLineFacetNone(true,facetedMethod));
    facets.add(newPropParamLayoutFacetIfAny(facetedMethod,"propertyLayout"));
  }
  if (featureType.isAction()) {
    facets.add(new ActionDefaultsFacetNone(facetedMethod));
    facets.add(new ActionChoicesFacetNone(facetedMethod));
  }
  if (featureType.isCollection()) {
    facets.add(new PagedFacetFromConfiguration(getPagedConfigSetting("parented",PAGE_SIZE_PARENTED_DEFAULT),facetedMethod));
  }
  FacetUtil.addFacets(facets);
}
