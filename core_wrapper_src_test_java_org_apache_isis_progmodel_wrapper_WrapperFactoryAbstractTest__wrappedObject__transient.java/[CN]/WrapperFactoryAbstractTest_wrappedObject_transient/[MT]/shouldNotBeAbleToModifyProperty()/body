{
  final DisabledFacet disabledFacet=new DisabledFacetAlwaysEverywhere(mockPasswordMember);
  facets=Arrays.asList((Facet)disabledFacet,new PropertySetterFacetViaSetterMethod(setPasswordMethod,mockPasswordMember));
  final Consent visibilityConsent=new Allow(new InteractionResult(new PropertyVisibilityEvent(employeeDO,null)));
  final InteractionResult usabilityInteractionResult=new InteractionResult(new PropertyUsabilityEvent(employeeDO,null));
  usabilityInteractionResult.advise("disabled",disabledFacet);
  final Consent usabilityConsent=new Veto(usabilityInteractionResult);
  context.checking(new Expectations(){
{
      allowing(mockPasswordMember).getFacets(with(any(Filter.class)));
      will(returnValue(facets));
      allowing(mockPasswordMember).isVisible(session,mockEmployeeAdapter,Where.ANYWHERE);
      will(returnValue(visibilityConsent));
      allowing(mockPasswordMember).isUsable(session,mockEmployeeAdapter,Where.ANYWHERE);
      will(returnValue(usabilityConsent));
    }
  }
);
  employeeWO.setPassword(passwordValue);
}
