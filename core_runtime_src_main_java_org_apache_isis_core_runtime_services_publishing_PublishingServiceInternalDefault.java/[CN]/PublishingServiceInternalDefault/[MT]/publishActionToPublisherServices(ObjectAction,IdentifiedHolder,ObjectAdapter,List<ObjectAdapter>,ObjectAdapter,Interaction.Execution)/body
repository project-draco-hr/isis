{
  if (publisherServices == null || publisherServices.isEmpty()) {
    return;
  }
  final Command command=commandContext.getCommand();
  final Interaction.SequenceName sequenceName=Interaction.SequenceName.PUBLISHED_EVENT;
  final int nextEventSequence=command.next(sequenceName.abbr());
  final UUID transactionId=command.getTransactionId();
  final Object targetPojo=execution.getMemberArgs().getTarget();
  final Bookmark targetBookmark=bookmarkService.bookmarkFor(targetPojo);
  final String actionClassNameId=execution.getMemberArgs().getMemberId();
  final String actionId=actionClassNameId.substring(actionClassNameId.indexOf('#') + 1);
  final String title=targetBookmark.toString() + ": " + actionId;
  final String currentUser=userService.getUser().getName();
  final Timestamp startedAt=execution.getStartedAt();
  final Timestamp completedAt=execution.getCompletedAt();
  final ActionDto actionDto=new ActionDto();
  commandMementoService.addActionArgs(objectAction,actionDto,parameterAdapters.toArray(new ObjectAdapter[]{}));
  final ObjectSpecification returnSpec=objectAction.getReturnType();
  final Class<?> returnType=returnSpec.getCorrespondingClass();
  final ObjectAdapter argAdapter=resultAdapter;
  final Object resultPojo=argAdapter != null ? argAdapter.getObject() : null;
  final ReturnDto returnDto=new ReturnDto();
  ActionInvocationMementoDtoUtils.setValue(returnDto,returnType,resultPojo);
  for (  PublisherService publisherService : publisherServices) {
    final ActionInvocationMementoDto aimDto=ActionInvocationMementoDtoUtils.newDto(transactionId,nextEventSequence,targetBookmark,actionDto,title,currentUser,startedAt,completedAt,returnDto);
    ActionInvocationMementoDtoUtils.addReturn(aimDto,returnType,resultPojo,bookmarkService);
    publisherService.publish(aimDto);
  }
}
