{
  Method aboutMethod=getAboutMethod();
  Class parameter=getMethod.getReturnType();
  Object object2=object.getObject();
  if (associate != null && associate.getObject() != null && !parameter.isAssignableFrom(associate.getObject().getClass())) {
    SimpleFieldAbout about=new SimpleFieldAbout(NakedObjects.getCurrentSession(),object2);
    about.unmodifiable("Invalid type: field must be set with a " + NakedObjects.getSpecificationLoader().loadSpecification(parameter.getName()));
    return about;
  }
  if (aboutMethod == null) {
    DefaultHint hint=new DefaultHint();
    return hint;
  }
  try {
    SimpleFieldAbout hint=new SimpleFieldAbout(NakedObjects.getCurrentSession(),object2);
    Object[] parameters;
    if (aboutMethod.getParameterTypes().length == 2) {
      parameters=new Object[]{hint,associate == null ? null : associate.getObject()};
    }
 else {
      parameters=new Object[]{hint};
    }
    aboutMethod.invoke(object2,parameters);
    if (hint.getDescription().equals("") && associate != null) {
      hint.setDescription("Set field " + getIdentifier() + " to "+ associate.getObject());
    }
    return hint;
  }
 catch (  InvocationTargetException e) {
    invocationException("Exception executing " + aboutMethod,e);
  }
catch (  IllegalAccessException ignore) {
    LOG.error("illegal access of " + aboutMethod,ignore);
  }
  return new DefaultHint();
}
