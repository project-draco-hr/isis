{
  final RepresentationType representationType=RepresentationType.TYPE_ACTION_RESULT;
  init(representationType);
  final String domainType=domainTypeFor(domainTypeStr,args,"domainType");
  final ObjectSpecification domainTypeSpec=getSpecificationLoader().loadSpecification(domainType);
  final RendererFactory rendererFactory=rendererFactoryRegistry.find(representationType);
  final TypeActionResultReprRenderer renderer=(TypeActionResultReprRenderer)rendererFactory.newRenderer(getResourceContext(),null,JsonRepresentation.newMap());
  final String url="domainTypes/" + domainTypeSpec.getFullIdentifier() + "/typeactions/newTransientInstance/invoke";
  final LinkBuilder linkBuilder=LinkBuilder.newBuilder(getResourceContext(),Rel.SELF,RepresentationType.TYPE_ACTION_RESULT,url);
  final JsonRepresentation selfLink=linkBuilder.build();
  final RendererFactory domainObjectRendererFactory=rendererFactoryRegistry.find(RepresentationType.DOMAIN_OBJECT);
  final DomainObjectReprRenderer domainObjectRenderer=(DomainObjectReprRenderer)domainObjectRendererFactory.newRenderer(getResourceContext(),null,JsonRepresentation.newMap());
  final ObjectAdapter transientInstance=getResourceContext().getPersistenceSession().createInstance(domainTypeSpec);
  domainObjectRenderer.with(transientInstance).includesSelf();
  renderer.with(domainTypeSpec).withSelf(selfLink).withValue(domainObjectRenderer.render());
  return responseOfOk(renderer,Caching.ONE_DAY).build();
}
