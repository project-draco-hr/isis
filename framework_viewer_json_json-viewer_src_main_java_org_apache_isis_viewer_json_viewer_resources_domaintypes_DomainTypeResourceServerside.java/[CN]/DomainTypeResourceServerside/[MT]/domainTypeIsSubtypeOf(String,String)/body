{
  RepresentationType representationType=RepresentationType.TYPE_ACTION_RESULT;
  init();
  JsonRepresentation arguments=QueryStringUtil.parseQueryString(argumentsQueryString,"Type action","isSubtypeOf");
  if (!arguments.isLink("supertype")) {
    throw JsonApplicationException.create(HttpStatusCode.BAD_REQUEST,"Args should contain a link '%s'","supertype");
  }
  final LinkRepresentation supertypeLink=arguments.getLink("supertype");
  final String supertypeFullName=UrlParserUtils.domainTypeFromLink(supertypeLink);
  final ObjectSpecification domainTypeSpec=getSpecificationLoader().loadSpecification(domainType);
  final ObjectSpecification supertypeSpec=getSpecificationLoader().loadSpecification(supertypeFullName);
  final RendererFactory rendererFactory=rendererFactoryRegistry.find(representationType);
  final TypeActionIsSubtypeOfReprRenderer renderer=(TypeActionIsSubtypeOfReprRenderer)rendererFactory.newRenderer(getResourceContext(),null,JsonRepresentation.newMap());
  final ObjectSpecAndSuperSpec objectSpecAndSuperSpec=new ObjectSpecAndSuperSpec(domainTypeSpec,supertypeSpec);
  renderer.with(objectSpecAndSuperSpec).includesSelf();
  return responseOfOk(renderer,Caching.ONE_DAY).build();
}
