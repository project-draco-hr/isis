{
  RepresentationType representationType=RepresentationType.TYPE_PROPERTY;
  init(representationType);
  final ObjectSpecification objectSpec=getSpecificationLoader().loadSpecification(domainType);
  if (objectSpec == null) {
    throw JsonApplicationException.create(HttpStatusCode.NOT_FOUND);
  }
  final ObjectMember objectMember=objectSpec.getAssociation(propertyId);
  if (objectMember == null || objectMember.isOneToManyAssociation()) {
    throw JsonApplicationException.create(HttpStatusCode.NOT_FOUND);
  }
  OneToOneAssociation property=(OneToOneAssociation)objectMember;
  final RendererFactory rendererFactory=rendererFactoryRegistry.find(representationType);
  final TypePropertyReprRenderer renderer=(TypePropertyReprRenderer)rendererFactory.newRenderer(getResourceContext(),null,JsonRepresentation.newMap());
  renderer.with(new SpecAndProperty(objectSpec,property)).includesSelf();
  return responseOfOk(renderer,Caching.ONE_DAY).build();
}
