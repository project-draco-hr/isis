{
  AuthenticationSession session=context.getSession();
  if (session == null) {
    session=new AnonymousSession();
  }
  try {
    final String objectId=context.getParameter("_" + OBJECT);
    final String version=context.getParameter("_" + VERSION);
    final String formId=context.getParameter("_" + FORM_ID);
    String resultName=context.getParameter("_" + RESULT_NAME);
    resultName=resultName == null ? RequestContext.RESULT : resultName;
    final String override=context.getParameter("_" + RESULT_OVERRIDE);
    String message=context.getParameter("_" + MESSAGE);
    final ObjectAdapter adapter=context.getMappedObject(objectId);
    final List<ObjectAssociation> fields=adapter.getSpecification().getAssociations(ObjectAssociationFilters.dynamicallyVisible(session,adapter));
    for (    ObjectAssociation objectAssociation : fields) {
      if (objectAssociation.isVisible(session,adapter).isVetoed()) {
        throw new NotLoggedInException();
      }
    }
    final FormState entryState=validateObject(context,adapter,fields);
    final Version adapterVersion=adapter.getVersion();
    final Version formVersion=context.getVersion(version);
    if (formVersion != null && adapterVersion.different(formVersion)) {
      IsisContext.getMessageBroker().addMessage("The " + adapter.getSpecification().getSingularName() + " was edited "+ "by another user ("+ adapterVersion.getUser()+ "). Please  make your changes based on their changes.");
      final String view=context.getParameter("_" + ERROR);
      context.setRequestPath(view,Dispatcher.EDIT);
      entryState.setForm(formId);
      context.addVariable(ENTRY_FIELDS,entryState,Scope.REQUEST);
      context.addVariable(resultName,objectId,Scope.REQUEST);
      if (override != null) {
        context.addVariable(resultName,override,Scope.REQUEST);
      }
    }
 else     if (entryState.isValid()) {
      changeObject(context,adapter,entryState,fields);
      if (adapter.isTransient()) {
        IsisContext.getPersistenceSession().makePersistent(adapter);
        context.unmapObject(adapter,Scope.REQUEST);
      }
      String view=context.getParameter("_" + VIEW);
      final String id=context.mapObject(adapter,Scope.REQUEST);
      context.addVariable(resultName,id,Scope.REQUEST);
      if (override != null) {
        context.addVariable(resultName,override,Scope.REQUEST);
      }
      final int questionMark=view == null ? -1 : view.indexOf("?");
      if (questionMark > -1) {
        final String params=view.substring(questionMark + 1);
        final int equals=params.indexOf("=");
        context.addVariable(params.substring(0,equals),params.substring(equals + 1),Scope.REQUEST);
        view=view.substring(0,questionMark);
      }
      context.setRequestPath(view);
      if (message == null) {
        message="Saved changes to " + adapter.getSpecification().getSingularName();
      }
 else       if (message.equals("")) {
        message=null;
      }
      if (message != null) {
        final MessageBroker messageBroker=IsisContext.getMessageBroker();
        messageBroker.addMessage(message);
      }
    }
 else {
      final String view=context.getParameter("_" + ERROR);
      context.setRequestPath(view,Dispatcher.EDIT);
      entryState.setForm(formId);
      context.addVariable(ENTRY_FIELDS,entryState,Scope.REQUEST);
      context.addVariable(resultName,objectId,Scope.REQUEST);
      if (override != null) {
        context.addVariable(resultName,override,Scope.REQUEST);
      }
      final MessageBroker messageBroker=IsisContext.getMessageBroker();
      messageBroker.addWarning(entryState.getError());
    }
  }
 catch (  final RuntimeException e) {
    IsisContext.getMessageBroker().getMessages();
    IsisContext.getMessageBroker().getWarnings();
    IsisContext.getUpdateNotifier().clear();
    IsisContext.getUpdateNotifier().clear();
    throw e;
  }
}
