{
  withLogging(pojo,new Runnable(){
    @Override public void run(){
      final PersistenceCapable pc=pojo;
      getPersistenceSession().getServicesInjector().injectServicesInto(pojo);
      final Version datastoreVersion=getVersionIfAny(pc);
      final RootOid originalOid;
      ObjectAdapter adapter=getAdapterManager().getAdapterFor(pojo);
      if (adapter != null) {
        ensureRootObject(pojo);
        originalOid=(RootOid)adapter.getOid();
        final Version originalVersion=adapter.getVersion();
        getPersistenceSession().getAdapterManager().remapRecreatedPojo(adapter,pojo);
        final RootOid thisOid=originalOid;
        final Version thisVersion=originalVersion;
        final Version otherVersion=datastoreVersion;
        if (thisVersion != null && otherVersion != null && thisVersion.different(otherVersion)) {
          if (ConcurrencyChecking.isCurrentlyEnabled()) {
            LOG.info("concurrency conflict detected on " + thisOid + " ("+ otherVersion+ ")");
            final String currentUser=getAuthenticationSession().getUserName();
            final ConcurrencyException abortCause=new ConcurrencyException(currentUser,thisOid,thisVersion,otherVersion);
            getCurrentTransaction().setAbortCause(abortCause);
          }
 else {
            LOG.warn("concurrency conflict detected but suppressed, on " + thisOid + " ("+ otherVersion+ ")");
          }
        }
      }
 else {
        final OidGenerator oidGenerator=getOidGenerator();
        originalOid=oidGenerator.createPersistentOrViewModelOid(pojo,null);
        adapter=getAdapterManager().getAdapterFor(originalOid);
        if (adapter != null) {
          getPersistenceSession().getAdapterManager().remapRecreatedPojo(adapter,pojo);
        }
 else {
          adapter=getPersistenceSession().getAdapterManager().mapRecreatedPojo(originalOid,pojo);
          CallbackFacet.Util.callCallback(adapter,LoadedCallbackFacet.class);
        }
      }
      if (!adapter.isResolved()) {
        PersistorUtil.startResolving(adapter);
        PersistorUtil.toEndState(adapter);
      }
      adapter.setVersion(datastoreVersion);
      if (pojo.jdoIsDeleted()) {
        adapter.changeState(ResolveState.DESTROYED);
      }
      ensureFrameworksInAgreement(pojo);
    }
  }
,calledFrom);
}
