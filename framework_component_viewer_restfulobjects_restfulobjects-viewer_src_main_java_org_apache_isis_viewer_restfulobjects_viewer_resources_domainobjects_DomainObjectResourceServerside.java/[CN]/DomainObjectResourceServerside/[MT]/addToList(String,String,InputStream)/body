{
  init(Where.PARENTED_TABLES);
  final ObjectAdapter objectAdapter=getObjectAdapter(oidStr);
  final DomainResourceHelper helper=new DomainResourceHelper(getResourceContext(),objectAdapter);
  final OneToManyAssociation collection=helper.getCollectionThatIsVisibleAndUsable(collectionId,Intent.MUTATE,getResourceContext().getWhere());
  if (!collection.getCollectionSemantics().isListOrArray()) {
    throw RestfulObjectsApplicationException.create(HttpStatusCode.METHOD_NOT_ALLOWED,"Collection '%s' does not have list or array semantics",collectionId);
  }
  final ObjectSpecification collectionSpec=collection.getSpecification();
  final String bodyAsString=DomainResourceHelper.asStringUtf8(body);
  final ObjectAdapter argAdapter=helper.parseAsMapWithSingleValue(collectionSpec,bodyAsString);
  final Consent consent=collection.isValidToAdd(objectAdapter,argAdapter);
  if (consent.isVetoed()) {
    throw RestfulObjectsApplicationException.create(HttpStatusCode.UNAUTHORIZED,consent.getReason());
  }
  collection.addElement(objectAdapter,argAdapter);
  return helper.collectionDetails(objectAdapter,collectionId,MemberMode.MUTATING,Caching.NONE,getResourceContext().getWhere());
}
