{
  if (field.isOneToManyAssociation()) {
    final String noColumnsString=request.getOptionalProperty("no-columns","3");
    final String tableClass=request.getOptionalProperty("table-class");
    final String rowClassesList=request.getOptionalProperty("row-classes",ODD_ROW_CLASS + "|" + EVEN_ROW_CLASS);
    String[] rowClasses=new String[0];
    if (rowClassesList != null) {
      rowClasses=rowClassesList.split("[,|/]");
    }
    int noColumns;
    IsisContext.getPersistenceSession().resolveField(object,field);
    final ObjectAdapter collection=field.get(object);
    final ObjectSpecification elementSpec=collection.getElementSpecification();
    final List<ObjectAssociation> fields=elementSpec.getAssociations(ObjectAssociationFilters.STATICALLY_VISIBLE_ASSOCIATIONS);
    if (noColumnsString.equalsIgnoreCase("all")) {
      noColumns=fields.size();
    }
 else {
      noColumns=Math.min(fields.size(),Integer.valueOf(noColumnsString));
    }
    final boolean isFieldEditable=field.isUsable(IsisContext.getAuthenticationSession(),object).isAllowed();
    final String summary="Table of elements in " + field.getName();
    TableView.write(request,summary,object,field,collection,noColumns,fields,isFieldEditable,showIconByDefault(),tableClass,rowClasses,linkedObject);
  }
 else {
    super.addField(request,object,field,linkedObject,showIcons);
  }
}
