{
  final T toProxy=handler.getDelegate();
  final Class<T> clazz=(Class<T>)toProxy.getClass();
  if (clazz.isInterface()) {
    return Util.createInstance(clazz,handler,WrapperObject.class);
  }
 else {
    final ProxyFactory proxyFactory=proxyFactoryFor(clazz);
    final Class<T> enhancedClass=proxyFactory.createClass();
    final Proxy proxy=(Proxy)Util.createInstance(enhancedClass);
    proxy.setHandler(new MethodHandler(){
      @Override public Object invoke(      Object self,      Method thisMethod,      Method proceed,      Object[] args) throws Throwable {
        return handler.invoke(self,thisMethod,args);
      }
    }
);
    return (T)proxy;
  }
}
