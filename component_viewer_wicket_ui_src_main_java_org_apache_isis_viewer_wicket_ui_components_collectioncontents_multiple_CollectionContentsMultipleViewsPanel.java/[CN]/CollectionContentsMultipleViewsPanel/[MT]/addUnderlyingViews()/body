{
  final EntityCollectionModel model=getModel();
  final int selected=selectorHelper.honourViewHintElseDefault(getSelectorDropdownPanel());
  final List<ComponentFactory> componentFactories=selectorHelper.findOtherComponentFactories(getComponentFactoryRegistry());
  underlyingViews=new Component[MAX_NUM_UNDERLYING_VIEWS];
  int i=0;
  final EntityCollectionModel emptyModel=model.asDummy();
  for (  ComponentFactory componentFactory : componentFactories) {
    final String underlyingId=underlyingIdPrefix + "-" + i;
    Component underlyingView=componentFactory.createComponent(underlyingId,i == selected ? model : emptyModel);
    underlyingViews[i++]=underlyingView;
    this.addOrReplace(underlyingView);
  }
  while (i < MAX_NUM_UNDERLYING_VIEWS) {
    String underlyingId=underlyingIdPrefix + "-" + i;
    permanentlyHide(underlyingId);
    i++;
  }
  this.setOutputMarkupId(true);
  for (i=0; i < MAX_NUM_UNDERLYING_VIEWS; i++) {
    Component component=underlyingViews[i];
    if (component != null) {
      if (i != selected) {
        component.add(new CssClassAppender(INVISIBLE_CLASS));
      }
 else {
        selectedComponent=component;
      }
    }
  }
}
