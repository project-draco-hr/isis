{
  final NakedObjectStore objectStore=new ObjectStoreLogger(objectStore(),"server-store.log");
  Runnable runnable=new Runnable(){
    public void run(){
      final PipedServer server=new PipedServer();
      server.setConnection(connection);
      nakedObjects.setConfiguration(new Configuration());
      JavaBusinessObjectContainer container=new JavaBusinessObjectContainer();
      new SystemClock();
      DataFactory objectDataFactory=new JavaObjectDataFactory();
      SingleResponseUpdateNotifier updateNotifier=new SingleResponseUpdateNotifier();
      updateNotifier.setFactory(objectDataFactory);
      JavaObjectFactory objectFactory=new JavaObjectFactory();
      objectFactory.setContainer(container);
      OidGenerator oidGenerator=new SimpleOidGenerator();
      DefaultPersistAlgorithm persistAlgorithm=new DefaultPersistAlgorithm();
      persistAlgorithm.setOidGenerator(oidGenerator);
      LocalObjectManager localObjectManager=new LocalObjectManager();
      localObjectManager.setObjectStore(objectStore);
      localObjectManager.setPersistAlgorithm(persistAlgorithm);
      localObjectManager.setCheckObjectsForDirtyFlag(true);
      NakedObjectManager objectManager=localObjectManager;
      nakedObjects.setObjectManager(objectManager);
      LocalReflectionFactory reflectionFactory=new LocalReflectionFactory();
      JavaReflectorFactory reflectorFactory=new JavaReflectorFactory();
      ObjectLoaderImpl objectLoader=new ObjectLoaderImpl();
      objectLoader.setPojoAdapterMap(new PojoAdapterHashImpl());
      objectLoader.setObjectFactory(objectFactory);
      objectLoader.setIdentityAdapterMap(new IdentityAdapterMapImpl());
      nakedObjects.setObjectLoader(objectLoader);
      nakedObjects.setReflectionFactory(reflectionFactory);
      NakedObjectSpecificationLoaderImpl specificationLoader=new NakedObjectSpecificationLoaderImpl();
      nakedObjects.setReflectorFactory(reflectorFactory);
      nakedObjects.setSpecificationLoader(specificationLoader);
      ServerDistribution sd=new ServerDistribution();
      sd.setObjectFactory(objectFactory);
      sd.setObjectDataFactory(objectDataFactory);
      Distribution serverLogger=sd;
      server.setFacade(serverLogger);
      server.setUpdateNotifier(updateNotifier);
      objectManager.addObjectChangedListener(updateNotifier);
      nakedObjects.init();
      JavaFixtureBuilder fb=new JavaFixtureBuilder();
      CitiesFixture cities;
      fb.addFixture(cities=new CitiesFixture());
      fb.addFixture(new BookingsFixture(cities));
      fb.addFixture(new ClassesFixture());
      fb.installFixtures();
      InfoDebugFrame debugFrame=new InfoDebugFrame(){
        private static final long serialVersionUID=1L;
        public void dialogClosing(){
          System.exit(0);
        }
      }
;
      DebugInfo debugInfo=objectManager;
      debugFrame.setInfo(debugInfo);
      debugFrame.setBounds(500,300,1000,700);
      debugFrame.refresh();
      debugFrame.show();
      updateNotifier.getUpdates();
      server.run();
    }
  }
;
  Thread serverThread=new Thread(runnable,"server");
  nakedObjects.setServer(serverThread);
  serverThread.start();
}
