{
  RequestContext context=request.getContext();
  String objectId=request.getOptionalProperty(OBJECT);
  String forwardEditedTo=request.getOptionalProperty(VIEW);
  String forwardErrorTo=request.getOptionalProperty(ERRORS);
  boolean hideNonEditableFields=request.isRequested(HIDE_UNEDITABLE,false);
  boolean showIcon=request.isRequested(SHOW_ICON,true);
  String buttonTitle=request.getOptionalProperty(BUTTON_TITLE);
  String formTitle=request.getOptionalProperty(FORM_TITLE);
  String variable=request.getOptionalProperty(RESULT_NAME);
  String resultOverride=request.getOptionalProperty(RESULT_OVERRIDE);
  String scope=request.getOptionalProperty(SCOPE);
  String className=request.getOptionalProperty(CLASS,"edit full");
  String id=request.getOptionalProperty(ID);
  String completionMessage=request.getOptionalProperty(MESSAGE);
  final ObjectAdapter object=context.getMappedObjectOrResult(objectId);
  String actualObjectId=context.mapObject(object,Scope.INTERACTION);
  String version=context.mapVersion(object);
  final FormState entryState=(FormState)context.getVariable(ENTRY_FIELDS);
  final ObjectSpecification specification=object.getSpecification();
  FormFieldBlock containedBlock=new FormFieldBlock(){
    @Override public boolean isVisible(    String name){
      ObjectAssociation fld=specification.getAssociation(name);
      boolean isVisible=fld.isVisible(IsisContext.getAuthenticationSession(),object).isAllowed();
      boolean isUseable=fld.isUsable(IsisContext.getAuthenticationSession(),object).isAllowed();
      return isVisible && isUseable;
    }
    public ObjectAdapter getCurrent(    String name){
      ObjectAdapter value=null;
      if (entryState != null) {
        FieldEditState field2=entryState.getField(name);
        value=field2.getValue();
      }
      if (value == null) {
        ObjectAssociation fld=specification.getAssociation(name);
        value=fld.get(object);
      }
      return value;
    }
    public boolean isNullable(    String name){
      ObjectAssociation fld=specification.getAssociation(name);
      return !fld.isMandatory();
    }
  }
;
  request.setBlockContent(containedBlock);
  request.processUtilCloseTag();
  AuthenticationSession session=IsisContext.getAuthenticationSession();
  List<ObjectAssociation> fields=specification.getAssociations(ObjectAssociationFilters.dynamicallyVisible(session,object));
  fields=containedBlock.includedFields(fields);
  InputField[] formFields=createFields(fields);
  initializeFields(context,object,formFields,entryState,!hideNonEditableFields);
  setDefaults(context,object,formFields,entryState,showIcon);
  copyFieldContent(context,object,formFields,showIcon);
  overrideWithHtml(context,containedBlock,formFields);
  String errors=null;
  if (entryState != null && entryState.isForForm(actualObjectId)) {
    copyEntryState(context,object,formFields,entryState);
    errors=entryState.getError();
  }
  String errorView=context.fullFilePath(forwardErrorTo == null ? context.getResourceFile() : forwardErrorTo);
  HiddenInputField[] hiddenFields=new HiddenInputField[]{new HiddenInputField(OBJECT,actualObjectId),new HiddenInputField(VERSION,version),completionMessage == null ? null : new HiddenInputField(MESSAGE,completionMessage),forwardEditedTo == null ? null : new HiddenInputField(VIEW,context.fullFilePath(forwardEditedTo)),new HiddenInputField(ERRORS,errorView),variable == null ? null : new HiddenInputField(RESULT_NAME,variable),resultOverride == null ? null : new HiddenInputField(RESULT_OVERRIDE,resultOverride),scope == null ? null : new HiddenInputField(SCOPE,scope)};
  if (formTitle == null) {
    formTitle=specification.getSingularName();
  }
  if (buttonTitle == null) {
    buttonTitle="Save " + specification.getSingularName();
  }
 else   if (buttonTitle.equals("")) {
    buttonTitle="Save";
  }
  HtmlFormBuilder.createForm(request,EditAction.ACTION + ".app",hiddenFields,formFields,className,id,formTitle,null,null,buttonTitle,errors);
  request.popBlockContent();
}
