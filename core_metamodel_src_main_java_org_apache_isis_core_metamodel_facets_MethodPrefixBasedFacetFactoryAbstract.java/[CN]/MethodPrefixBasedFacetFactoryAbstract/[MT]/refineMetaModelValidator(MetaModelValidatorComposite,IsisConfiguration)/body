{
  if (orphanValidation == OrphanValidation.DONT_VALIDATE) {
    return;
  }
  metaModelValidator.add(new MetaModelValidatorVisiting(new MetaModelValidatorVisiting.Visitor(){
    @Override public boolean visit(    ObjectSpecification objectSpec,    ValidationFailures validationFailures){
      List<ObjectAction> objectActions=objectSpec.getObjectActions(Contributed.EXCLUDED);
      for (      ObjectAction objectAction : objectActions) {
        for (        String prefix : prefixes) {
          final String actionId=objectAction.getId();
          if (actionId.startsWith(prefix) && prefix.length() < actionId.length()) {
            validationFailures.add("%s#%s has prefix %s, has probably been orphaned.  If not an orphan, then rename and use @Named annotation",objectSpec.getIdentifier().getClassName(),actionId,prefix);
          }
        }
      }
      return true;
    }
  }
));
}
