{
  final WebMarkupContainer container=new WebMarkupContainer(ID_BOOKMARK_LIST){
    private static final long serialVersionUID=1L;
    @Override public void renderHead(    IHeaderResponse response){
      response.render(JavaScriptReferenceHeaderItem.forReference(SLIDE_PANEL_JS));
    }
  }
;
  container.setOutputMarkupId(true);
  add(container);
  final BookmarkedPagesModel bookmarkedPagesModel=getModel();
  final ListView<BookmarkTreeNode> listView=new ListView<BookmarkTreeNode>(ID_BOOKMARKED_PAGE_ITEM,bookmarkedPagesModel){
    private static final long serialVersionUID=1L;
    @Override protected void populateItem(    ListItem<BookmarkTreeNode> item){
      final BookmarkTreeNode rootNode=item.getModelObject();
      final PageParameters pageParameters=rootNode.getPageParameters();
      final PageType pageType=PageParameterNames.PAGE_TYPE.getEnumFrom(pageParameters,PageType.class);
      final Class<? extends Page> pageClass=pageClassRegistry.getPageClass(pageType);
      final AbstractLink link=Links.newBookmarkablePageLink(ID_BOOKMARKED_PAGE_LINK,pageParameters,pageClass);
      final RootOid oid=BookmarkedPagesModel.oidFrom(pageParameters);
      ObjectSpecification objectSpec=null;
      if (oid != null) {
        ObjectSpecId objectSpecId=oid.getObjectSpecId();
        objectSpec=getSpecificationLoader().lookupBySpecId(objectSpecId);
      }
      final ResourceReference imageResource=imageCache.resourceReferenceForSpec(objectSpec);
      final Image image=new Image(ID_BOOKMARKED_PAGE_ICON,imageResource){
        private static final long serialVersionUID=1L;
        @Override protected boolean shouldAddAntiCacheParameter(){
          return false;
        }
      }
;
      link.addOrReplace(image);
      String title=BookmarkedPagesModel.titleFrom(pageParameters);
      final Label label=new Label(ID_BOOKMARKED_PAGE_TITLE,title);
      link.add(label);
      item.add(link);
      if (bookmarkedPagesModel.isCurrent(pageParameters)) {
        item.add(new CssClassAppender("currentBookmark"));
      }
      item.add(new CssClassAppender("bookmarkDepth" + rootNode.getDepth()));
    }
  }
;
  container.add(listView);
  if (!getModel().isEmpty()) {
    final AjaxLink<Void> ajaxLink=new AjaxLink<Void>(CLEAR_BOOKMARKS){
      private static final long serialVersionUID=1L;
      @Override public void onClick(      AjaxRequestTarget target){
        BookmarkedPagesPanel.this.getModel().clear();
        setEnabled(false);
        target.add(container,this);
      }
    }
;
    ajaxLink.setOutputMarkupId(true);
    add(ajaxLink);
  }
 else {
    permanentlyHide(CLEAR_BOOKMARKS);
  }
}
