{
  final ObjectSpecification specification=IsisContext.getSpecificationLoader().loadSpecification(ExampleValuePojo.class);
  reader2=context.mock(StateReader.class,"reader 2");
  context.checking(new Expectations(){
{
      one(reader2).readObjectType();
      will(returnValue(ExampleCollectionPojo.class.getName()));
      one(reader2).readId();
      will(returnValue("5"));
      one(reader2).readVersion();
      will(returnValue("3"));
      one(reader2).readUser();
      will(returnValue("username"));
      one(reader2).readTime();
      will(returnValue("1020"));
      one(versionCreator).version("3","username","1020");
      one(keyCreator).oid("5");
      will(returnValue(SerialOid.createPersistent(5)));
      ;
      one(reader2).readField("hetrogenousCollection");
      will(returnValue(null));
      one(reader2).readField("homogenousCollection");
      will(returnValue("ref@3|ref@4|"));
      one(keyCreator).specificationFromReference("ref@3");
      will(returnValue(specification));
      one(keyCreator).oidFromReference("ref@3");
      will(returnValue(SerialOid.createPersistent(3)));
      one(keyCreator).specificationFromReference("ref@4");
      will(returnValue(specification));
      one(keyCreator).oidFromReference("ref@4");
      will(returnValue(SerialOid.createPersistent(4)));
    }
  }
);
  final ObjectAdapter readObject=objectReader.load(reader2,keyCreator,versionCreator);
  assertEquals(SerialOid.createPersistent(5),readObject.getOid());
  assertEquals(ResolveState.RESOLVED,readObject.getResolveState());
  final ExampleCollectionPojo pojo=(ExampleCollectionPojo)readObject.getObject();
  final List<ExampleValuePojo> collection2=pojo.getHomogenousCollection();
  assertEquals(2,collection2.size());
  assertThat(collection2.get(0),CoreMatchers.instanceOf(ExampleValuePojo.class));
  assertThat(collection2.get(1),CoreMatchers.instanceOf(ExampleValuePojo.class));
  context.assertIsSatisfied();
}
