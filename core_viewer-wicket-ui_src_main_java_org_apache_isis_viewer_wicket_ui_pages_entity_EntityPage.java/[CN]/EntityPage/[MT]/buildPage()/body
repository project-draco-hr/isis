{
  final ObjectAdapter objectAdapter;
  try {
    objectAdapter=model.getObject();
  }
 catch (  final RuntimeException ex) {
    removeAnyBookmark(model);
    removeAnyBreadcrumb(model);
    throw new ObjectMember.AuthorizationException(ex);
  }
  if (!ObjectAdapter.Util.isVisible(objectAdapter,InteractionInitiatedBy.USER)) {
    throw new ObjectMember.AuthorizationException();
  }
  final ObjectSpecification objectSpec=model.getTypeOfSpecification();
  final GridFacet gridFacet=objectSpec.getFacet(GridFacet.class);
  if (gridFacet != null) {
    final Grid unused=gridFacet.getGrid();
  }
  if (titleString == null) {
    final String titleStr=objectAdapter.titleString(null);
    setTitle(titleStr);
  }
  WebMarkupContainer entityPageContainer=new WebMarkupContainer("entityPageContainer");
  CssClassAppender.appendCssClassTo(entityPageContainer,objectSpec.getFullIdentifier().replace('.','-'));
  CssClassAppender.appendCssClassTo(entityPageContainer,objectSpec.getCorrespondingClass().getSimpleName());
  CssClassFacet cssClassFacet=objectSpec.getFacet(CssClassFacet.class);
  if (cssClassFacet != null) {
    final String cssClass=cssClassFacet.cssClass(objectAdapter);
    CssClassAppender.appendCssClassTo(entityPageContainer,cssClass);
  }
  themeDiv.addOrReplace(entityPageContainer);
  addChildComponents(entityPageContainer,model);
  bookmarkPage(model);
  addBreadcrumb(model);
  addBookmarkedPages(entityPageContainer);
}
