{
  ensureOpened();
  ensureInTransaction();
  if (LOG.isDebugEnabled()) {
    LOG.debug("resolveImmediately; oid=" + adapter.getOid().enString(getOidMarshaller()));
  }
  if (adapter.isResolved()) {
    if (LOG.isDebugEnabled()) {
      LOG.debug("; already resolved - ignoring");
    }
    return;
  }
  if (!adapter.representsPersistent()) {
    if (LOG.isDebugEnabled()) {
      LOG.debug("; not persistent - ignoring");
    }
    return;
  }
  final Oid oid=adapter.getOid();
  if (oid instanceof AggregatedOid) {
    if (LOG.isDebugEnabled()) {
      LOG.debug("; aggregated - resolving parent");
    }
    final AggregatedOid aggregatedOid=(AggregatedOid)oid;
    final TypedOid parentOid=aggregatedOid.getParentOid();
    final ObjectAdapter parentAdapter=loadInstanceAndAdapt(parentOid);
    resolveImmediately(parentAdapter);
    return;
  }
  final Object domainObject=adapter.getObject();
  if (domainObject == null) {
    throw new ObjectNotFoundException(adapter.getOid());
  }
  try {
    getPersistenceManager().refresh(domainObject);
  }
 catch (  final RuntimeException e) {
    throw new ObjectNotFoundException(adapter.getOid(),e);
  }
  lifecycleListener.postLoadProcessingFor((PersistenceCapable)domainObject);
}
