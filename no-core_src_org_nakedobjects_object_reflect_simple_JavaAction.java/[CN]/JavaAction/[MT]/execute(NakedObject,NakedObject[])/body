{
  if (parameters.length != paramCount) {
    LOG.error(actionMethod + " requires " + paramCount+ " parameters, not "+ parameters.length);
  }
  NakedObjectManager objectManager=NakedObjectManager.getInstance();
  try {
    LOG.debug("Action: invoke " + object + "."+ getName());
    objectManager.startTransaction();
    Object result;
    if (object.getOid() == null || !requiresTransaction()) {
      result=actionMethod.invoke(object,parameters);
    }
 else {
      NakedObject transactionObject=objectManager.getObject(object);
      NakedObject[] transactionParameters=new NakedObject[parameters.length];
      for (int i=0; i < parameters.length; i++) {
        transactionParameters[i]=objectManager.getObject(parameters[i]);
      }
      result=actionMethod.invoke(transactionObject,transactionParameters);
    }
    LOG.debug(" action result " + result);
    objectManager.endTransaction();
    if (result != null && result instanceof NakedObject) {
      return (NakedObject)result;
    }
  }
 catch (  InvocationTargetException e) {
    if (e.getTargetException() instanceof TransactionException) {
      LOG.info("TransactionException thrown while executing " + actionMethod + " "+ e.getTargetException().getMessage());
    }
 else {
      LOG.error("Exception executing " + actionMethod + "; aborted",e.getTargetException());
    }
    objectManager.abortTransaction();
  }
catch (  IllegalAccessException e) {
    LOG.error("Illegal access of " + actionMethod,e);
    objectManager.abortTransaction();
  }
catch (  ObjectNotFoundException e) {
    LOG.error("Non-existing target or parameter used in " + actionMethod,e);
    objectManager.abortTransaction();
  }
  return null;
}
