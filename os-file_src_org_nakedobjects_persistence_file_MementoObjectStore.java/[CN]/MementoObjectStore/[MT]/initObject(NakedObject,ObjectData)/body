{
  Field[] fields=object.getNakedClass().getFields();
  for (int i=0; i < fields.length; i++) {
    Field field=fields[i];
    if (field.isDerived()) {
      continue;
    }
    if (field.isValue()) {
      data.restoreValue(field.getName(),(NakedValue)field.get(object));
    }
 else     if (field.isPart()) {
      ReferenceVector refs=(ReferenceVector)data.get(field.getName());
      if (refs != null) {
        InternalCollection collection=(InternalCollection)field.get(object);
        LOG.debug("setting collection " + field + "; assigning "+ refs.getOid()+ " to "+ collection);
        collection.setOid(refs.getOid());
        for (int j=0; j < refs.size(); j++) {
          try {
            if (loadedObjects.isLoaded(refs.elementAt(j))) {
              collection.added(loadedObjects.getLoadedObject(refs.elementAt(j)));
            }
 else {
              collection.added(getObject(refs.elementAt(j),null));
            }
          }
 catch (          ObjectNotFoundException e) {
            e.printStackTrace();
          }
        }
      }
    }
 else {
      Object reference=data.get(field.getName());
      LOG.debug("setting field " + field + " with "+ reference);
      if (reference != null) {
        if (loadedObjects.isLoaded(reference)) {
          NakedObject loadedObject=loadedObjects.getLoadedObject(reference);
          LOG.debug("using loaded object " + loadedObject);
          ((OneToOneAssociation)field).initData(object,loadedObject);
        }
 else {
          Object oid=reference;
          NakedObject fieldObject;
          Data fieldData=(Data)dataManager.loadData((SimpleOid)oid);
          if (fieldData != null) {
            fieldObject=(NakedObject)classFor(fieldData.getClassName()).acquireInstance();
          }
 else {
            fieldObject=(NakedObject)classFor(field.getType().getName()).acquireInstance();
          }
          fieldObject.setOid(oid);
          if (fieldObject instanceof InternalCollection) {
            fieldObject.setResolved();
          }
          loadedObjects.loaded(fieldObject);
          ((OneToOneAssociation)field).initData(object,fieldObject);
        }
      }
    }
  }
}
