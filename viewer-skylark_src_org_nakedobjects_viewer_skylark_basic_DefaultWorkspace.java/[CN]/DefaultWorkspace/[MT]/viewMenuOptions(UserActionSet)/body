{
  options.setColor(Style.WORKSPACE_MENU);
  getViewManager().menuOptions(options);
  options.add(new AbstractUserAction("About..."){
    public void execute(    Workspace workspace,    View view,    Location at){
      AboutView aboutView=new AboutView();
      Size windowSize=aboutView.getRequiredSize();
      Size workspaceSize=getWorkspace().getSize();
      int x=workspaceSize.getWidth() / 2 - windowSize.getWidth() / 2;
      int y=workspaceSize.getHeight() / 2 - windowSize.getHeight() / 2;
      aboutView.setSize(windowSize);
      getWorkspace().addView(aboutView);
      aboutView.setLocation(new Location(x,y));
    }
  }
);
  options.add(new AbstractUserAction("Naked Classes...",UserAction.DEBUG){
    public void execute(    Workspace workspace,    View view,    Location at){
      NakedObjectSpecification[] specs=NakedObjects.getSpecificationLoader().allSpecifications();
      Vector classCollection=new Vector();
      for (int i=0; i < specs.length; i++) {
        NakedObjectSpecification spec=specs[i];
        if (spec.isObject()) {
          classCollection.addElement(NakedObjects.getObjectLoader().createAdapterForTransient(NakedObjects.getObjectPersistor().getNakedClass(spec)));
        }
      }
      View classesView=createSubviewFor(NakedObjects.getObjectLoader().createAdapterForTransient(classCollection),false);
      classesView.setLocation(at);
      addView(classesView);
    }
  }
);
  options.add(new AbstractUserAction("Close all"){
    public void execute(    Workspace workspace,    View view,    Location at){
      View views[]=getSubviews();
      for (int i=0; i < views.length; i++) {
        View v=views[i];
        if (v.getSpecification().isOpen()) {
          v.dispose();
        }
      }
      markDamaged();
    }
  }
);
  options.add(new AbstractUserAction("Tidy up views"){
    public void execute(    Workspace workspace,    View view,    Location at){
      View views[]=getSubviews();
      for (int i=0; i < views.length; i++) {
        View v=views[i];
        if (v.getSpecification().isOpen()) {
          v.setLocation(WorkspaceBuilder.UNPLACED);
        }
      }
      workspace.invalidateLayout();
      markDamaged();
    }
  }
);
  options.add(new AbstractUserAction("Tidy up icons"){
    public void execute(    Workspace workspace,    View view,    Location at){
      View views[]=getSubviews();
      for (int i=0; i < views.length; i++) {
        View v=views[i];
        if (!v.getSpecification().isOpen()) {
          v.setLocation(WorkspaceBuilder.UNPLACED);
        }
      }
      workspace.invalidateLayout();
      markDamaged();
    }
  }
);
  options.add(new AbstractUserAction("Tidy up all"){
    public void execute(    Workspace workspace,    View view,    Location at){
      View views[]=getSubviews();
      for (int i=0; i < views.length; i++) {
        views[i].setLocation(WorkspaceBuilder.UNPLACED);
      }
      workspace.invalidateLayout();
      markDamaged();
    }
  }
);
}
