{
  getViewManager().showArrowCursor();
  if (!drag.getSourceContent().isObject()) {
    return;
  }
  if (drag.getSourceContent().getNaked() == getContent().getNaked()) {
    getViewManager().setStatus("can' drop self on workspace");
    return;
  }
  NakedObject source=((ObjectContent)drag.getSourceContent()).getObject();
  View newView;
  if (source.getObject() instanceof NakedClass && drag.isCtrl()) {
    NakedClass nakedClass=((NakedClass)source.getObject());
    Consent consent=nakedClass.useCreate();
    if (consent.isVetoed() || !getViewManager().isRunningAsExploration()) {
      return;
    }
    NakedObjectSpecification spec=nakedClass.forObjectType();
    LOG.info("new " + spec.getShortName() + " instance");
    newView=newInstance(spec,!drag.isCtrl());
  }
 else {
    if (drag.isShift()) {
      newView=createSubviewFor(source,false);
    }
 else {
      View icon=drag.getSource();
      if (!icon.getSpecification().isOpen()) {
        View[] subviews=getSubviews();
        for (int i=0; i < subviews.length; i++) {
          if (subviews[i] == icon) {
            icon.markDamaged();
            Location at=drag.getTargetLocation();
            at.translate(drag.getOffset());
            icon.setLocation(at);
            icon.markDamaged();
            return;
          }
        }
      }
      newView=createSubviewFor(source,true);
    }
  }
  newView.setSize(newView.getRequiredSize());
  Location location=drag.getTargetLocation();
  location.add(40,-40);
  newView.setLocation(location);
  drag.getTargetView().addView(newView);
}
