{
  String idStr=oid.getIdentifier();
  final int colonIdx=idStr.indexOf(SEPARATOR);
  final String keyStr=idStr.substring(colonIdx + 1);
  final String firstPart=idStr.substring(0,colonIdx);
  final ObjectSpecification spec=getSpecificationLoader().lookupBySpecId(oid.getObjectSpecId());
  JdoPersistenceCapableFacet facet=spec.getFacet(JdoPersistenceCapableFacet.class);
  if (facet != null && facet.getIdentityType() == IdentityType.APPLICATION) {
    if ("s".equals(firstPart)) {
      return keyStr;
    }
    if ("i".equals(firstPart)) {
      return Integer.parseInt(keyStr);
    }
    if ("l".equals(firstPart)) {
      return Long.parseLong(keyStr);
    }
    if ("b".equals(firstPart)) {
      return Byte.parseByte(keyStr);
    }
  }
 else {
    if ("s".equals(firstPart)) {
      return new StringIdentity(objectTypeClassFor(oid),keyStr);
    }
    if ("i".equals(firstPart)) {
      return new IntIdentity(objectTypeClassFor(oid),keyStr);
    }
    if ("l".equals(firstPart)) {
      return new LongIdentity(objectTypeClassFor(oid),keyStr);
    }
    if ("b".equals(firstPart)) {
      return new ByteIdentity(objectTypeClassFor(oid),keyStr);
    }
  }
  if (dnPrefixes.contains(firstPart)) {
    return keyStr + "[OID]" + spec.getFullIdentifier();
  }
  final String clsName=firstPart;
  try {
    final Class<?> cls=Thread.currentThread().getContextClassLoader().loadClass(clsName);
    final Constructor<?> cons=cls.getConstructor(String.class);
    final Object dnOid=cons.newInstance(keyStr);
    return dnOid.toString();
  }
 catch (  ClassNotFoundException e) {
    throw new JdoObjectIdSerializer.Exception(e);
  }
catch (  IllegalArgumentException e) {
    throw new JdoObjectIdSerializer.Exception(e);
  }
catch (  InstantiationException e) {
    throw new JdoObjectIdSerializer.Exception(e);
  }
catch (  IllegalAccessException e) {
    throw new JdoObjectIdSerializer.Exception(e);
  }
catch (  InvocationTargetException e) {
    throw new JdoObjectIdSerializer.Exception(e);
  }
catch (  SecurityException e) {
    throw new JdoObjectIdSerializer.Exception(e);
  }
catch (  NoSuchMethodException e) {
    throw new JdoObjectIdSerializer.Exception(e);
  }
}
