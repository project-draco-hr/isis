{
  recordEvent(ev);
switch (ev.getPhase()) {
case HIDE:
    if (getSubscriberBehaviour() == Behaviour.DependenciesCollectionHide && ev.getIdentifier().getMemberName().equals("dependencies")) {
      ev.hide();
    }
  if (getSubscriberBehaviour() == Behaviour.SimilarToCollectionHide && ev.getIdentifier().getMemberName().equals("similarTo")) {
    ev.hide();
  }
break;
case DISABLE:
if (getSubscriberBehaviour() == Behaviour.DependenciesCollectionDisable && ev.getIdentifier().getMemberName().equals("dependencies")) {
ev.disable("ToDoItemSubscriptions says: dependencies collection disabled!");
}
break;
case VALIDATE:
if (getSubscriberBehaviour() == Behaviour.DependenciesCollectionInvalidateAdd && ev.getIdentifier().getMemberName().equals("dependencies") && ev.getOf() == CollectionInteractionEvent.Of.ADD_TO) {
ev.invalidate("ToDoItemSubscriptions says: can't add this object to dependencies collection!");
}
if (getSubscriberBehaviour() == Behaviour.DependenciesCollectionInvalidateRemove && ev.getIdentifier().getMemberName().equals("dependencies") && ev.getOf() == CollectionInteractionEvent.Of.REMOVE_FROM) {
ev.invalidate("ToDoItemSubscriptions says: can't remove this object from dependencies collection!");
}
break;
case EXECUTING:
break;
case EXECUTED:
if (ev.getOf() == CollectionInteractionEvent.Of.ADD_TO) {
LOG.info("Received CollectionInteractionEvent, " + container.titleOf(ev.getSource()) + ", added to "+ ev.getIdentifier().getMemberName()+ " : "+ ev.getValue());
}
 else {
LOG.info("Received CollectionInteractionEvent, " + container.titleOf(ev.getSource()) + ", removed from "+ ev.getIdentifier().getMemberName()+ " : "+ ev.getValue());
}
onExecutedVetoIfRequired();
break;
}
}
