{
  final AbstractLink link=getLink();
  final Label label=new Label(CssMenuItem.ID_MENU_LABEL,Model.of(this.getName()));
  if (link != null) {
    markupContainer.add(link);
    link.add(label);
    if (this.description != null) {
      label.add(new AttributeModifier("title",Model.of(description)));
    }
    if (this.blobOrClob) {
      link.add(new CssClassAppender("noVeil"));
    }
    if (this.prototype) {
      link.add(new CssClassAppender("prototype"));
    }
    if (this.cssClass != null) {
      link.add(new CssClassAppender(this.cssClass));
    }
    link.add(new CssClassAppender(this.actionIdentifier));
    String cssClassFa=getCssClassFa();
    if (!Strings.isNullOrEmpty(cssClassFa)) {
      label.add(new CssClassFaBehavior(cssClassFa,getCssClassFaPosition()));
    }
    if (!this.isEnabled()) {
      link.add(new AttributeModifier("title",Model.of(this.getDisabledReason())));
      link.add(new CssClassAppender("disabled"));
      link.setEnabled(false);
    }
    Components.permanentlyHide(markupContainer,CssMenuItem.ID_MENU_LABEL);
    return link;
  }
 else {
    Components.permanentlyHide(markupContainer,ID_MENU_LINK);
    label.add(new AttributeModifier("title",Model.of(this.getDisabledReason())));
    label.add(new AttributeModifier("class",Model.of("disabled")));
    markupContainer.add(label);
    return label;
  }
}
