{
  super(deploymentCategory,configuration,servicesInjector,specificationLoader);
  this.authenticationSessionProvider=new AuthenticationSessionProviderAbstract(){
    @Override public AuthenticationSession getAuthenticationSession(){
      return IsisContext.getAuthenticationSession();
    }
  }
;
  this.persistenceSessionService=new PersistenceSessionServiceAbstract(){
    @Override public ObjectAdapter getAdapterFor(    Oid oid){
      return getPersistenceSession().getAdapterFor(oid);
    }
    @Override public ObjectAdapter getAdapterFor(    final Object pojo){
      return getPersistenceSession().getAdapterFor(pojo);
    }
    @Override public ObjectAdapter adapterFor(    final Object pojo){
      return getPersistenceSession().adapterFor(pojo);
    }
    @Override public ObjectAdapter adapterFor(    final Object pojo,    final ObjectAdapter ownerAdapter,    final OneToManyAssociation collection){
      return getPersistenceSession().adapterFor(pojo,ownerAdapter,collection);
    }
    @Override public ObjectAdapter mapRecreatedPojo(    Oid oid,    Object recreatedPojo){
      return getPersistenceSession().mapRecreatedPojo(oid,recreatedPojo);
    }
    @Override public void removeAdapter(    ObjectAdapter adapter){
      getPersistenceSession().removeAdapter(adapter);
    }
    @Override public void makePersistent(    final ObjectAdapter adapter){
      getPersistenceSession().makePersistentInTransaction(adapter);
    }
    @Override public void remove(    final ObjectAdapter adapter){
      getPersistenceSession().destroyObjectInTransaction(adapter);
    }
    @Override public ObjectAdapter createTransientInstance(    final ObjectSpecification spec){
      return getPersistenceSession().createTransientInstance(spec);
    }
    @Override public ObjectAdapter createViewModelInstance(    ObjectSpecification spec,    String memento){
      return getPersistenceSession().createViewModelInstance(spec,memento);
    }
    @Override public Object lookup(    Bookmark bookmark){
      return new DomainObjectContainerResolve().lookup(bookmark);
    }
    @Override public Bookmark bookmarkFor(    Object domainObject){
      return new DomainObjectContainerResolve().bookmarkFor(domainObject);
    }
    @Override public Bookmark bookmarkFor(    Class<?> cls,    String identifier){
      return new DomainObjectContainerResolve().bookmarkFor(cls,identifier);
    }
    @Override public void resolve(    final Object parent){
      new DomainObjectContainerResolve().resolve(parent);
    }
    @Override public void resolve(    final Object parent,    final Object field){
      new DomainObjectContainerResolve().resolve(parent,field);
    }
    @Override public boolean flush(){
      return getTransactionManager().flushTransaction();
    }
    @Override public void commit(){
      getTransactionManager().endTransaction();
    }
    @Override public <T>List<ObjectAdapter> allMatchingQuery(    final Query<T> query){
      return getPersistenceSession().allMatchingQuery(query);
    }
    @Override public <T>ObjectAdapter firstMatchingQuery(    final Query<T> query){
      return getPersistenceSession().firstMatchingQuery(query);
    }
    @Override public void injectInto(    Object candidate){
      if (AdapterManagerAware.class.isAssignableFrom(candidate.getClass())) {
        final AdapterManagerAware cast=AdapterManagerAware.class.cast(candidate);
        cast.setAdapterManager(this);
      }
      if (PersistenceSessionServiceAware.class.isAssignableFrom(candidate.getClass())) {
        final PersistenceSessionServiceAware cast=PersistenceSessionServiceAware.class.cast(candidate);
        cast.setPersistenceSessionService(this);
      }
    }
  }
;
  this.messageBrokerService=new MessageBrokerServiceAbstract(){
    @Override public void informUser(    final String message){
      getMessageBroker().addMessage(message);
    }
    @Override public void warnUser(    final String message){
      getMessageBroker().addWarning(message);
    }
    @Override public void raiseError(    final String message){
      throw new RecoverableException(message);
    }
  }
;
  this.localizationProvider=new LocalizationProviderAbstract(){
    @Override public Localization getLocalization(){
      return IsisContext.getLocalization();
    }
  }
;
}
